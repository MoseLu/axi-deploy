name: Build & Deploy Go Project

on:
  push:
    branches: [main, master]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 设置 Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.4'
          cache: true
          
      - name: 构建项目
        run: |
          cd backend
          go mod tidy
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o app main.go
          
      - name: 打包部署文件
        run: |
          # 创建部署包
          tar czf deployment.tar.gz \
            backend/app \
            front/ \
            index.html \
            backend/config/ \
            app.service
          
      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ github.event.repository.name }}
          path: deployment.tar.gz
          retention-days: 1

      # 暴露构建产物信息并触发部署
      - name: 暴露构建产物信息并触发部署
        run: |
          echo "BUILD_ARTIFACTS=$(pwd)/dist" >> $GITHUB_ENV
          echo "PROJECT_TYPE=go" >> $GITHUB_ENV
          echo "DEPLOY_PATH=/www/wwwroot/${{ github.event.repository.name }}" >> $GITHUB_ENV

      # 触发部署中心的工作流
      - name: 触发部署中心的工作流
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.DEPLOY_CENTER_PAT }}
          repository: MoseLu/axi-deploy
          event-type: deploy
          client-payload: |
            {
              "project": "${{ github.event.repository.name }}",
              "deploy_path": "${{ env.DEPLOY_PATH }}",
              "run_id": "${{ github.run_id }}",
              "source_repo": "${{ github.repository }}",
              "start_cmd": "cd /www/wwwroot/${{ github.event.repository.name }} && tar xzf deployment.tar.gz && chmod +x app && mkdir -p uploads/{image,document,audio,video,other,avatars} && mkdir -p logs && sudo cp app.service /etc/systemd/system/ && sudo chmod 644 /etc/systemd/system/app.service && sudo systemctl daemon-reload && sudo systemctl enable app.service && sudo systemctl restart app.service && sleep 5 && if curl -f -s http://127.0.0.1:8080/health > /dev/null 2>&1; then echo '✅ 服务启动成功'; else echo '❌ 服务启动失败'; sudo systemctl status app.service --no-pager --lines 5; exit 1; fi",
              "nginx_config": "server { listen 80; listen 443 ssl http2; server_name example.com; location / { root /www/wwwroot/${{ github.event.repository.name }}; try_files $uri $uri/ /index.html; location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg)$ { expires 1y; add_header Cache-Control \"public, immutable\"; } } location /api/ { proxy_pass http://127.0.0.1:8080/; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; client_max_body_size 100M; } location /health { proxy_pass http://127.0.0.1:8080/health; proxy_set_header Host $host; } include /www/server/nginx/conf/vhost/includes/*.conf; }",
              "nginx_path": "/www/server/nginx/conf/vhost/example.com.conf",
              "test_url": "https://example.com/"
            } 