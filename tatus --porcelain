[1mdiff --git a/QUICKSTART.md b/QUICKSTART.md[m
[1mindex 707e3f2..7c2b94c 100644[m
[1m--- a/QUICKSTART.md[m
[1m+++ b/QUICKSTART.md[m
[36m@@ -1,13 +1,29 @@[m
[31m-# 快速开始指南[m
[32m+[m[32m# 🚀 快速开始指南[m
 [m
[31m-## 🚀 1分钟快速部署[m
[32m+[m[32m## 推荐方案：workflow_dispatch[m
 [m
[31m-### 1. 创建部署工作流[m
[32m+[m[32m这是目前唯一能绕过 GitHub Actions 限制的方案，**强烈推荐使用**。[m
[32m+[m
[32m+[m[32m### 步骤 1：配置公共仓库（axi-deploy）[m
[32m+[m
[32m+[m[32m1. **配置 GitHub Secrets**[m
[32m+[m[32m   - 进入 axi-deploy 仓库的 Settings → Secrets and variables → Actions[m
[32m+[m[32m   - 添加以下 secrets：[m
[32m+[m[32m     - `SERVER_HOST`: 服务器IP地址[m
[32m+[m[32m     - `SERVER_PORT`: SSH端口（通常是22）[m
[32m+[m[32m     - `SERVER_USER`: SSH用户名[m
[32m+[m[32m     - `SERVER_KEY`: SSH私钥内容[m
[32m+[m
[32m+[m[32m2. **验证配置**[m
[32m+[m[32m   - 在 axi-deploy 仓库中手动运行 `deploy-dispatch.yml` 工作流[m
[32m+[m[32m   - 输入测试参数验证SSH连接[m
[32m+[m
[32m+[m[32m### 步骤 2：在业务仓库中配置[m
 [m
 在您的项目仓库中创建 `.github/workflows/deploy.yml`：[m
 [m
 ```yaml[m
[31m-name: Deploy via SSH[m
[32m+[m[32mname: Deploy to Production[m
 [m
 on:[m
   push:[m
[36m@@ -15,70 +31,95 @@[m [mon:[m
   workflow_dispatch:[m
 [m
 jobs:[m
[31m-  deploy:[m
[31m-    uses: MoseLu/axi-deploy/.github/workflows/ssh-deploy.yml@master[m
[31m-    with:[m
[31m-      source_path: './dist'[m
[31m-      target_path: '/var/www/myapp'[m
[31m-      commands: |[m
[31m-        cd /var/www/myapp[m
[31m-        npm install --production[m
[31m-        pm2 restart myapp[m
[32m+[m[32m  build:[m
[32m+[m[32m    runs-on: ubuntu-latest[m
[32m+[m[41m    [m
[32m+[m[32m    steps:[m
[32m+[m[32m      - name: 检出代码[m
[32m+[m[32m        uses: actions/checkout@v4[m
[32m+[m[41m        [m
[32m+[m[32m      - name: 设置 Node.js[m
[32m+[m[32m        uses: actions/setup-node@v4[m
[32m+[m[32m        with:[m
[32m+[m[32m          node-version: '18'[m
[32m+[m[32m          cache: 'npm'[m
[32m+[m[41m          [m
[32m+[m[32m      - name: 安装依赖[m
[32m+[m[32m        run: npm ci[m
[32m+[m[41m        [m
[32m+[m[32m      - name: 构建项目[m
[32m+[m[32m        run: npm run build[m
[32m+[m[41m        [m
[32m+[m[32m      - name: 触发部署[m
[32m+[m[32m        uses: actions/github-script@v7[m
[32m+[m[32m        with:[m
[32m+[m[32m          script: |[m
[32m+[m[32m            const { data: response } = await github.rest.actions.createWorkflowDispatch({[m
[32m+[m[32m              owner: 'MoseLu',  # 替换为您的用户名[m
[32m+[m[32m              repo: 'axi-deploy',[m
[32m+[m[32m              workflow_id: 'deploy-dispatch.yml',[m
[32m+[m[32m              ref: 'main',[m
[32m+[m[32m              inputs: {[m
[32m+[m[32m                caller_repo: '${{ github.repository }}',[m
[32m+[m[32m                caller_branch: '${{ github.ref_name }}',[m
[32m+[m[32m                caller_commit: '${{ github.sha }}',[m
[32m+[m[32m                source_path: './dist',[m
[32m+[m[32m                target_path: '/www/wwwroot/my-app',[m
[32m+[m[32m                commands: |[m
[32m+[m[32m                  cd /www/wwwroot/my-app[m
[32m+[m[32m                  npm install --production[m
[32m+[m[32m                  pm2 restart my-app[m
[32m+[m[32m              }[m
[32m+[m[32m            });[m
[32m+[m[32m            console.log('部署已触发:', response);[m
 ```[m
 [m
[31m-### 2. 测试部署[m
[32m+[m[32m### 步骤 3：测试部署[m
 [m
[31m-推送代码到main分支，GitHub Actions将自动触发部署。[m
[32m+[m[32m1. **推送代码到主分支**[m
[32m+[m[32m   ```bash[m
[32m+[m[32m   git push origin main[m
[32m+[m[32m   ```[m
 [m
[31m-**就是这么简单！** 无需配置任何Secrets或SSH参数。[m
[32m+[m[32m2. **查看部署状态**[m
[32m+[m[32m   - 在您的业务仓库中查看构建状态[m
[32m+[m[32m   - 在 axi-deploy 仓库中查看部署状态[m
 [m
[31m-## 📋 常用命令[m
[32m+[m[32m## 方案对比[m
 [m
[31m-### 仅执行命令[m
[31m-```yaml[m
[31m-jobs:[m
[31m-  execute:[m
[31m-    uses: MoseLu/axi-deploy/.github/workflows/ssh-command.yml@master[m
[31m-    with:[m
[31m-      commands: |[m
[31m-        cd /opt/api[m
[31m-        npm run migrate[m
[31m-        pm2 restart api[m
[31m-```[m
[32m+[m[32m| 特性 | workflow_dispatch | Reusable Workflow |[m
[32m+[m[32m|------|-------------------|-------------------|[m
[32m+[m[32m| 访问 Secrets | ✅ 可以 | ❌ 不能 |[m
[32m+[m[32m| 复用部署逻辑 | ✅ 可以 | ✅ 可以 |[m
[32m+[m[32m| 配置复杂度 | 简单 | 简单 |[m
[32m+[m[32m| 推荐程度 | ✅ 强烈推荐 | ❌ 不推荐 |[m
 [m
[31m-### 查看部署日志[m
[31m-```bash[m
[31m-# 在服务器上[m
[31m-pm2 logs myapp[m
[31m-tail -f /var/log/nginx/access.log[m
[31m-```[m
[32m+[m[32m## 常见问题[m
 [m
[31m-### 重启应用[m
[31m-```bash[m
[31m-# 在服务器上[m
[31m-pm2 restart myapp[m
[31m-sudo systemctl reload nginx[m
[31m-```[m
[32m+[m[32m### Q: 为什么推荐 workflow_dispatch？[m
[32m+[m[32mA: 因为它是目前唯一能绕过 GitHub Actions 限制的方案，可以访问公共仓库自己的 Secrets。[m
 [m
[31m-## 🔧 故障排除[m
[32m+[m[32m### Q: 业务仓库需要配置 SSH 密钥吗？[m
[32m+[m[32mA: 不需要！所有 SSH 配置都在公共仓库中统一管理。[m
 [m
[31m-### SSH连接失败[m
[31m-1. 联系仓库管理员检查服务器配置[m
[31m-2. 确认服务器已添加本仓库的公钥[m
[31m-3. 验证服务器防火墙设置[m
[32m+[m[32m### Q: 如何修改部署参数？[m
[32m+[m[32mA: 在触发部署时通过 `inputs` 参数传递，如 `source_path`、`target_path`、`commands` 等。[m
 [m
[31m-### 文件传输失败[m
[31m-1. 检查目标路径权限[m
[31m-2. 确认磁盘空间充足[m
[31m-3. 验证网络连接稳定性[m
[32m+[m[32m### Q: 支持哪些类型的项目？[m
[32m+[m[32mA: 支持所有类型的项目，包括前端、后端、静态网站等。[m
 [m
[31m-### 命令执行失败[m
[31m-1. 检查用户权限[m
[31m-2. 确认命令路径正确[m
[31m-3. 查看服务器日志[m
[32m+[m[32m## 故障排除[m
 [m
[31m-## 📞 获取帮助[m
[32m+[m[32m### SSH 连接失败[m
[32m+[m[32m1. 检查 axi-deploy 仓库的 Secrets 配置[m
[32m+[m[32m2. 确认服务器 SSH 服务正常运行[m
[32m+[m[32m3. 验证网络连接和防火墙设置[m
 [m
[31m-- 📖 查看完整文档：[README.md](README.md)[m
[31m-- 🐛 报告问题：[GitHub Issues](https://github.com/MoseLu/axi-deploy/issues)[m
[31m-- 💬 讨论：[GitHub Discussions](https://github.com/MoseLu/axi-deploy/discussions) [m
\ No newline at end of file[m
[32m+[m[32m### 权限问题[m
[32m+[m[32m1. 确保业务仓库有权限调用 axi-deploy 仓库[m
[32m+[m[32m2. 检查 GitHub Token 权限设置[m
[32m+[m
[32m+[m[32m### 部署失败[m
[32m+[m[32m1. 检查目标路径权限[m
[32m+[m[32m2. 确认磁盘空间充足[m
[32m+[m[32m3. 查看详细的部署日志[m[41m [m
\ No newline at end of file[m
[1mdiff --git a/README.md b/README.md[m
[1mindex c998c6f..589c43c 100644[m
[1m--- a/README.md[m
[1m+++ b/README.md[m
[36m@@ -2,6 +2,26 @@[m
 [m
 这是一个专门用于SSH连接的公共GitHub仓库，其他仓库可以通过GitHub Actions工作流调用此仓库进行远程服务器部署。**本仓库统一管理所有SSH配置，包括服务器信息，其他项目无需配置任何SSH相关参数。**[m
 [m
[32m+[m[32m## 🚀 推荐方案：workflow_dispatch[m
[32m+[m
[32m+[m[32m我们推荐使用 `workflow_dispatch` 方案，这是目前唯一能绕过 GitHub Actions 限制的办法：[m
[32m+[m
[32m+[m[32m| 方案 | 是否能访问密钥 | 是否能复用部署逻辑 | 推荐程度 |[m
[32m+[m[32m|------|----------------|-------------------|----------|[m
[32m+[m[32m| Reusable Workflow | ❌ 不能 | ✅ 可以 | ❌ 不推荐 |[m
[32m+[m[32m| **公共仓库的 workflow_dispatch** | ✅ **可以（访问自己的 Secrets）** | ✅ **可以（集中部署脚本）** | ✅ **强烈推荐** |[m
[32m+[m
[32m+[m[32m### ✅ 正确做法（已验证可行）[m
[32m+[m
[32m+[m[32m1. **公共仓库（如 axi-deploy）**[m
[32m+[m[32m   - 存储密钥（SERVER_KEY、SERVER_HOST 等）[m
[32m+[m[32m   - 定义部署脚本（deploy.sh）[m
[32m+[m[32m   - 定义 workflow_dispatch 工作流（真正执行 SSH）[m
[32m+[m
[32m+[m[32m2. **业务仓库（如 project-a）**[m
[32m+[m[32m   - 只负责构建（npm run build）[m
[32m+[m[32m   - 触发公共仓库的 workflow_dispatch（无需密钥）[m
[32m+[m
 ## 功能特性[m
 [m
 - 🔐 安全的SSH连接管理[m
[36m@@ -39,7 +59,92 @@[m
 [m
 ## 使用方法[m
 [m
[31m-### 1. 在其他仓库中调用[m
[32m+[m[32m### 🎯 推荐方案：workflow_dispatch[m
[32m+[m
[32m+[m[32m#### 1. 在业务仓库中触发部署[m
[32m+[m
[32m+[m[32m在您的项目仓库中创建 `.github/workflows/deploy.yml` 文件：[m
[32m+[m
[32m+[m[32m```yaml[m
[32m+[m[32mname: Deploy to Production[m
[32m+[m
[32m+[m[32mon:[m
[32m+[m[32m  push:[m
[32m+[m[32m    branches: [ main, master ][m
[32m+[m[32m  workflow_dispatch:[m
[32m+[m
[32m+[m[32mjobs:[m
[32m+[m[32m  build:[m
[32m+[m[32m    runs-on: ubuntu-latest[m
[32m+[m[41m    [m
[32m+[m[32m    steps:[m
[32m+[m[32m      - name: 检出代码[m
[32m+[m[32m        uses: actions/checkout@v4[m
[32m+[m[41m        [m
[32m+[m[32m      - name: 设置 Node.js[m
[32m+[m[32m        uses: actions/setup-node@v4[m
[32m+[m[32m        with:[m
[32m+[m[32m          node-version: '18'[m
[32m+[m[32m          cache: 'npm'[m
[32m+[m[41m          [m
[32m+[m[32m      - name: 安装依赖[m
[32m+[m[32m        run: npm ci[m
[32m+[m[41m        [m
[32m+[m[32m      - name: 构建项目[m
[32m+[m[32m        run: npm run build[m
[32m+[m[41m        [m
[32m+[m[32m      - name: 触发部署[m
[32m+[m[32m        uses: actions/github-script@v7[m
[32m+[m[32m        with:[m
[32m+[m[32m          script: |[m
[32m+[m[32m            const { data: response } = await github.rest.actions.createWorkflowDispatch({[m
[32m+[m[32m              owner: 'MoseLu',[m
[32m+[m[32m              repo: 'axi-deploy',[m
[32m+[m[32m              workflow_id: 'deploy-dispatch.yml',[m
[32m+[m[32m              ref: 'main',[m
[32m+[m[32m              inputs: {[m
[32m+[m[32m                caller_repo: '${{ github.repository }}',[m
[32m+[m[32m                caller_branch: '${{ github.ref_name }}',[m
[32m+[m[32m                caller_commit: '${{ github.sha }}',[m
[32m+[m[32m                source_path: './dist',[m
[32m+[m[32m                target_path: '/www/wwwroot/my-app',[m
[32m+[m[32m                commands: |[m
[32m+[m[32m                  cd /www/wwwroot/my-app[m
[32m+[m[32m                  npm install --production[m
[32m+[m[32m                  pm2 restart my-app[m
[32m+[m[32m                  sudo systemctl reload nginx[m
[32m+[m[32m              }[m
[32m+[m[32m            });[m
[32m+[m[32m            console.log('部署已触发:', response);[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m#### 2. 简单触发方式（使用 curl）[m
[32m+[m
[32m+[m[32m如果您更喜欢使用 curl 命令：[m
[32m+[m
[32m+[m[32m```yaml[m
[32m+[m[32m- name: 触发部署[m
[32m+[m[32m  run: |[m
[32m+[m[32m    curl -X POST \[m
[32m+[m[32m      -H "Accept: application/vnd.github.v3+json" \[m
[32m+[m[32m      -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \[m
[32m+[m[32m      https://api.github.com/repos/MoseLu/axi-deploy/actions/workflows/deploy-dispatch.yml/dispatches \[m
[32m+[m[32m      -d '{[m
[32m+[m[32m        "ref": "main",[m
[32m+[m[32m        "inputs": {[m
[32m+[m[32m          "caller_repo": "${{ github.repository }}",[m
[32m+[m[32m          "caller_branch": "${{ github.ref_name }}",[m
[32m+[m[32m          "caller_commit": "${{ github.sha }}",[m
[32m+[m[32m          "source_path": "./dist",[m
[32m+[m[32m          "target_path": "/www/wwwroot/my-app",[m
[32m+[m[32m          "commands": "cd /www/wwwroot/my-app && npm install --production && pm2 restart my-app"[m
[32m+[m[32m        }[m
[32m+[m[32m      }'[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m### 🔄 传统方案：Reusable Workflow[m
[32m+[m
[32m+[m[32m#### 1. 在其他仓库中调用[m
 [m
 在您的项目仓库中创建 `.github/workflows/deploy.yml` 文件：[m
 [m
