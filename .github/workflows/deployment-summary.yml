name: Deployment Summary

description: "部署完成总结 - 显示部署结果和状态信息"

on:
  workflow_call:
    inputs:
      project:
        required: true
        type: string
        description: "项目名称"
      deploy_type:
        required: true
        type: string
        description: "部署类型"
      source_repo:
        required: true
        type: string
        description: "源仓库"
      run_id:
        required: true
        type: string
        description: "构建运行ID"
      test_url:
        required: false
        type: string
        description: "测试URL"
        default: ""
      deploy_path:
        required: false
        type: string
        description: "部署路径"
        default: ""
      parse_secrets_result:
        required: false
        type: string
        description: "解析密钥结果"
        default: ""
      server_init_result:
        required: false
        type: string
        description: "服务器初始化结果"
        default: ""
      validate_artifact_result:
        required: false
        type: string
        description: "验证构建产物结果"
        default: ""
      deploy_project_result:
        required: false
        type: string
        description: "部署项目结果"
        default: ""
      configure_nginx_result:
        required: false
        type: string
        description: "配置Nginx结果"
        default: ""
      start_service_result:
        required: false
        type: string
        description: "启动服务结果"
        default: ""
      test_website_static_result:
        required: false
        type: string
        description: "测试网站(静态)结果"
        default: ""
      test_website_backend_result:
        required: false
        type: string
        description: "测试网站(后端)结果"
        default: ""

jobs:
  summary:
    runs-on: ubuntu-latest
    timeout-minutes: 5  # 部署总结超时时间
    steps:
      - name: 部署完成总结
        run: |
          echo "🎉 部署流程完成"
          echo "=========================================="
          echo "📋 部署信息:"
          echo "- 项目: ${{ inputs.project }}"
          echo "- 部署类型: ${{ inputs.deploy_type }}"
          echo "- 源仓库: ${{ inputs.source_repo }}"
          echo "- 构建ID: ${{ inputs.run_id }}"
          echo ""
          echo "📊 执行状态:"
          echo "- 解析密钥: ${{ inputs.parse_secrets_result }}"
          echo "- 服务器初始化: ${{ inputs.server_init_result || 'skipped' }}"
          echo "- 验证构建产物: ${{ inputs.validate_artifact_result }}"
          echo "- 部署项目: ${{ inputs.deploy_project_result }}"
          echo "- 配置Nginx: ${{ inputs.configure_nginx_result || 'skipped' }}"
          echo "- 启动服务: ${{ inputs.start_service_result || 'skipped' }}"
          echo "- 测试网站(静态): ${{ inputs.test_website_static_result || 'skipped' }}"
          echo "- 测试网站(后端): ${{ inputs.test_website_backend_result || 'skipped' }}"
          echo ""
          
          # 检查关键步骤是否成功
          CRITICAL_FAILURES=()
          
          if [ "${{ inputs.parse_secrets_result }}" = "failure" ]; then
            CRITICAL_FAILURES+=("解析密钥失败")
          fi
          
          if [ "${{ inputs.validate_artifact_result }}" = "failure" ]; then
            CRITICAL_FAILURES+=("验证构建产物失败")
          fi
          
          if [ "${{ inputs.deploy_project_result }}" = "failure" ]; then
            CRITICAL_FAILURES+=("部署项目失败")
          fi
          
          if [ "${{ inputs.configure_nginx_result }}" = "failure" ]; then
            CRITICAL_FAILURES+=("配置Nginx失败")
          fi
          
          if [ "${{ inputs.deploy_type }}" = "backend" ] && [ "${{ inputs.start_service_result }}" = "failure" ]; then
            CRITICAL_FAILURES+=("启动服务失败")
          fi
          
          # 检查测试结果
          TEST_FAILURE=""
          if [ "${{ inputs.deploy_type }}" = "backend" ] && [ "${{ inputs.test_website_backend_result }}" = "failure" ]; then
            TEST_FAILURE="后端网站测试失败"
          elif [ "${{ inputs.deploy_type }}" = "static" ] && [ "${{ inputs.test_website_static_result }}" = "failure" ]; then
            TEST_FAILURE="静态网站测试失败"
          fi
          
          # 显示结果
          if [ ${#CRITICAL_FAILURES[@]} -gt 0 ]; then
            echo "🚨 部署失败 - 关键步骤失败:"
            for failure in "${CRITICAL_FAILURES[@]}"; do
              echo "  - $failure"
            done
            echo ""
            echo "❌ 部署失败，请检查上述错误并重新部署"
            exit 1
          elif [ -n "$TEST_FAILURE" ]; then
            echo "⚠️ 部署部分成功 - $TEST_FAILURE"
            echo ""
            echo "🔍 可能的原因:"
            if [ "${{ inputs.deploy_type }}" = "backend" ]; then
              echo "1. 后端服务启动失败"
              echo "2. 端口配置错误"
              echo "3. 依赖安装不完整"
              echo "4. 环境变量配置错误"
              echo "5. PM2进程管理问题"
            else
              echo "1. 静态文件部署不完整"
              echo "2. Nginx配置错误"
              echo "3. 域名解析问题"
              echo "4. SSL证书问题"
            fi
            echo ""
            echo "💡 建议:"
            echo "- 检查服务器日志获取详细错误信息"
            echo "- 验证服务是否正常启动"
            echo "- 确认网络和防火墙配置"
            echo ""
            echo "✅ 项目文件已部署，但服务可能未正常运行"
          else
            echo "✅ 所有步骤执行成功"
            echo ""
            echo "🎉 部署完全成功！"
          fi
          
          echo ""
          echo "🔗 访问信息:"
          echo "- 域名: redamancy.com.cn"
          if [ "${{ inputs.deploy_path }}" != "" ]; then
            echo "- 项目路径: ${{ inputs.deploy_path }}"
          fi
          if [ "${{ inputs.test_url }}" != "" ]; then
            echo "- 测试URL: ${{ inputs.test_url }}"
          fi
          echo ""
          
          if [ ${#CRITICAL_FAILURES[@]} -gt 0 ]; then
            echo "📝 部署失败通知:"
            echo "❌ 项目 ${{ inputs.project }} 部署失败"
            echo "请检查上述错误信息并重新部署"
          elif [ -n "$TEST_FAILURE" ]; then
            echo "📝 部署部分成功通知:"
            echo "⚠️ 项目 ${{ inputs.project }} 已部署但测试失败"
            echo "请检查服务状态和配置"
            if [ "${{ inputs.test_url }}" != "" ]; then
              echo "🌐 测试URL: ${{ inputs.test_url }}"
            fi
          else
            echo "📝 部署完成通知:"
            echo "✅ 项目 ${{ inputs.project }} 已成功部署到服务器"
            if [ "${{ inputs.test_url }}" != "" ]; then
              echo "🌐 可通过 ${{ inputs.test_url }} 访问"
            fi
          fi
          echo "=========================================="
          
          # 发送 webhook 事件到 axi-project-dashboard
          echo "📤 发送部署状态到监控中心..."
          
          # 确定部署状态
          if [ ${#CRITICAL_FAILURES[@]} -gt 0 ]; then
            DEPLOY_STATUS="failed"
            DEPLOY_MESSAGE="部署失败"
          elif [ -n "$TEST_FAILURE" ]; then
            DEPLOY_STATUS="success"
            DEPLOY_MESSAGE="部署成功但测试失败"
          else
            DEPLOY_STATUS="success"
            DEPLOY_MESSAGE="部署成功"
          fi
          
          # 构建 webhook 数据
          WEBHOOK_DATA='{"project":"${{ inputs.project }}","repository":"${{ inputs.source_repo }}","branch":"main","commit_hash":"latest","status":"'$DEPLOY_STATUS'","triggered_by":"axi-deploy","trigger_type":"manual","deploy_type":"${{ inputs.deploy_type }}","deploy_path":"${{ inputs.deploy_path }}","test_url":"${{ inputs.test_url }}","message":"'$DEPLOY_MESSAGE'","timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}'
          
          # 发送 webhook 到 axi-project-dashboard
          echo "📤 发送 webhook 到监控中心..."
          WEBHOOK_RESPONSE=$(curl -s -w "%{http_code}" -o /tmp/webhook_response.json -X POST -H "Content-Type: application/json" -H "User-Agent: axi-deploy/1.0" -d "$WEBHOOK_DATA" "https://redamancy.com.cn/project-dashboard/api/webhook/deployment")
          
          WEBHOOK_STATUS_CODE="${WEBHOOK_RESPONSE: -3}"
          WEBHOOK_BODY=$(cat /tmp/webhook_response.json 2>/dev/null || echo "{}")
          
          if [ "$WEBHOOK_STATUS_CODE" = "200" ]; then
            echo "✅ Webhook 发送成功"
            echo "📋 Webhook 响应: $WEBHOOK_BODY"
          else
            echo "⚠️ Webhook 发送失败 (HTTP $WEBHOOK_STATUS_CODE)"
            echo "📋 Webhook 响应: $WEBHOOK_BODY"
            echo "📋 发送的数据: $WEBHOOK_DATA"
          fi
