name: Repository Dispatch Handler

on:
  repository_dispatch:
    types: [deploy]

jobs:
  handle-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: 验证部署请求参数
        run: |
          echo "🔍 验证部署请求参数..."
          
          # 检查必需参数
          if [ -z "${{ github.event.client_payload.project }}" ]; then
            echo "🚨 缺少必需参数: project"
            exit 1
          fi
          
          if [ -z "${{ github.event.client_payload.source_repo }}" ]; then
            echo "🚨 缺少必需参数: source_repo"
            exit 1
          fi
          
          if [ -z "${{ github.event.client_payload.run_id }}" ]; then
            echo "🚨 缺少必需参数: run_id"
            exit 1
          fi
          
          # 检查DEPLOY_SECRETS参数（必需）
          if [ -z "${{ github.event.client_payload.deploy_secrets }}" ]; then
            echo "🚨 缺少必需参数: deploy_secrets"
            echo "⚠️ 可复用工作流无法访问调用者仓库的secrets，必须通过参数传递"
            exit 1
          fi
          
          echo "✅ 检测到DEPLOY_SECRETS参数"
          
          # 验证参数格式
          if [[ ! "${{ github.event.client_payload.source_repo }}" =~ ^[^/]+/[^/]+$ ]]; then
            echo "🚨 无效的source_repo格式: ${{ github.event.client_payload.source_repo }}"
            echo "正确格式应为: owner/repo"
            exit 1
          fi
          
          if [[ ! "${{ github.event.client_payload.run_id }}" =~ ^[0-9]+$ ]]; then
            echo "🚨 无效的run_id格式: ${{ github.event.client_payload.run_id }}"
            echo "run_id应为数字"
            exit 1
          fi
          
          # 验证部署类型
          DEPLOY_TYPE="${{ github.event.client_payload.deploy_type || 'static' }}"
          if [[ "$DEPLOY_TYPE" != "static" && "$DEPLOY_TYPE" != "backend" ]]; then
            echo "🚨 无效的deploy_type: $DEPLOY_TYPE"
            echo "deploy_type应为 'static' 或 'backend'"
            exit 1
          fi
          
          echo "✅ 部署请求参数验证通过"
          echo "📋 部署请求详情:"
          echo "- 项目: ${{ github.event.client_payload.project }}"
          echo "- 部署类型: $DEPLOY_TYPE"
          echo "- 源仓库: ${{ github.event.client_payload.source_repo }}"
          echo "- 构建ID: ${{ github.event.client_payload.run_id }}"
          if [ -n "${{ github.event.client_payload.deploy_secrets }}" ]; then
            echo "- DEPLOY_SECRETS: 已提供"
          else
            echo "- DEPLOY_SECRETS: 使用默认配置"
          fi

      - name: 处理部署请求
        run: |
          echo "📋 收到部署请求:"
          echo "- 项目: ${{ github.event.client_payload.project }}"
          echo "- 部署类型: ${{ github.event.client_payload.deploy_type || 'static' }}"
          echo "- 源仓库: ${{ github.event.client_payload.source_repo }}"
          echo "- 构建ID: ${{ github.event.client_payload.run_id }}"
          
          # 记录部署请求到日志
          echo "📝 部署日志:"
          echo "时间: $(date)"
          echo "项目: ${{ github.event.client_payload.project }}"
          echo "仓库: ${{ github.event.client_payload.source_repo }}"
          echo "构建ID: ${{ github.event.client_payload.run_id }}"
          echo "部署类型: ${{ github.event.client_payload.deploy_type || 'static' }}"
          
          echo "✅ 部署请求已处理"

  trigger-deployment:
    needs: handle-deploy
    runs-on: ubuntu-latest
    steps:
      - name: 触发主部署工作流
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              console.log('🚀 触发主部署工作流...');
              
              // 验证参数
              const project = '${{ github.event.client_payload.project }}';
              const sourceRepo = '${{ github.event.client_payload.source_repo }}';
              const runId = '${{ github.event.client_payload.run_id }}';
              const deploySecrets = '${{ github.event.client_payload.deploy_secrets }}';
              
              if (!project || !sourceRepo || !runId || !deploySecrets) {
                throw new Error('缺少必需的部署参数，包括deploy_secrets');
              }
              
              // 构建输入参数
              const inputs = {
                project: project,
                source_repo: sourceRepo,
                run_id: runId,
                deploy_type: '${{ github.event.client_payload.deploy_type || 'static' }}',
                nginx_config: '${{ github.event.client_payload.nginx_config || '' }}',
                test_url: '${{ github.event.client_payload.test_url || '' }}',
                start_cmd: '${{ github.event.client_payload.start_cmd || '' }}',
                deploy_secrets: deploySecrets
              };
              
              console.log('📋 使用业务仓库提供的DEPLOY_SECRETS');
              
              const { data: response } = await github.rest.actions.createWorkflowDispatch({
                owner: 'MoseLu',
                repo: 'axi-deploy',
                workflow_id: 'main-deployment.yml',
                ref: 'master',
                inputs: inputs
              });
              
              console.log('✅ 主部署工作流已成功触发!');
              console.log('📋 触发详情:');
              console.log('- 项目:', project);
              console.log('- 源仓库:', sourceRepo);
              console.log('- 构建ID:', runId);
              console.log('- 部署类型:', '${{ github.event.client_payload.deploy_type || 'static' }}');
              console.log('- DEPLOY_SECRETS: 已提供');
              
            } catch (error) {
              console.error('🚨 触发主部署工作流失败:', error.message);
              console.error('错误详情:', error);
              throw error;
            } 