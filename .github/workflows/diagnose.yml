name: Diagnose

description: "诊断工作流 - 诊断部署问题"

on:
  workflow_dispatch:
    inputs:
      project:
        description: '项目名称'
        required: false
        type: string
      diagnose_type:
        description: '诊断类型'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - network
          - nginx
          - service
          - deployment
          - system
      server_host:
        description: '服务器地址'
        required: false
        type: string
      server_user:
        description: '服务器用户'
        required: false
        type: string
      server_key:
        description: '服务器密钥'
        required: false
        type: string
      server_port:
        description: '服务器端口'
        required: false
        default: '22'
        type: string

jobs:
  diagnose:
    runs-on: ubuntu-latest
    steps:
      - name: 解析服务器配置
        id: parse-config
        run: |
          echo "🔍 解析服务器配置..."
          
          # 从输入参数或环境变量获取配置
          SERVER_HOST="${{ inputs.server_host || secrets.SERVER_HOST }}"
          SERVER_USER="${{ inputs.server_user || secrets.SERVER_USER }}"
          SERVER_KEY="${{ inputs.server_key || secrets.SERVER_KEY }}"
          SERVER_PORT="${{ inputs.server_port || secrets.SERVER_PORT || '22' }}"
          
          if [ -z "$SERVER_HOST" ] || [ -z "$SERVER_USER" ] || [ -z "$SERVER_KEY" ]; then
            echo "🚨 缺少服务器配置信息"
            exit 1
          fi
          
          echo "✅ 服务器配置解析完成"

      - name: 系统诊断
        if: ${{ inputs.diagnose_type == 'all' || inputs.diagnose_type == 'system' }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ steps.parse-config.outputs.server_host || env.SERVER_HOST }}
          username: ${{ steps.parse-config.outputs.server_user || env.SERVER_USER }}
          key: ${{ steps.parse-config.outputs.server_key || env.SERVER_KEY }}
          port: ${{ steps.parse-config.outputs.server_port || env.SERVER_PORT }}
          script: |
            echo "🔍 系统诊断..."
            
            # 1. 系统基本信息
            echo "📊 系统基本信息:"
            echo "- 操作系统: $(uname -a)"
            echo "- 内核版本: $(uname -r)"
            echo "- 系统负载: $(uptime)"
            echo "- 运行时间: $(uptime -p)"
            
            # 2. 资源使用情况
            echo "💾 资源使用情况:"
            echo "- 内存使用:"
            free -h
            echo "- 磁盘使用:"
            df -h
            echo "- 进程数量: $(ps aux | wc -l)"
            
            # 3. 系统服务状态
            echo "🔧 系统服务状态:"
            echo "- SSH服务: $(systemctl is-active sshd)"
            echo "- Nginx服务: $(systemctl is-active nginx)"
            echo "- 防火墙状态: $(systemctl is-active firewalld 2>/dev/null || echo '未安装')"
            
            # 4. 系统日志检查
            echo "📝 系统日志检查:"
            echo "- 最近的系统错误:"
            journalctl -p err --since "1 hour ago" | tail -5 || echo "无错误日志"
            
            # 5. 进程检查
            echo "🔄 关键进程检查:"
            echo "- Nginx进程:"
            ps aux | grep nginx | grep -v grep || echo "未找到Nginx进程"
            echo "- 其他关键进程:"
            ps aux | grep -E "(sshd|systemd)" | head -5

      - name: 网络诊断
        if: ${{ inputs.diagnose_type == 'all' || inputs.diagnose_type == 'network' }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ steps.parse-config.outputs.server_host || env.SERVER_HOST }}
          username: ${{ steps.parse-config.outputs.server_user || env.SERVER_USER }}
          key: ${{ steps.parse-config.outputs.server_key || env.SERVER_KEY }}
          port: ${{ steps.parse-config.outputs.server_port || env.SERVER_PORT }}
          script: |
            echo "🔍 网络诊断..."
            
            # 1. 网络接口状态
            echo "🌐 网络接口状态:"
            ip addr show | grep -E "inet|UP|DOWN" | head -10
            
            # 2. 网络连接测试
            echo "🔗 网络连接测试:"
            echo "- 本地回环: $(ping -c 1 127.0.0.1 > /dev/null 2>&1 && echo '正常' || echo '异常')"
            echo "- 外网连接: $(ping -c 1 8.8.8.8 > /dev/null 2>&1 && echo '正常' || echo '异常')"
            echo "- DNS解析: $(nslookup google.com > /dev/null 2>&1 && echo '正常' || echo '异常')"
            
            # 3. 端口监听状态
            echo "🔌 端口监听状态:"
            echo "- HTTP端口(80): $(netstat -tlnp | grep ':80 ' && echo '正常' || echo '未监听')"
            echo "- HTTPS端口(443): $(netstat -tlnp | grep ':443 ' && echo '正常' || echo '未监听')"
            echo "- SSH端口(22): $(netstat -tlnp | grep ':22 ' && echo '正常' || echo '未监听')"
            echo "- 后端端口(8080): $(netstat -tlnp | grep ':8080 ' && echo '正常' || echo '未监听')"
            
            # 4. 防火墙规则
            echo "🔥 防火墙规则:"
            if command -v firewall-cmd &> /dev/null; then
              echo "- 防火墙状态: $(firewall-cmd --state)"
              echo "- 开放端口: $(firewall-cmd --list-ports)"
              echo "- 开放服务: $(firewall-cmd --list-services)"
            else
              echo "- 防火墙: 未安装firewalld"
            fi

      - name: Nginx诊断
        if: ${{ inputs.diagnose_type == 'all' || inputs.diagnose_type == 'nginx' }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ steps.parse-config.outputs.server_host || env.SERVER_HOST }}
          username: ${{ steps.parse-config.outputs.server_user || env.SERVER_USER }}
          key: ${{ steps.parse-config.outputs.server_key || env.SERVER_KEY }}
          port: ${{ steps.parse-config.outputs.server_port || env.SERVER_PORT }}
          script: |
            echo "🔍 Nginx诊断..."
            
            # 1. Nginx进程状态
            echo "📊 Nginx进程状态:"
            if pgrep nginx > /dev/null; then
              echo "✅ Nginx进程正在运行"
              NGINX_PIDS=$(pgrep nginx)
              echo "Nginx进程ID: $NGINX_PIDS"
            else
              echo "❌ Nginx进程未运行"
            fi
            
            # 2. Nginx配置检查
            echo "📋 Nginx配置检查:"
            if nginx -t > /dev/null 2>&1; then
              echo "✅ Nginx配置语法正确"
            else
              echo "❌ Nginx配置语法错误:"
              nginx -t
            fi
            
            # 3. Nginx配置文件
            echo "📁 Nginx配置文件:"
            echo "- 主配置文件: /etc/nginx/nginx.conf"
            if [ -f "/etc/nginx/nginx.conf" ]; then
              echo "  ✅ 主配置文件存在"
            else
              echo "  ❌ 主配置文件不存在"
            fi
            
            echo "- 站点配置目录: /www/server/nginx/conf/conf.d/redamancy"
            if [ -d "/www/server/nginx/conf/conf.d/redamancy" ]; then
              echo "  ✅ 站点配置目录存在"
              echo "  📋 配置文件列表:"
              ls -la /www/server/nginx/conf/conf.d/redamancy/ | head -10
            else
              echo "  ❌ 站点配置目录不存在"
            fi
            
            # 4. Nginx日志检查
            echo "📝 Nginx日志检查:"
            if [ -f "/var/log/nginx/error.log" ]; then
              echo "✅ 错误日志文件存在"
              echo "最近的错误日志:"
              tail -n 10 /var/log/nginx/error.log
            else
              echo "❌ 错误日志文件不存在"
            fi
            
            if [ -f "/var/log/nginx/access.log" ]; then
              echo "✅ 访问日志文件存在"
              echo "最近的访问日志:"
              tail -n 5 /var/log/nginx/access.log
            else
              echo "❌ 访问日志文件不存在"
            fi

      - name: 服务诊断
        if: ${{ inputs.diagnose_type == 'all' || inputs.diagnose_type == 'service' }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ steps.parse-config.outputs.server_host || env.SERVER_HOST }}
          username: ${{ steps.parse-config.outputs.server_user || env.SERVER_USER }}
          key: ${{ steps.parse-config.outputs.server_key || env.SERVER_KEY }}
          port: ${{ steps.parse-config.outputs.server_port || env.SERVER_PORT }}
          script: |
            echo "🔍 服务诊断..."
            
            # 1. 后端服务状态
            echo "🔧 后端服务状态:"
            if systemctl is-active --quiet star-cloud.service; then
              echo "✅ star-cloud服务正常运行"
              echo "服务状态详情:"
              systemctl status star-cloud.service --no-pager -l
            else
              echo "❌ star-cloud服务异常"
              echo "服务状态详情:"
              systemctl status star-cloud.service --no-pager -l
            fi
            
            # 2. 服务日志检查
            echo "📝 服务日志检查:"
            if [ -f "/var/log/systemd/star-cloud.service.log" ]; then
              echo "✅ 服务日志文件存在"
              echo "最近的服务日志:"
              tail -n 10 /var/log/systemd/star-cloud.service.log
            else
              echo "⚠️ 服务日志文件不存在，使用journalctl:"
              journalctl -u star-cloud.service --no-pager -n 10
            fi
            
            # 3. 端口检查
            echo "🔌 端口检查:"
            echo "- 8080端口: $(netstat -tlnp | grep ':8080 ' && echo '正常' || echo '未监听')"
            echo "- 8080端口进程: $(lsof -i :8080 2>/dev/null || echo '无进程监听')"
            
            # 4. 进程检查
            echo "🔄 进程检查:"
            echo "- star-cloud进程:"
            ps aux | grep star-cloud | grep -v grep || echo "未找到star-cloud进程"

      - name: 部署诊断
        if: ${{ inputs.diagnose_type == 'all' || inputs.diagnose_type == 'deployment' }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ steps.parse-config.outputs.server_host || env.SERVER_HOST }}
          username: ${{ steps.parse-config.outputs.server_user || env.SERVER_USER }}
          key: ${{ steps.parse-config.outputs.server_key || env.SERVER_KEY }}
          port: ${{ steps.parse-config.outputs.server_port || env.SERVER_PORT }}
          script: |
            echo "🔍 部署诊断..."
            
            PROJECT="${{ inputs.project }}"
            
            # 1. 部署目录检查
            echo "📁 部署目录检查:"
            
            # 检查静态项目
            STATIC_ROOT="/srv/static"
            if [ -d "$STATIC_ROOT" ]; then
              echo "📂 静态项目目录: $STATIC_ROOT"
              for project in "$STATIC_ROOT"/*; do
                if [ -d "$project" ]; then
                  PROJECT_NAME=$(basename "$project")
                  FILE_COUNT=$(find "$project" -type f | wc -l)
                  if [ "$FILE_COUNT" -gt 0 ]; then
                    echo "  ✅ $PROJECT_NAME: $FILE_COUNT 个文件"
                    if [ -f "$project/index.html" ]; then
                      echo "    ✅ index.html 存在"
                    else
                      echo "    ⚠️ index.html 不存在"
                    fi
                  else
                    echo "  ⚠️ $PROJECT_NAME: 目录为空"
                  fi
                fi
              done
            else
              echo "⚠️ 静态项目目录不存在: $STATIC_ROOT"
            fi
            
            # 检查后端项目
            APPS_ROOT="/srv/apps"
            if [ -d "$APPS_ROOT" ]; then
              echo "📂 后端项目目录: $APPS_ROOT"
              for project in "$APPS_ROOT"/*; do
                if [ -d "$project" ]; then
                  PROJECT_NAME=$(basename "$project")
                  FILE_COUNT=$(find "$project" -type f | wc -l)
                  if [ "$FILE_COUNT" -gt 0 ]; then
                    echo "  ✅ $PROJECT_NAME: $FILE_COUNT 个文件"
                    if [ -f "$project/star-cloud-linux" ]; then
                      echo "    ✅ 二进制文件存在"
                    else
                      echo "    ⚠️ 二进制文件不存在"
                    fi
                  else
                    echo "  ⚠️ $PROJECT_NAME: 目录为空"
                  fi
                fi
              done
            else
              echo "⚠️ 后端项目目录不存在: $APPS_ROOT"
            fi
            
            # 2. 备份检查
            echo "📦 备份检查:"
            BACKUP_ROOTS=("/srv/backups/apps" "/srv/backups/static")
            for backup_root in "${BACKUP_ROOTS[@]}"; do
              if [ -d "$backup_root" ]; then
                echo "📂 备份目录: $backup_root"
                BACKUP_COUNT=$(find "$backup_root" -type d -name "*.backup.*" | wc -l)
                echo "  📊 备份数量: $BACKUP_COUNT"
                if [ "$BACKUP_COUNT" -gt 0 ]; then
                  echo "  📋 最新备份:"
                  find "$backup_root" -type d -name "*.backup.*" -printf "%T@ %p\n" | sort -n | tail -3 | while read timestamp path; do
                    BACKUP_NAME=$(basename "$path")
                    BACKUP_TIME=$(stat -c %y "$path" | cut -d' ' -f1,2)
                    BACKUP_SIZE=$(du -sh "$path" | cut -f1)
                    echo "    📦 $BACKUP_NAME ($BACKUP_TIME, $BACKUP_SIZE)"
                  done
                fi
              else
                echo "⚠️ 备份目录不存在: $backup_root"
              fi
            done

      - name: 生成诊断报告
        run: |
          echo "📊 诊断报告"
          echo "============"
          echo "诊断时间: $(date)"
          echo "诊断类型: ${{ inputs.diagnose_type || 'all' }}"
          echo "项目名称: ${{ inputs.project || '所有项目' }}"
          echo "诊断结果: 完成"
          echo ""
          echo "✅ 诊断已完成，请查看上述日志了解详细信息"

  notify-diagnose:
    needs: diagnose
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: 诊断通知
        run: |
          echo "📢 诊断通知"
          echo "============"
          echo "诊断时间: $(date)"
          echo "诊断类型: ${{ inputs.diagnose_type || 'all' }}"
          echo "项目名称: ${{ inputs.project || '所有项目' }}"
          
          if [ "${{ needs.diagnose.result }}" = "success" ]; then
            echo "✅ 诊断完成"
          else
            echo "❌ 诊断失败"
          fi
