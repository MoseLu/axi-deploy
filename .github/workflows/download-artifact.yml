name: Download Artifact

on:
  workflow_call:
    inputs:
      project:
        required: true
        type: string
        description: "项目名称"
      source_repo:
        required: true
        type: string
        description: "源仓库 (owner/repo)"
      run_id:
        required: true
        type: string
        description: "构建运行ID"
      github_token:
        required: true
        type: string
        description: "GitHub Token"
    outputs:
      artifact_path:
        description: "构建产物路径"
        value: ${{ jobs.download.outputs.artifact_path }}
      artifact_size:
        description: "构建产物大小"
        value: ${{ jobs.download.outputs.artifact_size }}

jobs:
  download:
    runs-on: ubuntu-latest
    outputs:
      artifact_path: ${{ steps.set-outputs.outputs.artifact_path }}
      artifact_size: ${{ steps.set-outputs.outputs.artifact_size }}
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 调试构建产物可用性
        run: |
          echo "🔍 调试构建产物可用性..."
          echo "项目名称: ${{ inputs.project }}"
          echo "源仓库: ${{ inputs.source_repo }}"
          echo "运行ID: ${{ inputs.run_id }}"
          echo "期望的构建产物名称: dist-${{ inputs.project }}"
          echo "GitHub Token: ${{ inputs.github_token != '' && '已提供' || '未提供' }}"
          echo ""
          echo "📋 检查构建产物是否存在..."
          
          # 使用 curl 检查构建产物
          RESPONSE=$(curl -s -H "Authorization: token ${{ inputs.github_token }}" \
            "https://api.github.com/repos/${{ inputs.source_repo }}/actions/runs/${{ inputs.run_id }}/artifacts" 2>/dev/null || echo "API调用失败")
          
          echo "API响应:"
          echo "$RESPONSE" | head -20
          
          # 检查是否包含目标构建产物
          if echo "$RESPONSE" | grep -q "dist-${{ inputs.project }}"; then
            echo "✅ 找到构建产物: dist-${{ inputs.project }}"
          else
            echo "❌ 未找到构建产物: dist-${{ inputs.project }}"
            echo "🔍 可用的构建产物:"
            echo "$RESPONSE" | grep -o '"name":"[^"]*"' | head -10
          fi
          
          echo ""
          echo "⏳ 继续尝试下载构建产物..."

      - name: 下载构建产物
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ inputs.project }}
          path: ./
          github-token: ${{ inputs.github_token }}
          repository: ${{ inputs.source_repo }}
          run-id: ${{ inputs.run_id }}
        continue-on-error: true

      - name: 检查下载状态
        run: |
          echo "🔍 检查下载状态..."
          if [ ${{ steps.download-artifact.outcome }} == 'failure' ]; then
            echo "❌ 构建产物下载失败"
            echo "🔍 错误详情:"
            echo "- 项目名称: ${{ inputs.project }}"
            echo "- 源仓库: ${{ inputs.source_repo }}"
            echo "- 运行ID: ${{ inputs.run_id }}"
            echo "- 期望的构建产物名称: dist-${{ inputs.project }}"
            echo "- GitHub Token: ${{ inputs.github_token != '' && '已提供' || '未提供' }}"
            echo ""
            echo "🚨 可能的原因:"
            echo "1. 构建产物已过期 (retention-days)"
            echo "2. 构建产物名称不匹配"
            echo "3. 源仓库或运行ID错误"
            echo "4. GitHub Token权限不足"
            echo "5. 构建产物上传失败"
            echo ""
            echo "🔧 解决方案:"
            echo "1. 重新触发源仓库的构建工作流"
            echo "2. 检查源仓库的构建产物名称是否为 'dist-${{ inputs.project }}'"
            echo "3. 验证GitHub Token权限"
            echo "4. 检查源仓库的构建日志"
            echo "5. 确认源仓库的构建是否成功完成"
            echo ""
            echo "📋 立即解决方案:"
            echo "1. 访问源仓库: https://github.com/${{ inputs.source_repo }}"
            echo "2. 手动触发构建工作流"
            echo "3. 等待构建完成后重新触发部署"
            echo ""
            echo "🔍 调试信息:"
            echo "- 当前时间: $(date)"
            echo "- 构建产物保留期限: 30天 (已更新)"
            echo "- 建议检查源仓库最近的构建记录"
            exit 1
          else
            echo "✅ 构建产物下载成功"
          fi

      - name: 检查下载结果
        run: |
          echo "🔍 检查下载结果..."
          echo "当前目录: $(pwd)"
          echo "当前目录内容:"
          ls -la ./
          
          # 检查是否有构建产物文件
          if [ -d "./dist-${{ inputs.project }}" ]; then
            echo "✅ dist-${{ inputs.project }} 目录存在"
            echo "dist-${{ inputs.project }} 目录内容:"
            ls -la "./dist-${{ inputs.project }}/"
            echo "📊 文件数量:"
            find "./dist-${{ inputs.project }}" -type f | wc -l
            echo "📁 前10个文件:"
            find "./dist-${{ inputs.project }}" -type f | head -10
          elif [ -f "./dist-${{ inputs.project }}.zip" ]; then
            echo "✅ 找到构建产物压缩包"
            echo "📦 压缩包大小:"
            ls -lh "./dist-${{ inputs.project }}.zip"
            echo "🔧 解压构建产物..."
            unzip -q "./dist-${{ inputs.project }}.zip"
            echo "📁 解压后内容:"
            ls -la ./
          elif [ -f "./index.html" ]; then
            echo "✅ 找到构建产物（直接在当前目录）"
            echo "📁 构建产物内容:"
            ls -la ./
            echo "📊 文件数量:"
            find . -type f -maxdepth 1 | wc -l
            echo "📁 前10个文件:"
            find . -type f -maxdepth 1 | head -10
          else
            echo "❌ 未找到构建产物"
            echo "🔍 调试信息:"
            echo "- 项目名称: ${{ inputs.project }}"
            echo "- 源仓库: ${{ inputs.source_repo }}"
            echo "- 运行ID: ${{ inputs.run_id }}"
            echo "- 期望的构建产物名称: dist-${{ inputs.project }}"
            echo "🔍 所有文件:"
            find . -type f -maxdepth 1
            echo "🔍 所有目录:"
            find . -type d -maxdepth 2
            echo "🚨 工作流错误：未找到构建产物，终止部署"
            echo ""
            echo "可能的原因:"
            echo "1. 构建产物名称不匹配"
            echo "2. 构建产物已过期 (retention-days)"
            echo "3. 源仓库或运行ID错误"
            echo "4. GitHub Token权限不足"
            echo "5. 构建产物上传失败"
            echo ""
            echo "建议检查:"
            echo "1. 确认源仓库的构建产物名称是否为 'dist-${{ inputs.project }}'"
            echo "2. 检查构建产物的保留期限"
            echo "3. 验证GitHub Token权限"
            echo "4. 检查源仓库的构建日志"
            exit 1
          fi

      - name: 验证构建产物完整性
        run: |
          echo "🔍 验证构建产物完整性..."
          
          # 等待一下确保文件完全下载
          sleep 2
          
          # 检查可能的构建产物目录
          if [ -d "./dist-${{ inputs.project }}" ]; then
            ARTIFACT_DIR="./dist-${{ inputs.project }}"
            echo "📁 找到 dist-${{ inputs.project }} 目录"
          elif [ -d "./dist" ]; then
            ARTIFACT_DIR="./dist"
            echo "📁 找到 dist 目录"
          elif [ -d "./docs/.vitepress/dist" ]; then
            ARTIFACT_DIR="./docs/.vitepress/dist"
            echo "📁 找到 docs/.vitepress/dist 目录"
          elif [ -d "./.vitepress/dist" ]; then
            ARTIFACT_DIR="./.vitepress/dist"
            echo "📁 找到 .vitepress/dist 目录"
          elif [ -f "./index.html" ]; then
            # 构建产物直接在当前目录
            ARTIFACT_DIR="."
            echo "📁 构建产物直接在当前目录"
          else
            echo "❌ 未找到构建产物目录"
            echo "🔍 当前目录内容:"
            ls -la ./
            echo "🔍 所有子目录:"
            find . -type d -maxdepth 2
            echo "🔍 所有文件:"
            find . -type f -maxdepth 2
            exit 1
          fi
          
          echo "📁 构建产物目录: $ARTIFACT_DIR"
          echo "📁 构建产物目录内容:"
          ls -la "$ARTIFACT_DIR/"
          
          # 检查是否有文件
          FILE_COUNT=$(find "$ARTIFACT_DIR" -type f | wc -l)
          echo "📊 文件数量: $FILE_COUNT"
          
          if [ "$FILE_COUNT" -eq 0 ]; then
            echo "❌ 构建产物目录为空"
            echo "🔍 调试信息:"
            echo "当前目录内容:"
            ls -la ./
            echo "所有子目录:"
            find . -type d -maxdepth 2
            echo "所有文件:"
            find . -type f -maxdepth 2
            echo "🚨 工作流错误：构建产物解压后为空，立即终止部署"
            echo "可能的原因:"
            echo "1. 构建产物下载失败"
            echo "2. 构建产物解压失败"
            echo "3. 构建产物本身为空"
            echo "4. 文件权限问题"
            exit 1
          fi
          
          # 检查关键文件是否存在
          if [ -f "$ARTIFACT_DIR/index.html" ]; then
            echo "✅ 找到 index.html 文件"
          else
            echo "⚠️ 未找到 index.html 文件"
            echo "📁 构建产物中的文件:"
            find "$ARTIFACT_DIR" -type f | head -20
          fi
          
          echo "✅ 构建产物验证通过"
          echo "📊 文件数量: $FILE_COUNT"

      - name: 设置输出
        id: set-outputs
        run: |
          echo "🔍 确定构建产物路径..."
          echo "当前目录内容:"
          ls -la ./
          
          # 确定构建产物路径
          if [ -d "./dist-${{ inputs.project }}" ]; then
            ARTIFACT_PATH="./dist-${{ inputs.project }}"
            echo "📁 找到 dist-${{ inputs.project }} 目录"
          elif [ -d "./dist" ]; then
            ARTIFACT_PATH="./dist"
            echo "📁 找到 dist 目录"
          elif [ -d "./docs/.vitepress/dist" ]; then
            ARTIFACT_PATH="./docs/.vitepress/dist"
            echo "📁 找到 docs/.vitepress/dist 目录"
          elif [ -f "./index.html" ]; then
            # 构建产物直接在当前目录
            ARTIFACT_PATH="."
            echo "📁 构建产物直接在当前目录"
          else
            echo "❌ 未找到构建产物路径"
            echo "🔍 当前目录内容:"
            ls -la ./
            echo "🔍 所有子目录:"
            find . -type d -maxdepth 2
            echo "🔍 所有文件:"
            find . -type f -maxdepth 2
            exit 1
          fi
          
          echo "📁 最终构建产物路径: $ARTIFACT_PATH"
          echo "📁 构建产物内容:"
          ls -la "$ARTIFACT_PATH/"
          
          # 最终验证：确保构建产物不为空
          FINAL_FILE_COUNT=$(find "$ARTIFACT_PATH" -type f | wc -l)
          if [ "$FINAL_FILE_COUNT" -eq 0 ]; then
            echo "🚨 最终验证失败：构建产物为空"
            exit 1
          fi
          
          echo "artifact_path=$ARTIFACT_PATH" >> $GITHUB_OUTPUT
          echo "artifact_size=$(du -sb $ARTIFACT_PATH | cut -f1)" >> $GITHUB_OUTPUT
          echo "✅ 输出已设置"
          echo "构建产物路径: $ARTIFACT_PATH"
          echo "构建产物大小: $(du -sh $ARTIFACT_PATH | cut -f1)"
