name: Universal Deploy

on:
  workflow_dispatch:
    inputs:
      project:
        description: '项目名称'
        required: true
        type: string
      source_repo:
        description: '源仓库 (格式: owner/repo)'
        required: true
        type: string
      run_id:
        description: '构建运行ID'
        required: true
        type: string
      deploy_type:
        description: '部署类型'
        required: true
        default: 'static'
        type: choice
        options:
          - static
          - backend
      nginx_config:
        description: 'Nginx配置（可选）'
        required: false
        type: string
      test_url:
        description: '测试URL（可选）'
        required: false
        type: string
      start_cmd:
        description: '启动命令（后端项目）'
        required: false
        type: string
      skip_init:
        description: '跳过服务器初始化'
        required: false
        default: false
        type: boolean

jobs:
  # 步骤1: 服务器初始化
  server-init:
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_init }}
    steps:
      - name: 服务器初始化
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            echo "🚀 开始服务器初始化..."
            
            # 获取输入参数
            DOMAIN="redamancy.com.cn"
            RUN_USER="deploy"
            APPS_ROOT="/srv/apps"
            STATIC_ROOT="/srv/static"
            NGINX_CONF_DIR="/www/server/nginx/conf/conf.d/redamancy"
            CERT_SRC="/www/server/panel/vhost/cert/redamancy.com.cn"
            CERT_DST="/www/server/nginx/ssl/redamancy"
            FORCE_REBUILD="false"
            
            echo "📋 初始化配置:"
            echo "- 域名: $DOMAIN"
            echo "- 运行用户: $RUN_USER"
            echo "- 应用目录: $APPS_ROOT"
            echo "- 静态目录: $STATIC_ROOT"
            echo "- Nginx配置: $NGINX_CONF_DIR"
            echo "- 证书源: $CERT_SRC"
            echo "- 证书目标: $CERT_DST"
            echo "- 强制重建: $FORCE_REBUILD"
            
            # 0. 前置检查
            echo "🔍 前置检查..."
            if ! command -v nginx &> /dev/null; then
              echo "❌ Nginx未安装，无法继续初始化"
              exit 1
            fi
            echo "✅ Nginx已安装: $(nginx -v)"
            
            # 检查并启动Nginx服务
            echo "🔍 检查Nginx进程状态..."
            if pgrep nginx > /dev/null; then
              echo "✅ 发现Nginx进程正在运行"
              NGINX_PIDS=$(pgrep nginx)
              echo "Nginx进程ID: $NGINX_PIDS"
              
              # 检查systemd服务状态
              if systemctl is-active --quiet nginx; then
                echo "✅ Nginx服务状态正常"
              else
                echo "⚠️  Nginx进程运行但systemd状态异常，尝试修复..."
                                 # 停止所有Nginx进程
                 echo "🛑 停止所有Nginx进程..."
                 sudo pkill -f nginx || true
                 sleep 3
                 
                 # 确保进程完全停止
                 if pgrep nginx > /dev/null; then
                   echo "⚠️  强制停止残留的Nginx进程..."
                   sudo pkill -9 -f nginx || true
                   sleep 2
                 fi
                
                # 清理systemd状态
                echo "🧹 清理systemd状态..."
                sudo systemctl reset-failed nginx
                
                # 重新启动服务
                echo "🚀 重新启动Nginx服务..."
                if systemctl start nginx; then
                  echo "✅ Nginx服务启动成功"
                else
                  echo "❌ Nginx服务启动失败"
                  systemctl status nginx --no-pager -l
                  exit 1
                fi
              fi
            else
              echo "⚠️  Nginx进程未运行，尝试启动服务..."
              if systemctl start nginx; then
                echo "✅ Nginx服务启动成功"
              else
                echo "❌ Nginx服务启动失败，尝试诊断..."
                systemctl status nginx --no-pager -l
                echo "尝试重新加载配置..."
                if systemctl reload nginx; then
                  echo "✅ Nginx服务重载成功"
                else
                  echo "❌ Nginx服务重载失败，尝试重启..."
                  if systemctl restart nginx; then
                    echo "✅ Nginx服务重启成功"
                  else
                    echo "❌ Nginx服务重启失败，请手动检查"
                    systemctl status nginx --no-pager -l
                    exit 1
                  fi
                fi
              fi
            fi
            
            # 1. 创建业务运行用户（灾后自愈）
            echo "👤 检查业务运行用户..."
            if ! id "$RUN_USER" &>/dev/null; then
              echo "🆕 创建用户 $RUN_USER..."
              sudo useradd -m -s /bin/bash $RUN_USER
              echo "✅ 用户 $RUN_USER 创建完成"
            else
              echo "✅ 用户 $RUN_USER 已存在"
            fi
            
            # 2. 创建所需目录（灾后自愈）
            echo "📁 检查并创建目录..."
            sudo mkdir -p $APPS_ROOT $STATIC_ROOT $NGINX_CONF_DIR $CERT_DST
            sudo chown $RUN_USER:$RUN_USER $APPS_ROOT $STATIC_ROOT
            sudo chmod 755 $NGINX_CONF_DIR $CERT_DST
            echo "✅ 目录结构检查完成"
            
            # 3. 软链宝塔证书（健康巡检）
            echo "🔗 检查证书软链..."
            if [ ! -d "$CERT_SRC" ]; then
              echo "❌ 证书源目录不存在: $CERT_SRC"
              echo "请确保宝塔面板已为域名 $DOMAIN 配置SSL证书"
              exit 1
            fi
            
            # 检查并重新创建软链
            if [ -f "$CERT_SRC/fullchain.pem" ]; then
              sudo ln -sf $CERT_SRC/fullchain.pem $CERT_DST/fullchain.pem
              echo "✅ 软链 fullchain.pem 完成"
            else
              echo "❌ 证书文件不存在: $CERT_SRC/fullchain.pem"
              exit 1
            fi
            
            if [ -f "$CERT_SRC/privkey.pem" ]; then
              sudo ln -sf $CERT_SRC/privkey.pem $CERT_DST/privkey.pem
              echo "✅ 软链 privkey.pem 完成"
            else
              echo "❌ 私钥文件不存在: $CERT_SRC/privkey.pem"
              exit 1
            fi
            
            # 4. 写入/更新主配置（配置变更）
            echo "📝 更新主配置文件..."
            MAIN_CONF="$NGINX_CONF_DIR/00-main.conf"
            
            # 检查是否需要重新生成配置
            if [ ! -f "$MAIN_CONF" ] || [ "$FORCE_REBUILD" = "true" ] || [ "$(stat -c %Y $MAIN_CONF)" -lt "$(date -d '1 hour ago' +%s)" ]; then
              echo "🔄 重新生成主配置文件..."
              sudo tee $MAIN_CONF <<'EOF'
            server {
                listen 443 ssl http2;
                server_name redamancy.com.cn;
            
                ssl_certificate     /www/server/nginx/ssl/redamancy/fullchain.pem;
                ssl_certificate_key /www/server/nginx/ssl/redamancy/privkey.pem;
            
                client_max_body_size 100m;
            
                # 这里自动加载 route-*.conf（项目路由）——主配置永远不用再改
                include /www/server/nginx/conf/conf.d/redamancy/route-*.conf;
            }
            
            server {
                listen 80;
                server_name redamancy.com.cn;
                return 301 https://$host$request_uri;
            }
            EOF
              echo "✅ 主配置文件已更新"
            else
              echo "✅ 主配置文件无需更新"
            fi
            
            # 5. 检查并重载Nginx（健康巡检）
            echo "🔄 检查Nginx配置..."
            if sudo nginx -t; then
              echo "✅ Nginx配置语法检查通过"
            else
              echo "❌ Nginx配置语法错误"
              echo "配置错误详情:"
              sudo nginx -t 2>&1
              exit 1
            fi
            
            echo "🔄 尝试重载Nginx..."
            # 先检查Nginx进程是否正在运行
            if pgrep nginx > /dev/null; then
              echo "✅ Nginx进程正在运行，尝试重载..."
              if sudo systemctl reload nginx; then
                echo "✅ Nginx热加载完成"
              else
                                 echo "❌ Nginx重载失败，尝试重启..."
                 # 停止所有Nginx进程
                 echo "🛑 停止所有Nginx进程..."
                 sudo pkill -f nginx || true
                 sleep 3
                 
                 # 确保进程完全停止
                 if pgrep nginx > /dev/null; then
                   echo "⚠️  强制停止残留的Nginx进程..."
                   sudo pkill -9 -f nginx || true
                   sleep 2
                 fi
                
                # 清理systemd状态
                sudo systemctl reset-failed nginx
                
                # 重新启动
                if sudo systemctl start nginx; then
                  echo "✅ Nginx重启成功"
                else
                  echo "❌ Nginx重启失败，显示详细错误:"
                  sudo systemctl status nginx --no-pager -l
                  echo "Nginx错误日志:"
                  sudo tail -n 20 /var/log/nginx/error.log 2>/dev/null || echo "无法读取错误日志"
                  exit 1
                fi
              fi
            else
              echo "⚠️  Nginx进程未运行，尝试启动..."
              if sudo systemctl start nginx; then
                echo "✅ Nginx启动成功"
              else
                echo "❌ Nginx启动失败，显示详细错误:"
                sudo systemctl status nginx --no-pager -l
                echo "Nginx错误日志:"
                sudo tail -n 20 /var/log/nginx/error.log 2>/dev/null || echo "无法读取错误日志"
                exit 1
              fi
            fi
            
            # 6. 防火墙检查（健康巡检）
            echo "🔥 检查防火墙规则..."
            if command -v firewall-cmd &> /dev/null; then
              if ! sudo firewall-cmd --list-services | grep -q http; then
                echo "⚠️  HTTP端口未开放，尝试开放..."
                sudo firewall-cmd --add-service=http --permanent
                sudo firewall-cmd --add-service=https --permanent
                sudo firewall-cmd --reload
                echo "✅ HTTP/HTTPS端口已开放"
              else
                echo "✅ HTTP/HTTPS端口已开放"
              fi
            else
              echo "未检测到 firewalld，跳过防火墙配置"
            fi
            
            # 7. 最终验证
            echo "🔍 最终验证..."
            echo "📁 配置文件:"
            ls -la $NGINX_CONF_DIR/
            echo "🔗 证书软链:"
            ls -la $CERT_DST/
            echo "📂 目录权限:"
            ls -la $APPS_ROOT/
            ls -la $STATIC_ROOT/
            
            # 测试HTTPS访问
            echo "🌐 测试HTTPS访问:"
            if curl -f -s https://$DOMAIN > /dev/null 2>&1; then
              echo "✅ HTTPS访问正常"
            else
              echo "⚠️  HTTPS访问测试失败（可能尚未部署项目）"
            fi
            
            echo "✅ 服务器初始化完成！"
            echo ""
            echo "📋 初始化摘要:"
            echo "- 域名: $DOMAIN"
            echo "- 运行用户: $RUN_USER"
            echo "- 应用目录: $APPS_ROOT"
            echo "- 静态目录: $STATIC_ROOT"
            echo "- Nginx配置: $NGINX_CONF_DIR"
            echo "- 证书源: $CERT_SRC"
            echo "- 证书目标: $CERT_DST"

  # 步骤2: 项目部署
  deploy:
    runs-on: ubuntu-latest
    needs: [server-init]
    if: ${{ !inputs.skip_init }} || always()
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 下载构建产物
        uses: dawidd6/action-download-artifact@v2
        with:
          name: dist-${{ inputs.project }}
          path: ./dist
          repo: ${{ inputs.source_repo }}
          workflow: ${{ inputs.project }}_deploy.yml
          run_id: ${{ inputs.run_id }}
          github_token: ${{ secrets.DEPLOY_CENTER_PAT }}

      - name: 显示构建产物信息
        run: |
          echo "📦 构建产物信息:"
          ls -la ./dist/
          echo "📋 部署参数:"
          echo "- 项目: ${{ inputs.project }}"
          echo "- 部署类型: ${{ inputs.deploy_type }}"
          echo "- 源仓库: ${{ inputs.source_repo }}"
          echo "- 构建ID: ${{ inputs.run_id }}"

      - name: 上传到服务器
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          source: "./dist/*"
          target: "/tmp/${{ inputs.project }}/"
          command_timeout: "10m"
          
      - name: 验证上传
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            echo "🔍 验证上传文件..."
            TEMP_DIR="/tmp/${{ inputs.project }}"
            
            if [ -d "$TEMP_DIR" ]; then
              echo "✅ 临时目录存在: $TEMP_DIR"
              echo "📁 临时目录内容:"
              ls -la $TEMP_DIR/
              
              if [ -f "$TEMP_DIR/deployment.tar.gz" ]; then
                echo "✅ deployment.tar.gz 存在"
                echo "📦 文件大小: $(ls -lh $TEMP_DIR/deployment.tar.gz | awk '{print $5}')"
                echo "📋 压缩包内容预览:"
                tar -tzf $TEMP_DIR/deployment.tar.gz | head -10
              else
                echo "❌ deployment.tar.gz 不存在"
                echo "📁 查找所有文件:"
                find $TEMP_DIR -type f
              fi
            else
              echo "❌ 临时目录不存在: $TEMP_DIR"
              echo "📁 /tmp 目录内容:"
              ls -la /tmp/
            fi

      - name: 部署到服务器
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            echo "🚀 开始部署项目: ${{ inputs.project }}"
            
            # 标准化目录结构
            APPS_ROOT="/srv/apps"
            STATIC_ROOT="/srv/static"
            NGINX_CONF_DIR="/www/server/nginx/conf/conf.d/redamancy"
            PROJECT="${{ inputs.project }}"
            TEMP_DIR="/tmp/$PROJECT"
            
            echo "📁 项目临时目录: $TEMP_DIR"
            
            # 根据部署类型确定部署路径
            if [[ "${{ inputs.deploy_type }}" == "backend" ]]; then
              # 后端项目部署到应用目录
              DEPLOY_PATH="$APPS_ROOT/$PROJECT"
              echo "📁 后端项目部署到: $DEPLOY_PATH"
            else
              # 静态项目部署到静态文件目录
              DEPLOY_PATH="$STATIC_ROOT/$PROJECT"
              echo "📁 静态项目部署到: $DEPLOY_PATH"
            fi
            
            # 创建部署目录
            sudo mkdir -p $DEPLOY_PATH
            sudo chown deploy:deploy $DEPLOY_PATH
            
            # 清理目标部署目录（避免残留文件）
            echo "🧹 清理目标部署目录..."
            sudo rm -rf $DEPLOY_PATH/*
            
            # 检查临时目录是否存在
            if [ ! -d "$TEMP_DIR" ]; then
              echo "❌ 临时目录不存在: $TEMP_DIR"
              echo "📁 /tmp 目录内容:"
              ls -la /tmp/
              exit 1
            fi
            
            # 进入项目临时目录
            cd $TEMP_DIR
            echo "📁 当前临时目录内容:"
            ls -la
            
            # 查找 deployment.tar.gz 文件
            DEPLOYMENT_FILE=""
            if [ -f "deployment.tar.gz" ]; then
              DEPLOYMENT_FILE="deployment.tar.gz"
              echo "✅ 在根目录找到 deployment.tar.gz"
            elif [ -f "dist/deployment.tar.gz" ]; then
              DEPLOYMENT_FILE="dist/deployment.tar.gz"
              echo "✅ 在 dist 目录找到 deployment.tar.gz"
            else
              echo "❌ 未找到 deployment.tar.gz"
              echo "📁 当前目录所有文件:"
              find . -type f
              exit 1
            fi
            
            echo "📦 文件大小: $(ls -lh $DEPLOYMENT_FILE | awk '{print $5}')"
            echo "📋 压缩包内容预览:"
            tar -tzf $DEPLOYMENT_FILE | head -10
            
            # 解压并部署文件
            echo "📦 解压部署文件..."
            if [ -f "$DEPLOYMENT_FILE" ]; then
              # 后端项目部署
              if [[ "${{ inputs.deploy_type }}" == "backend" ]]; then
                echo "🔧 部署后端项目..."
                sudo tar xzf $DEPLOYMENT_FILE -C $DEPLOY_PATH
                sudo chown -R deploy:deploy $DEPLOY_PATH
                
                # 设置可执行权限
                if [ -f "$DEPLOY_PATH/star-cloud-linux" ]; then
                  sudo chmod +x $DEPLOY_PATH/star-cloud-linux
                  echo "✅ 二进制文件权限设置完成"
                else
                  echo "❌ 二进制文件不存在: $DEPLOY_PATH/star-cloud-linux"
                  echo "📁 部署目录内容:"
                  ls -la $DEPLOY_PATH/
                  exit 1
                fi
                
                # 创建必要目录
                sudo mkdir -p $DEPLOY_PATH/uploads/{image,document,audio,video,other,avatars}
                sudo mkdir -p $DEPLOY_PATH/logs
                sudo chown -R deploy:deploy $DEPLOY_PATH/uploads $DEPLOY_PATH/logs
                
                # 检查文件权限和目录结构
                echo "🔍 检查文件权限和目录结构..."
                echo "📁 部署目录内容:"
                ls -la $DEPLOY_PATH/
                
                if [ -f "$DEPLOY_PATH/star-cloud-linux" ]; then
                  echo "✅ 二进制文件:"
                  ls -la $DEPLOY_PATH/star-cloud-linux
                else
                  echo "❌ 二进制文件不存在"
                  echo "📁 查找二进制文件:"
                  find $DEPLOY_PATH -name "star-cloud-linux" -type f
                fi
                
                if [ -f "$DEPLOY_PATH/star-cloud.service" ]; then
                  echo "✅ 服务文件:"
                  ls -la $DEPLOY_PATH/star-cloud.service
                else
                  echo "❌ 服务文件不存在"
                  echo "📁 查找服务文件:"
                  find $DEPLOY_PATH -name "star-cloud.service" -type f
                fi
                
                if [ -d "$DEPLOY_PATH/backend/config" ]; then
                  echo "✅ 配置文件:"
                  ls -la $DEPLOY_PATH/backend/config/
                else
                  echo "❌ 配置文件目录不存在"
                  echo "📁 查找配置文件:"
                  find $DEPLOY_PATH -name "config" -type d
                fi
                 
                 # 检查服务文件内容
                 if [ -f "$DEPLOY_PATH/star-cloud.service" ]; then
                   echo "📋 服务文件内容:"
                   cat $DEPLOY_PATH/star-cloud.service
                 else
                   echo "❌ 服务文件不存在，无法显示内容"
                 fi
                 
                 # 启动服务
                 echo "🚀 启动后端服务..."
                 sudo systemctl daemon-reload
                 sudo systemctl enable star-cloud.service
                 sudo systemctl restart star-cloud.service
                 
                 # 等待服务启动
                 echo "⏳ 等待服务启动..."
                 sleep 10
                 
                 # 健康检查
                 echo "🔍 检查服务健康状态..."
                 if curl -f -s http://127.0.0.1:8080/health > /dev/null 2>&1; then
                   echo "✅ 服务启动成功 - 健康检查通过"
                 else
                   echo "❌ 服务启动失败 - 健康检查失败"
                   echo "📊 服务状态:"
                   sudo systemctl status star-cloud.service --no-pager -l
                   echo "📋 服务日志:"
                   sudo journalctl -u star-cloud.service --no-pager -n 20
                   echo "🔍 检查端口占用:"
                   sudo netstat -tlnp | grep :8080
                   echo "🔍 检查进程:"
                   ps aux | grep star-cloud
                   exit 1
                 fi
              else
                # 静态项目部署
                echo "📁 部署静态项目..."
                sudo tar xzf $DEPLOYMENT_FILE -C $DEPLOY_PATH
                sudo chown -R deploy:deploy $DEPLOY_PATH
                echo "✅ 静态项目部署完成"
              fi
            else
              # 静态项目部署（非压缩包）
              echo "📁 部署静态项目..."
              sudo cp -r * $DEPLOY_PATH/
              sudo chown -R deploy:deploy $DEPLOY_PATH
              echo "✅ 静态项目部署完成"
            fi
            
            # 清理临时目录
            echo "🧹 清理临时目录..."
            sudo rm -rf $TEMP_DIR
            echo "✅ 临时目录已清理: $TEMP_DIR"
            
            echo "✅ 项目部署完成: ${{ inputs.project }}"

      - name: 配置Nginx（如果提供配置）
        if: inputs.nginx_config != ''
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            echo "🔧 配置Nginx..."
            
            NGINX_CONF_DIR="/www/server/nginx/conf/conf.d/redamancy"
            PROJECT="${{ inputs.project }}"
            
            # 生成项目路由配置
            ROUTE_CONF="$NGINX_CONF_DIR/route-$PROJECT.conf"
            
            # 写入项目配置
            sudo tee $ROUTE_CONF <<'EOF'
            ${{ inputs.nginx_config }}
            EOF
            
            echo "✅ Nginx配置已写入: $ROUTE_CONF"
            
            # 检查Nginx配置语法
            if sudo nginx -t; then
              echo "✅ Nginx配置语法检查通过"
            else
              echo "❌ Nginx配置语法错误"
              exit 1
            fi
            
                         # 检查生成的配置文件
             echo "📋 生成的 Nginx 配置文件内容:"
             cat $ROUTE_CONF
             
             # 重载Nginx配置
             if sudo systemctl reload nginx; then
               echo "✅ Nginx配置重载完成"
             else
               echo "❌ Nginx重载失败"
               echo "📋 Nginx 错误日志:"
               sudo tail -n 20 /var/log/nginx/error.log
               exit 1
             fi

      - name: 执行启动命令（后端项目）
        if: inputs.start_cmd != '' && inputs.deploy_type == 'backend'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            echo "🚀 执行启动命令..."
            cd /srv/apps/${{ inputs.project }}
            ${{ inputs.start_cmd }}

      - name: 测试网站可访问性
        if: inputs.test_url != ''
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            echo "🌐 测试网站可访问性..."
            echo "测试URL: ${{ inputs.test_url }}"
            
            # 等待一段时间让服务完全启动
            sleep 10
            
            # 测试网站访问
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" ${{ inputs.test_url }})
            
            if [ "$HTTP_STATUS" = "200" ]; then
              echo "✅ 网站可访问 (HTTP $HTTP_STATUS)"
            elif [ "$HTTP_STATUS" = "404" ]; then
              echo "❌ 网站返回404 - 部署失败"
              echo "可能的原因:"
              echo "1. 项目未正确部署"
              echo "2. Nginx配置问题"
              echo "3. 文件路径错误"
              false
            else
              echo "❌ 网站无法访问 (HTTP $HTTP_STATUS) - 部署失败"
              echo "可能的原因:"
              echo "1. 域名解析问题"
              echo "2. 服务器防火墙设置"
              echo "3. Nginx配置问题"
              echo "4. SSL证书问题"
              echo "5. 后端服务未启动"
              
              # 显示网站标题
              TITLE=$(curl -s ${{ inputs.test_url }} | grep -o '<title>[^<]*</title>' | sed 's/<title>\(.*\)<\/title>/\1/')
              echo "网站标题: $TITLE"
              
              # 检查后端服务状态
              echo "🔍 检查后端服务状态..."
              if curl -f -s http://127.0.0.1:8080/health > /dev/null 2>&1; then
                echo "✅ 后端服务正常运行"
              else
                echo "❌ 后端服务未启动或无法访问"
              fi
              
              # 检查 Nginx 状态
              echo "🔍 检查 Nginx 状态..."
              if systemctl is-active --quiet nginx; then
                echo "✅ Nginx 服务正常运行"
              else
                echo "❌ Nginx 服务未运行"
              fi
              
              false
            fi

      - name: 部署完成通知
        run: |
          echo "🎉 部署完成！"
          echo ""
          echo "📋 部署摘要:"
          echo "- 项目: ${{ inputs.project }}"
          echo "- 部署类型: ${{ inputs.deploy_type }}"
          echo "- 源仓库: ${{ inputs.source_repo }}"
          echo "- 构建ID: ${{ inputs.run_id }}"
          if [ "${{ inputs.test_url }}" != "" ]; then
            echo "- 测试URL: ${{ inputs.test_url }}"
          fi
          echo ""
          echo "✅ 项目已成功部署到服务器" 