name: Dynamic Port Allocation

description: "动态端口分配 - 在服务器上检查端口占用并自动分配可用端口"

on:
  workflow_call:
    inputs:
      project:
        required: true
        type: string
        description: "项目名称"
      server_host:
        required: true
        type: string
        description: "服务器地址"
      server_user:
        required: true
        type: string
        description: "服务器用户"
      server_key:
        required: true
        type: string
        description: "服务器密钥"
      server_port:
        required: true
        type: string
        description: "服务器端口"
      port_range_start:
        required: false
        type: string
        description: "端口范围起始"
        default: "8080"
      port_range_end:
        required: false
        type: string
        description: "端口范围结束"
        default: "10000"
      preferred_port:
        required: false
        type: string
        description: "首选端口（如果可用）"
        default: ""
      force_reallocate:
        required: false
        type: boolean
        description: "强制重新分配端口"
        default: false
    outputs:
      allocated_port:
        description: "分配的端口"
        value: ${{ jobs.allocate.outputs.allocated_port }}
      allocation_success:
        description: "分配是否成功"
        value: ${{ jobs.allocate.outputs.allocation_success }}
      port_config_updated:
        description: "端口配置是否已更新"
        value: ${{ jobs.allocate.outputs.port_config_updated }}

jobs:
  allocate:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      allocated_port: ${{ steps.set-outputs.outputs.allocated_port }}
      allocation_success: ${{ steps.set-outputs.outputs.allocation_success }}
      port_config_updated: ${{ steps.set-outputs.outputs.port_config_updated }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: 验证输入参数
        run: |
          echo "🔍 验证输入参数..."
          echo "- 项目: ${{ inputs.project }}"
          echo "- 服务器: ${{ inputs.server_host }}:${{ inputs.server_port }}"
          echo "- 端口范围: ${{ inputs.port_range_start }}-${{ inputs.port_range_end }}"
          echo "- 首选端口: ${{ inputs.preferred_port || '无' }}"
          echo "- 强制重新分配: ${{ inputs.force_reallocate }}"
          
          # 验证端口范围
          if [ "${{ inputs.port_range_start }}" -gt "${{ inputs.port_range_end }}" ]; then
            echo "🚨 端口范围错误：起始端口大于结束端口"
            exit 1
          fi
          
          echo "✅ 输入参数验证通过"

      - name: 创建SSH密钥
        run: |
          echo "${{ inputs.server_key }}" > /tmp/ssh_key
          chmod 600 /tmp/ssh_key

      - name: 动态端口分配
        id: port-allocation
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ inputs.server_host }}
          username: ${{ inputs.server_user }}
          key: ${{ inputs.server_key }}
          port: ${{ inputs.server_port }}
          script: |
            echo "🔍 开始动态端口分配..."
            
            PROJECT_NAME="${{ inputs.project }}"
            PORT_START="${{ inputs.port_range_start }}"
            PORT_END="${{ inputs.port_range_end }}"
            PREFERRED_PORT="${{ inputs.preferred_port }}"
            FORCE_REALLOCATE="${{ inputs.force_reallocate }}"
            
                         # 检查端口占用函数
             check_port_available() {
               local port=$1
               # 检查端口是否被监听
               if netstat -tlnp 2>/dev/null | grep -q ":$port "; then
                 return 1  # 端口被占用
               fi
               # 检查端口是否在防火墙中开放（静默检查，不输出信息）
               if command -v firewall-cmd >/dev/null 2>&1; then
                 if ! firewall-cmd --list-ports 2>/dev/null | grep -q "$port"; then
                   return 1
                 fi
               fi
               return 0  # 端口可用
             }
            
                         # 查找可用端口函数
             find_available_port() {
               local start_port=$1
               local end_port=$2
               local preferred_port=$3
               
               echo "🔍 在端口范围 $start_port-$end_port 中查找可用端口..." >&2
               
               # 如果指定了首选端口，先检查
               if [ -n "$preferred_port" ] && [ "$preferred_port" -ge "$start_port" ] && [ "$preferred_port" -le "$end_port" ]; then
                 echo "🎯 检查首选端口: $preferred_port" >&2
                 if check_port_available "$preferred_port"; then
                   echo "✅ 首选端口 $preferred_port 可用" >&2
                   echo "$preferred_port"
                   return 0
                 else
                   echo "❌ 首选端口 $preferred_port 不可用" >&2
                 fi
               fi
               
               # 从起始端口开始查找
               for port in $(seq "$start_port" "$end_port"); do
                 if check_port_available "$port"; then
                   echo "✅ 找到可用端口: $port" >&2
                   echo "$port"
                   return 0
                 fi
               done
               
               echo "❌ 在端口范围 $start_port-$end_port 中未找到可用端口" >&2
               return 1
             }
            
                         # 更新端口配置文件函数
             update_port_config() {
               local project=$1
               local port=$2
               local config_file="/srv/port-config.yml"
               
               echo "📝 更新端口配置文件: $config_file"
               
               # 创建配置目录
               sudo mkdir -p "$(dirname "$config_file")"
               
               # 如果配置文件不存在，创建基础结构
               if [ ! -f "$config_file" ]; then
                 echo "# 动态端口配置" | sudo tee "$config_file" > /dev/null
                 echo "# 自动生成和维护" | sudo tee -a "$config_file" > /dev/null
                 echo "# 最后更新: $(date)" | sudo tee -a "$config_file" > /dev/null
                 echo "" | sudo tee -a "$config_file" > /dev/null
                 echo "projects:" | sudo tee -a "$config_file" > /dev/null
               fi
               
               # 检查项目是否已存在
               if grep -q "^  $project:" "$config_file"; then
                 echo "🔄 更新现有项目端口配置"
                 # 更新现有项目的端口
                 sudo sed -i "/^  $project:/,/^  [^ ]/ { /^    port:/ s/:.*/: $port/ }" "$config_file"
               else
                 echo "➕ 添加新项目端口配置"
                 # 在文件末尾添加新项目
                 echo "" | sudo tee -a "$config_file" > /dev/null
                 echo "  $project:" | sudo tee -a "$config_file" > /dev/null
                 echo "    port: $port" | sudo tee -a "$config_file" > /dev/null
                 echo "    description: \"自动分配 - $(date)\"" | sudo tee -a "$config_file" > /dev/null
                 echo "    allocated_at: \"$(date -Iseconds)\"" | sudo tee -a "$config_file" > /dev/null
               fi
               
               echo "✅ 端口配置文件已更新"
             }
             
             # 更新应用程序配置文件函数
             update_app_config() {
               local project=$1
               local port=$2
               
               echo "🔧 更新应用程序配置文件..."
               
               # 查找项目目录
               local project_dir="/srv/apps/$project"
               if [ ! -d "$project_dir" ]; then
                 echo "⚠️ 项目目录不存在: $project_dir"
                 return 0
               fi
               
               echo "📁 项目目录: $project_dir"
               
               # 针对不同项目类型的配置文件更新
               case "$project" in
                 "axi-star-cloud")
                   # 更新 Go 项目的配置文件
                   local config_file="$project_dir/backend/config/config-prod.yaml"
                   if [ -f "$config_file" ]; then
                     echo "📝 更新 Go 配置文件: $config_file"
                     # 备份原配置文件
                     sudo cp "$config_file" "$config_file.backup.$(date +%Y%m%d_%H%M%S)"
                     # 更新端口
                     sudo sed -i "s/port: '8080'/port: '$port'/" "$config_file"
                     echo "✅ Go 配置文件已更新: 8080 -> $port"
                   else
                     echo "⚠️ Go 配置文件不存在: $config_file"
                   fi
                   
                   # 更新开发环境配置文件
                   local dev_config_file="$project_dir/backend/config/config.yaml"
                   if [ -f "$dev_config_file" ]; then
                     echo "📝 更新开发环境配置文件: $dev_config_file"
                     sudo sed -i "s/port: '8080'/port: '$port'/" "$dev_config_file"
                     echo "✅ 开发环境配置文件已更新: 8080 -> $port"
                   fi
                   ;;
                 "axi-project-dashboard")
                   # 更新 Node.js 项目的配置文件
                   local ecosystem_file="$project_dir/ecosystem.config.js"
                   if [ -f "$ecosystem_file" ]; then
                     echo "📝 更新 PM2 配置文件: $ecosystem_file"
                     # 备份原配置文件
                     sudo cp "$ecosystem_file" "$ecosystem_file.backup.$(date +%Y%m%d_%H%M%S)"
                     # 更新端口
                     sudo sed -i "s/port: 8090/port: $port/" "$ecosystem_file"
                     echo "✅ PM2 配置文件已更新: 8090 -> $port"
                   else
                     echo "⚠️ PM2 配置文件不存在: $ecosystem_file"
                   fi
                   
                   # 更新 package.json 中的端口（如果存在）
                   local package_file="$project_dir/package.json"
                   if [ -f "$package_file" ]; then
                     echo "📝 更新 package.json 端口配置"
                     sudo sed -i "s/\"PORT\": \"8090\"/\"PORT\": \"$port\"/" "$package_file"
                     echo "✅ package.json 已更新: 8090 -> $port"
                   fi
                   ;;
                 *)
                   echo "⚠️ 未知项目类型: $project，跳过配置文件更新"
                   ;;
               esac
               
               echo "✅ 应用程序配置文件更新完成"
             }
            
            # 主逻辑
            echo "📋 项目信息:"
            echo "- 项目名称: $PROJECT_NAME"
            echo "- 端口范围: $PORT_START-$PORT_END"
            echo "- 首选端口: ${PREFERRED_PORT:-'无'}"
            echo "- 强制重新分配: $FORCE_REALLOCATE"
            
            # 查找可用端口
            ALLOCATED_PORT=$(find_available_port "$PORT_START" "$PORT_END" "$PREFERRED_PORT")
            
                         if [ $? -eq 0 ]; then
               echo "🎉 端口分配成功: $ALLOCATED_PORT"
               
               # 更新端口配置文件
               update_port_config "$PROJECT_NAME" "$ALLOCATED_PORT"
               
               # 更新应用程序配置文件
               update_app_config "$PROJECT_NAME" "$ALLOCATED_PORT"
               
               # 输出结果到临时文件，供后续步骤读取
               echo "$ALLOCATED_PORT" > /tmp/allocated_port.txt
               echo "true" > /tmp/allocation_success.txt
               echo "true" > /tmp/port_config_updated.txt
              
              # 显示当前端口使用情况
              echo "📊 当前端口使用情况:"
              netstat -tlnp 2>/dev/null | grep -E ":(808[0-9]|809[0-9]|81[0-9][0-9]|82[0-9][0-9]|83[0-9][0-9]|84[0-9][0-9]|85[0-9][0-9]|86[0-9][0-9]|87[0-9][0-9]|88[0-9][0-9]|89[0-9][0-9]|9[0-9][0-9][0-9]) " | head -10
              
            else
              echo "❌ 端口分配失败"
              echo "" > /tmp/allocated_port.txt
              echo "false" > /tmp/allocation_success.txt
              echo "false" > /tmp/port_config_updated.txt
              exit 1
            fi

      - name: 设置输出
        id: set-outputs
        run: |
          # 从服务器读取端口分配结果
          ALLOCATED_PORT=$(ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 -i /tmp/ssh_key -p ${{ inputs.server_port }} ${{ inputs.server_user }}@${{ inputs.server_host }} "cat /tmp/allocated_port.txt 2>/dev/null || echo ''")
          ALLOCATION_SUCCESS=$(ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 -i /tmp/ssh_key -p ${{ inputs.server_port }} ${{ inputs.server_user }}@${{ inputs.server_host }} "cat /tmp/allocation_success.txt 2>/dev/null || echo 'false'")
          PORT_CONFIG_UPDATED=$(ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 -i /tmp/ssh_key -p ${{ inputs.server_port }} ${{ inputs.server_user }}@${{ inputs.server_host }} "cat /tmp/port_config_updated.txt 2>/dev/null || echo 'false'")
          
          echo "📋 端口分配结果:"
          echo "- 分配端口: $ALLOCATED_PORT"
          echo "- 分配成功: $ALLOCATION_SUCCESS"
          echo "- 配置更新: $PORT_CONFIG_UPDATED"
          
          # 设置输出变量
          echo "allocated_port=$ALLOCATED_PORT" >> $GITHUB_OUTPUT
          echo "allocation_success=$ALLOCATION_SUCCESS" >> $GITHUB_OUTPUT
          echo "port_config_updated=$PORT_CONFIG_UPDATED" >> $GITHUB_OUTPUT

      - name: 显示分配结果
        run: |
          echo "🎉 动态端口分配完成"
          echo "=========================================="
          echo "📋 分配信息:"
          echo "- 项目: ${{ inputs.project }}"
          echo "- 分配端口: ${{ steps.set-outputs.outputs.allocated_port }}"
          echo "- 分配状态: ${{ steps.set-outputs.outputs.allocation_success }}"
          echo "- 配置更新: ${{ steps.set-outputs.outputs.port_config_updated }}"
          echo ""
          echo "📝 使用说明:"
          echo "1. 分配的端口已自动更新到服务器的 /srv/port-config.yml"
          echo "2. 后续部署将自动使用此端口"
          echo "3. 如需重新分配，请设置 force_reallocate=true"
