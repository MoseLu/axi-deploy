name: Deploy to Server

on:
  workflow_dispatch:
    inputs:
      project:
        description: '项目名称'
        required: true
        type: string
      lang:
        description: '项目语言'
        required: true
        type: string
        default: 'static'
      artifact_id:
        description: '构建产物ID'
        required: true
        type: string
      deploy_path:
        description: '部署路径'
        required: true
        type: string
      start_cmd:
        description: '启动命令'
        required: false
        type: string
        default: ''
      caller_repo:
        description: '调用者仓库'
        required: true
        type: string
      caller_branch:
        description: '调用者分支'
        required: true
        type: string
      caller_commit:
        description: '调用者提交'
        required: true
        type: string
      server_host:
        description: '服务器主机'
        required: true
        type: string
      server_port:
        description: '服务器端口'
        required: true
        type: string
      server_user:
        description: '服务器用户'
        required: true
        type: string
      server_key:
        description: '服务器密钥'
        required: true
        type: string

permissions:
  contents: read
  actions: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: 下载构建产物
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 解析调用者仓库信息
            const [owner, repo] = '${{ github.event.inputs.caller_repo }}'.split('/');
            
            // 获取调用者仓库的最新workflow run
            const { data: runs } = await github.rest.actions.listWorkflowRunsForRepo({
              owner: owner,
              repo: repo,
              branch: '${{ github.event.inputs.caller_branch }}',
              per_page: 1
            });
            
            if (runs.workflow_runs.length === 0) {
              throw new Error('未找到调用者仓库的workflow run');
            }
            
            const runId = runs.workflow_runs[0].id;
            console.log(`找到调用者仓库的workflow run: ${runId}`);
            
            // 获取构建产物
            const { data: artifacts } = await github.rest.actions.listWorkflowRunArtifacts({
              owner: owner,
              repo: repo,
              run_id: runId
            });
            
            const artifact = artifacts.artifacts.find(a => a.name === 'dist-${{ github.event.inputs.project }}');
            if (!artifact) {
              throw new Error(`未找到构建产物: dist-${{ github.event.inputs.project }}`);
            }
            
            console.log(`找到构建产物: ${artifact.name}, ID: ${artifact.id}`);
            
            // 下载构建产物
            const { data: download } = await github.rest.actions.downloadArtifact({
              owner: owner,
              repo: repo,
              artifact_id: artifact.id,
              archive_format: 'zip'
            });
            
            // 下载文件
            const response = await fetch(download.url);
            const buffer = await response.arrayBuffer();
            
            // 解压文件
            const JSZip = require('jszip');
            const zip = new JSZip();
            await zip.loadAsync(buffer);
            
            // 创建dist目录
            const fs = require('fs');
            const path = require('path');
            fs.mkdirSync('./dist', { recursive: true });
            
            // 解压所有文件到dist目录
            for (const [filename, file] of Object.entries(zip.files)) {
              if (!file.dir) {
                const filePath = path.join('./dist', filename);
                const dir = path.dirname(filePath);
                fs.mkdirSync(dir, { recursive: true });
                fs.writeFileSync(filePath, await file.async('nodebuffer'));
              }
            }
            
            console.log('构建产物下载并解压完成');
            
      - name: 部署到服务器
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ github.event.inputs.server_host }}
          port: ${{ github.event.inputs.server_port }}
          username: ${{ github.event.inputs.server_user }}
          key: ${{ github.event.inputs.server_key }}
          script: |
            # 创建部署目录
            mkdir -p ${{ github.event.inputs.deploy_path }}
            
            # 停止现有服务（如果有）
            echo "停止现有服务..."
            
            # 清理旧文件
            rm -rf ${{ github.event.inputs.deploy_path }}/*
            
            # 部署新文件
            echo "部署新文件到 ${{ github.event.inputs.deploy_path }}..."
            
            # 显示部署信息
            echo "项目: ${{ github.event.inputs.project }}"
            echo "语言: ${{ github.event.inputs.lang }}"
            echo "调用者: ${{ github.event.inputs.caller_repo }}"
            echo "分支: ${{ github.event.inputs.caller_branch }}"
            echo "提交: ${{ github.event.inputs.caller_commit }}"
            
      - name: 上传部署文件
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ github.event.inputs.server_host }}
          port: ${{ github.event.inputs.server_port }}
          username: ${{ github.event.inputs.server_user }}
          key: ${{ github.event.inputs.server_key }}
          source: "./dist/*"
          target: "${{ github.event.inputs.deploy_path }}/"
          strip_components: 0
          
      - name: 执行启动命令
        if: ${{ github.event.inputs.start_cmd != '' }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ github.event.inputs.server_host }}
          port: ${{ github.event.inputs.server_port }}
          username: ${{ github.event.inputs.server_user }}
          key: ${{ github.event.inputs.server_key }}
          script: |
            echo "执行启动命令: ${{ github.event.inputs.start_cmd }}"
            cd ${{ github.event.inputs.deploy_path }}
            ${{ github.event.inputs.start_cmd }}
            
      - name: 部署完成
        run: |
          echo "✅ 部署完成!"
          echo "项目: ${{ github.event.inputs.project }}"
          echo "部署路径: ${{ github.event.inputs.deploy_path }}"
          echo "调用者: ${{ github.event.inputs.caller_repo }}@${{ github.event.inputs.caller_branch }}"
          echo "提交: ${{ github.event.inputs.caller_commit }}" 