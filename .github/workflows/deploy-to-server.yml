name: Deploy to Server

description: "服务器部署 - 将构建产物部署到目标服务器"

on:
  workflow_call:
    inputs:
      project:
        required: true
        type: string
        description: "项目名称"
      deploy_type:
        required: true
        type: string
        description: "部署类型 (backend/static)"
        default: "static"
      server_host:
        required: true
        type: string
        description: "服务器地址"
      server_user:
        required: true
        type: string
        description: "服务器用户"
      server_key:
        required: true
        type: string
        description: "服务器密钥"
      server_port:
        required: true
        type: string
        description: "服务器端口"
      apps_root:
        required: false
        type: string
        description: "应用目录路径"
        default: "/srv/apps"
      static_root:
        required: false
        type: string
        description: "静态文件目录路径"
        default: "/srv/static"
      backup_root:
        required: false
        type: string
        description: "备份根目录"
        default: "/srv/backups"
      run_user:
        required: false
        type: string
        description: "运行用户"
        default: "deploy"
    outputs:
      deploy_success:
        description: "部署是否成功"
        value: ${{ jobs.deploy.outputs.deploy_success }}
      deploy_path:
        description: "部署路径"
        value: ${{ jobs.deploy.outputs.deploy_path }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
    outputs:
      deploy_success: ${{ steps.set-outputs.outputs.deploy_success }}
      deploy_path: ${{ steps.set-outputs.outputs.deploy_path }}
    
    steps:
      - name: 验证输入参数
        run: |
          echo "🔍 验证输入参数..."
          echo "- 项目: ${{ inputs.project }}"
          echo "- 部署类型: ${{ inputs.deploy_type }}"
          echo "- 服务器: ${{ inputs.server_host }}:${{ inputs.server_port }}"
          echo "- 用户: ${{ inputs.server_user }}"
          
          echo "✅ 输入参数验证通过"

      - name: 调试SSH参数
        run: |
          echo "🔍 调试SSH参数..."
          echo "- 服务器: ${{ inputs.server_host }}"
          echo "- 端口: ${{ inputs.server_port }}"
          echo "- 用户: ${{ inputs.server_user }}"
          echo "- 密钥长度: ${#{{ inputs.server_key }}}"

      - name: 部署到服务器
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ inputs.server_host }}
          username: ${{ inputs.server_user }}
          key: ${{ inputs.server_key }}
          port: ${{ inputs.server_port }}
          script: |
            echo "🚀 开始部署 ${{ inputs.project }}..."
            
            PROJECT="${{ inputs.project }}"
            DEPLOY_TYPE="${{ inputs.deploy_type }}"
            APPS_ROOT="${{ inputs.apps_root }}"
            STATIC_ROOT="${{ inputs.static_root }}"
            BACKUP_ROOT="${{ inputs.backup_root }}"
            RUN_USER="${{ inputs.run_user }}"
            
            echo "📋 部署配置:"
            echo "- 项目: $PROJECT"
            echo "- 类型: $DEPLOY_TYPE"
            echo "- 应用目录: $APPS_ROOT"
            echo "- 静态目录: $STATIC_ROOT"
            echo "- 备份目录: $BACKUP_ROOT"
            echo "- 运行用户: $RUN_USER"
            
            # 确定部署路径
            if [ "$DEPLOY_TYPE" = "backend" ]; then
              DEPLOY_PATH="$APPS_ROOT/$PROJECT"
              BACKUP_PATH="$BACKUP_ROOT/$PROJECT"
            else
              DEPLOY_PATH="$STATIC_ROOT/$PROJECT"
              BACKUP_PATH="$BACKUP_ROOT/$PROJECT"
            fi
            
            echo "📁 部署路径: $DEPLOY_PATH"
            echo "📁 备份路径: $BACKUP_PATH"
            
            # 创建必要的目录
            sudo mkdir -p "$APPS_ROOT" "$STATIC_ROOT" "$BACKUP_ROOT"
            sudo chown -R $RUN_USER:$RUN_USER "$APPS_ROOT" "$STATIC_ROOT" "$BACKUP_ROOT"
            
            # 备份现有部署（如果存在）
            if [ -d "$DEPLOY_PATH" ]; then
              echo "📦 备份现有部署..."
              BACKUP_TIMESTAMP=$(date +%Y%m%d_%H%M%S)
              BACKUP_NAME="$PROJECT.backup.$BACKUP_TIMESTAMP"
              sudo cp -r "$DEPLOY_PATH" "$BACKUP_PATH/$BACKUP_NAME"
              sudo chown -R $RUN_USER:$RUN_USER "$BACKUP_PATH/$BACKUP_NAME"
              echo "✅ 现有部署已备份到: $BACKUP_PATH/$BACKUP_NAME"
              
              # 清理旧备份（保留最近5个）
              echo "🧹 清理旧备份..."
              OLD_BACKUPS=$(ls -t "$BACKUP_PATH"/$PROJECT.backup.* 2>/dev/null | tail -n +6)
              if [ -n "$OLD_BACKUPS" ]; then
                echo "🗑️ 删除旧备份:"
                echo "$OLD_BACKUPS" | xargs -r sudo rm -rf
              fi
            else
              echo "📋 没有现有部署需要备份"
            fi
            
            # 清理目标部署目录（避免残留文件）
            echo "🧹 清理目标部署目录..."
            sudo rm -rf "$DEPLOY_PATH"/*
            sudo mkdir -p "$DEPLOY_PATH"
            sudo chown -R $RUN_USER:$RUN_USER "$DEPLOY_PATH"
            
            echo "✅ 目标目录已准备就绪"

      - name: 检查构建产物是否存在
        run: |
          echo "🔍 检查构建产物..."
          
          if [ -d "./artifacts" ]; then
            echo "✅ 构建产物目录存在"
            echo "📁 构建产物内容:"
            ls -la ./artifacts/
            
            # 检查是否有文件
            FILE_COUNT=$(find ./artifacts -type f | wc -l)
            echo "📊 文件数量: $FILE_COUNT"
            
            if [ "$FILE_COUNT" -gt 0 ]; then
              echo "✅ 构建产物验证通过"
            else
              echo "❌ 构建产物目录为空"
              exit 1
            fi
          else
            echo "❌ 构建产物目录不存在"
            exit 1
          fi

      - name: 直接部署到服务器
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ inputs.server_host }}
          username: ${{ inputs.server_user }}
          key: ${{ inputs.server_key }}
          port: ${{ inputs.server_port }}
          script: |
            echo "📦 开始上传构建产物..."
            
            PROJECT="${{ inputs.project }}"
            DEPLOY_TYPE="${{ inputs.deploy_type }}"
            
            if [ "$DEPLOY_TYPE" = "backend" ]; then
              DEPLOY_PATH="${{ inputs.apps_root }}/$PROJECT"
            else
              DEPLOY_PATH="${{ inputs.static_root }}/$PROJECT"
            fi
            
            echo "📁 目标路径: $DEPLOY_PATH"
            
            # 确保目标目录存在
            sudo mkdir -p "$DEPLOY_PATH"
            sudo chown -R ${{ inputs.run_user }}:${{ inputs.run_user }} "$DEPLOY_PATH"
            
            echo "✅ 目标目录已准备"

      - name: 调试构建产物
        run: |
          echo "🔍 调试构建产物..."
          echo "📁 当前目录: $(pwd)"
          echo "📁 构建产物目录:"
          ls -la ./artifacts/
          
          # 检查构建产物结构
          if [ -f "./artifacts/deployment.tar.gz" ]; then
            echo "📦 发现 deployment.tar.gz"
            echo "📊 文件大小: $(stat -c%s ./artifacts/deployment.tar.gz) bytes"
          else
            echo "📋 构建产物内容:"
            find ./artifacts -type f -exec ls -la {} \;
          fi

      - name: 准备目标目录
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ inputs.server_host }}
          username: ${{ inputs.server_user }}
          key: ${{ inputs.server_key }}
          port: ${{ inputs.server_port }}
          script: |
            echo "📁 准备目标目录..."
            
            PROJECT="${{ inputs.project }}"
            DEPLOY_TYPE="${{ inputs.deploy_type }}"
            
            if [ "$DEPLOY_TYPE" = "backend" ]; then
              DEPLOY_PATH="${{ inputs.apps_root }}/$PROJECT"
            else
              DEPLOY_PATH="${{ inputs.static_root }}/$PROJECT"
            fi
            
            # 清理并创建目标目录
            sudo rm -rf "$DEPLOY_PATH"/*
            sudo mkdir -p "$DEPLOY_PATH"
            sudo chown -R ${{ inputs.run_user }}:${{ inputs.run_user }} "$DEPLOY_PATH"
            
            echo "✅ 目标目录已准备: $DEPLOY_PATH"

      - name: 上传构建产物到部署目录
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ inputs.server_host }}
          username: ${{ inputs.server_user }}
          key: ${{ inputs.server_key }}
          port: ${{ inputs.server_port }}
          source: "./artifacts/*"
          target: "${{ inputs.deploy_type == 'backend' && inputs.apps_root || inputs.static_root }}/${{ inputs.project }}/"
          strip_components: 0

      - name: 验证上传结果
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ inputs.server_host }}
          username: ${{ inputs.server_user }}
          key: ${{ inputs.server_key }}
          port: ${{ inputs.server_port }}
          script: |
            echo "🔍 验证上传结果..."
            
            PROJECT="${{ inputs.project }}"
            DEPLOY_TYPE="${{ inputs.deploy_type }}"
            
            if [ "$DEPLOY_TYPE" = "backend" ]; then
              DEPLOY_PATH="${{ inputs.apps_root }}/$PROJECT"
            else
              DEPLOY_PATH="${{ inputs.static_root }}/$PROJECT"
            fi
            
            echo "📁 检查部署路径: $DEPLOY_PATH"
            
            if [ -d "$DEPLOY_PATH" ]; then
              echo "✅ 部署目录存在"
              echo "📁 部署内容:"
              ls -la "$DEPLOY_PATH"
              
              # 检查是否有文件
              FILE_COUNT=$(find "$DEPLOY_PATH" -type f | wc -l)
              echo "📊 文件数量: $FILE_COUNT"
              
              if [ "$FILE_COUNT" -gt 0 ]; then
                echo "✅ 部署验证成功"
              else
                echo "❌ 部署目录为空"
                exit 1
              fi
            else
              echo "❌ 部署目录不存在"
              exit 1
            fi

      - name: 修复目录结构
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ inputs.server_host }}
          username: ${{ inputs.server_user }}
          key: ${{ inputs.server_key }}
          port: ${{ inputs.server_port }}
          script: |
            echo "🔧 修复目录结构..."
            
            PROJECT="${{ inputs.project }}"
            DEPLOY_TYPE="${{ inputs.deploy_type }}"
            
            if [ "$DEPLOY_TYPE" = "backend" ]; then
              DEPLOY_PATH="${{ inputs.apps_root }}/$PROJECT"
            else
              DEPLOY_PATH="${{ inputs.static_root }}/$PROJECT"
            fi
            
            echo "📁 部署路径: $DEPLOY_PATH"
            
            # 检查是否有 deployment.tar.gz
            if [ -f "$DEPLOY_PATH/deployment.tar.gz" ]; then
              echo "📦 发现 deployment.tar.gz，正在解压..."
              cd "$DEPLOY_PATH"
              tar -xzf deployment.tar.gz
              rm -f deployment.tar.gz
              echo "✅ deployment.tar.gz 已解压"
            fi
            
            # 检查目录结构
            echo "📁 最终目录结构:"
            ls -la "$DEPLOY_PATH"
            
            # 设置正确的权限
            sudo chown -R ${{ inputs.run_user }}:${{ inputs.run_user }} "$DEPLOY_PATH"
            sudo chmod -R 755 "$DEPLOY_PATH"
            
            echo "✅ 目录结构修复完成"

      - name: 验证部署结果
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ inputs.server_host }}
          username: ${{ inputs.server_user }}
          key: ${{ inputs.server_key }}
          port: ${{ inputs.server_port }}
          script: |
            echo "🔍 验证部署结果..."
            
            PROJECT="${{ inputs.project }}"
            DEPLOY_TYPE="${{ inputs.deploy_type }}"
            
            if [ "$DEPLOY_TYPE" = "backend" ]; then
              DEPLOY_PATH="${{ inputs.apps_root }}/$PROJECT"
            else
              DEPLOY_PATH="${{ inputs.static_root }}/$PROJECT"
            fi
            
            echo "📁 最终部署路径: $DEPLOY_PATH"
            
            if [ -d "$DEPLOY_PATH" ]; then
              echo "✅ 部署目录存在"
              echo "📁 部署内容:"
              ls -la "$DEPLOY_PATH"
              
              # 检查关键文件
              if [ "$DEPLOY_TYPE" = "backend" ]; then
                # 后端项目检查
                if [ -f "$DEPLOY_PATH/star-cloud-linux" ] || [ -f "$DEPLOY_PATH/main" ] || [ -f "$DEPLOY_PATH/package.json" ]; then
                  echo "✅ 后端项目关键文件存在"
                else
                  echo "⚠️ 后端项目关键文件缺失"
                fi
              else
                # 静态项目检查
                if [ -f "$DEPLOY_PATH/index.html" ] || [ -d "$DEPLOY_PATH/dist" ]; then
                  echo "✅ 静态项目关键文件存在"
                else
                  echo "⚠️ 静态项目关键文件缺失"
                fi
              fi
              
              echo "✅ 部署验证完成"
            else
              echo "❌ 部署目录不存在"
              exit 1
            fi

      - name: 部署失败自动回滚
        if: failure()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ inputs.server_host }}
          username: ${{ inputs.server_user }}
          key: ${{ inputs.server_key }}
          port: ${{ inputs.server_port }}
          script: |
            echo "🔄 部署失败，开始自动回滚..."
            
            PROJECT="${{ inputs.project }}"
            BACKUP_ROOT="${{ inputs.backup_root }}"
            PROJECT_BACKUP_DIR="$BACKUP_ROOT/$PROJECT"
            
            if [ -d "$PROJECT_BACKUP_DIR" ]; then
              # 查找最新的备份目录
              LATEST_BACKUP=$(find "$PROJECT_BACKUP_DIR" -name "$PROJECT.backup.*" -type d 2>/dev/null | sort -r | head -1)
              
              if [ -n "$LATEST_BACKUP" ] && [ -d "$LATEST_BACKUP" ]; then
                echo "📦 找到最新备份: $LATEST_BACKUP"
                echo "📁 备份内容:"
                ls -la "$LATEST_BACKUP"
                
                # 确定部署路径
                if [ "${{ inputs.deploy_type }}" = "backend" ]; then
                  DEPLOY_PATH="${{ inputs.apps_root }}/$PROJECT"
                else
                  DEPLOY_PATH="${{ inputs.static_root }}/$PROJECT"
                fi
                
                sudo rm -rf "$DEPLOY_PATH"/*
                sudo cp -r "$LATEST_BACKUP"/* "$DEPLOY_PATH/"
                sudo chown -R ${{ inputs.run_user }}:${{ inputs.run_user }} "$DEPLOY_PATH"
                echo "✅ 回滚完成，已恢复到: $LATEST_BACKUP"
              else
                echo "⚠️ 未找到有效的备份目录"
                echo "🔍 可用的备份:"
                find "$PROJECT_BACKUP_DIR" -name "$PROJECT.backup.*" -type d 2>/dev/null || echo "没有找到备份"
              fi
            else
              echo "⚠️ 备份目录不存在: $PROJECT_BACKUP_DIR"
            fi

      - name: 设置输出
        id: set-outputs
        run: |
          if [[ "${{ inputs.deploy_type }}" == "backend" ]]; then
            DEPLOY_PATH="${{ inputs.apps_root }}/${{ inputs.project }}"
          else
            DEPLOY_PATH="${{ inputs.static_root }}/${{ inputs.project }}"
          fi
          
          echo "deploy_success=true" >> $GITHUB_OUTPUT
          echo "deploy_path=$DEPLOY_PATH" >> $GITHUB_OUTPUT
          echo "✅ 输出已设置"
          echo "- deploy_success: true"
          echo "- deploy_path: $DEPLOY_PATH"
