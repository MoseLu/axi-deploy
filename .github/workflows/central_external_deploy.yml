name: Universal Deploy Workflow

on:
  repository_dispatch:
    types: [deploy]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 显示部署信息
        run: |
          echo "📋 部署参数:"
          echo "- 项目: ${{ github.event.client_payload.project }}"
          echo "- 部署路径: ${{ github.event.client_payload.deploy_path }}"
          echo "- 源仓库: ${{ github.event.client_payload.source_repo }}"
          echo "- 构建ID: ${{ github.event.client_payload.run_id }}"
          echo "- 项目类型: ${{ github.event.client_payload.project_type || 'static' }}"

      - name: 下载构建产物
        uses: dawidd6/action-download-artifact@v2
        with:
          name: dist-${{ github.event.client_payload.project }}
          path: ./dist
          repo: ${{ github.event.client_payload.source_repo }}
          workflow: build
          run_id: ${{ github.event.client_payload.run_id }}
          github_token: ${{ secrets.DEPLOY_CENTER_PAT }}

      - name: 显示构建产物信息
        run: |
          echo "📦 构建产物信息:"
          ls -la ./dist/

      - name: 上传到服务器
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          source: "./dist/*"
          target: "/tmp/"
          command_timeout: "10m"

      - name: 环境初始化和部署
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            echo "🔧 开始部署流程..."
            
            # 获取部署参数
            PROJECT="${{ github.event.client_payload.project }}"
            DEPLOY_PATH="${{ github.event.client_payload.deploy_path }}"
            PROJECT_TYPE="${{ github.event.client_payload.project_type || 'static' }}"
            NGINX_CONFIG="${{ github.event.client_payload.nginx_config || '' }}"
            NGINX_PATH="${{ github.event.client_payload.nginx_path || '' }}"
            
            # 标准化配置
            DOMAIN="redamancy.com.cn"
            RUN_USER="deploy"
            APPS_ROOT="/srv/apps"
            STATIC_ROOT="/srv/static"
            NGINX_CONF_DIR="/www/server/nginx/conf/conf.d/redamancy"
            CERT_SRC="/www/server/panel/vhost/cert/$DOMAIN"
            CERT_DST="/www/server/nginx/ssl/redamancy"
            
            echo "📋 部署配置:"
            echo "- 项目: $PROJECT"
            echo "- 部署路径: $DEPLOY_PATH"
            echo "- 项目类型: $PROJECT_TYPE"
            echo "- 域名: $DOMAIN"
            
            # 1. 前置检查
            echo "🔍 前置检查..."
            if ! command -v nginx &> /dev/null; then
              echo "❌ Nginx未安装，无法继续部署"
              exit 1
            fi
            echo "✅ Nginx已安装: $(nginx -v)"
            
            if ! systemctl is-active --quiet nginx; then
              echo "⚠️  Nginx服务未运行，尝试启动..."
              systemctl start nginx
            fi
            echo "✅ Nginx服务正在运行"
            
            # 2. 创建业务运行用户（灾后自愈）
            echo "👤 检查业务运行用户..."
            if ! id "$RUN_USER" &>/dev/null; then
              echo "🆕 创建用户 $RUN_USER..."
              sudo useradd -m -s /bin/bash $RUN_USER
              echo "✅ 用户 $RUN_USER 创建完成"
            else
              echo "✅ 用户 $RUN_USER 已存在"
            fi
            
            # 3. 创建所需目录（灾后自愈）
            echo "📁 检查并创建目录..."
            sudo mkdir -p $APPS_ROOT $STATIC_ROOT $NGINX_CONF_DIR $CERT_DST
            sudo chown $RUN_USER:$RUN_USER $APPS_ROOT $STATIC_ROOT
            
            # 4. 部署文件
            echo "📦 开始部署文件..."
            sudo mkdir -p $DEPLOY_PATH
            sudo cp -r /tmp/* $DEPLOY_PATH/
            sudo chown -R $RUN_USER:$RUN_USER $DEPLOY_PATH
            echo "✅ 文件部署完成"
            
            # 5. 配置Nginx（如果提供了配置）
            if [ ! -z "$NGINX_CONFIG" ] && [ ! -z "$NGINX_PATH" ]; then
              echo "🔧 配置Nginx..."
              echo "$NGINX_CONFIG" | sudo tee "$NGINX_PATH" > /dev/null
              
              # 测试Nginx配置
              if nginx -t; then
                echo "✅ Nginx配置语法正确"
                # 重新加载Nginx
                nginx -s reload
                echo "✅ Nginx已重新加载"
              else
                echo "❌ Nginx配置语法错误"
                exit 1
              fi
            else
              echo "ℹ️  未提供Nginx配置，跳过配置步骤"
            fi
            
            # 6. 项目特定处理
            case $PROJECT_TYPE in
              "vitepress"|"static")
                echo "📄 静态网站部署完成"
                ;;
              "node"|"express")
                echo "🟢 Node.js应用部署完成"
                # 这里可以添加Node.js特定的启动逻辑
                ;;
              "go")
                echo "🔵 Go应用部署完成"
                # 这里可以添加Go特定的启动逻辑
                ;;
              *)
                echo "ℹ️  未知项目类型: $PROJECT_TYPE"
                ;;
            esac
            
            echo "✅ 部署完成!"

      - name: 部署验证
        if: ${{ github.event.client_payload.test_url != '' }}
        run: |
          echo "🔍 开始部署验证..."
          TEST_URL="${{ github.event.client_payload.test_url }}"
          echo "测试URL: $TEST_URL"
          
          # 等待服务启动
          sleep 10
          
          # 简单的HTTP状态检查
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$TEST_URL" || echo "000")
          echo "HTTP状态码: $HTTP_STATUS"
          
          if [ "$HTTP_STATUS" = "200" ]; then
            echo "✅ 部署验证成功"
          else
            echo "⚠️  部署验证失败，状态码: $HTTP_STATUS"
            # 不退出，因为某些静态文件可能返回404
          fi 