name: External Deploy Handler

on:
  workflow_dispatch:
    inputs:
      project:
        description: '项目名称'
        required: true
        type: string
      lang:
        description: '项目语言'
        required: true
        type: string
        default: 'static'
      artifact_id:
        description: '构建产物ID'
        required: true
        type: string
      deploy_path:
        description: '部署路径'
        required: true
        type: string
      start_cmd:
        description: '启动命令'
        required: false
        type: string
        default: ''
      caller_info:
        description: '调用者信息 (格式: repo/branch/commit)'
        required: true
        type: string
      server_config:
        description: '服务器配置 (格式: host/port/user/key)'
        required: true
        type: string

permissions:
  contents: read
  actions: read
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: 解析参数
        id: parse
        run: |
          # 解析调用者信息
          echo "原始caller_info: ${{ github.event.inputs.caller_info }}"
          
          # 使用更精确的分割方法
          caller_info="${{ github.event.inputs.caller_info }}"
          IFS='/' read -r owner repo branch commit <<< "$caller_info"
          
          # 重新组合caller_repo
          caller_repo="$owner/$repo"
          
          echo "解析结果:"
          echo "  owner: '$owner'"
          echo "  repo: '$repo'"
          echo "  caller_repo: '$caller_repo'"
          echo "  caller_branch: '$branch'"
          echo "  caller_commit: '$commit'"
          
          # 验证解析结果
          if [ -z "$owner" ] || [ -z "$repo" ] || [ -z "$branch" ] || [ -z "$commit" ]; then
            echo "❌ 参数解析失败"
            echo "caller_info 格式应该是: owner/repo/branch/commit"
            echo "例如: MoseLu/axi-docs/main/117fb57"
            exit 1
          fi
          
          echo "caller_repo=$caller_repo" >> $GITHUB_OUTPUT
          echo "caller_branch=$branch" >> $GITHUB_OUTPUT
          echo "caller_commit=$commit" >> $GITHUB_OUTPUT
          
          # 解析服务器配置
          echo "原始server_config: ${{ github.event.inputs.server_config }}"
          
          # 检查server_config是否包含密钥
          server_config="${{ github.event.inputs.server_config }}"
          if [[ "$server_config" == *"/"* ]]; then
            # 如果有分隔符，尝试解析
            IFS='/' read -r server_host server_port server_user server_key <<< "$server_config"
          else
            echo "❌ server_config 格式错误"
            echo "server_config 格式应该是: host/port/user/key"
            echo "或者使用环境变量: SERVER_HOST, SERVER_PORT, SERVER_USER, SERVER_KEY"
            exit 1
          fi
          
          echo "解析结果:"
          echo "  server_host: '$server_host'"
          echo "  server_port: '$server_port'"
          echo "  server_user: '$server_user'"
          echo "  server_key: '${server_key:0:20}...'"
          
          # 验证解析结果
          if [ -z "$server_host" ] || [ -z "$server_port" ] || [ -z "$server_user" ] || [ -z "$server_key" ]; then
            echo "❌ 服务器配置解析失败"
            echo "server_config 格式应该是: host/port/user/key"
            echo "当前值: $server_config"
            exit 1
          fi
          
          echo "server_host=$server_host" >> $GITHUB_OUTPUT
          echo "server_port=$server_port" >> $GITHUB_OUTPUT
          echo "server_user=$server_user" >> $GITHUB_OUTPUT
          echo "server_key=$server_key" >> $GITHUB_OUTPUT
          
          echo "✅ 参数解析完成"
          
      - name: 获取调用者仓库的构建产物
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 解析调用者仓库信息
            const [owner, repo] = '${{ steps.parse.outputs.caller_repo }}'.split('/');
            
            // 获取调用者仓库的最新workflow run
            const { data: runs } = await github.rest.actions.listWorkflowRunsForRepo({
              owner: owner,
              repo: repo,
              branch: '${{ steps.parse.outputs.caller_branch }}',
              per_page: 1
            });
            
            if (runs.workflow_runs.length === 0) {
              throw new Error('未找到调用者仓库的workflow run');
            }
            
            const runId = runs.workflow_runs[0].id;
            console.log(`找到调用者仓库的workflow run: ${runId}`);
            
            // 获取构建产物
            const { data: artifacts } = await github.rest.actions.listWorkflowRunArtifacts({
              owner: owner,
              repo: repo,
              run_id: runId
            });
            
            const artifact = artifacts.artifacts.find(a => a.name === 'dist-${{ github.event.inputs.project }}');
            if (!artifact) {
              throw new Error(`未找到构建产物: dist-${{ github.event.inputs.project }}`);
            }
            
            console.log(`找到构建产物: ${artifact.name}, ID: ${artifact.id}`);
            
            // 下载构建产物
            const { data: download } = await github.rest.actions.downloadArtifact({
              owner: owner,
              repo: repo,
              artifact_id: artifact.id,
              archive_format: 'zip'
            });
            
            // 下载文件
            const response = await fetch(download.url);
            const buffer = await response.arrayBuffer();
            
            // 解压文件
            const JSZip = require('jszip');
            const zip = new JSZip();
            await zip.loadAsync(buffer);
            
            // 创建dist目录
            const fs = require('fs');
            const path = require('path');
            fs.mkdirSync('./dist', { recursive: true });
            
            // 解压所有文件到dist目录
            for (const [filename, file] of Object.entries(zip.files)) {
              if (!file.dir) {
                const filePath = path.join('./dist', filename);
                const dir = path.dirname(filePath);
                fs.mkdirSync(dir, { recursive: true });
                fs.writeFileSync(filePath, await file.async('nodebuffer'));
              }
            }
            
            console.log('构建产物下载并解压完成');
            
      - name: 部署到服务器
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ steps.parse.outputs.server_host }}
          port: ${{ steps.parse.outputs.server_port }}
          username: ${{ steps.parse.outputs.server_user }}
          key: ${{ steps.parse.outputs.server_key }}
          script: |
            # 创建部署目录
            mkdir -p ${{ github.event.inputs.deploy_path }}
            
            # 停止现有服务（如果有）
            echo "停止现有服务..."
            
            # 清理旧文件
            rm -rf ${{ github.event.inputs.deploy_path }}/*
            
            # 部署新文件
            echo "部署新文件到 ${{ github.event.inputs.deploy_path }}..."
            
            # 显示部署信息
            echo "项目: ${{ github.event.inputs.project }}"
            echo "语言: ${{ github.event.inputs.lang }}"
            echo "调用者: ${{ steps.parse.outputs.caller_repo }}"
            echo "分支: ${{ steps.parse.outputs.caller_branch }}"
            echo "提交: ${{ steps.parse.outputs.caller_commit }}"
            
      - name: 上传部署文件
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ steps.parse.outputs.server_host }}
          port: ${{ steps.parse.outputs.server_port }}
          username: ${{ steps.parse.outputs.server_user }}
          key: ${{ steps.parse.outputs.server_key }}
          source: "./dist/*"
          target: "${{ github.event.inputs.deploy_path }}/"
          strip_components: 0
          
      - name: 执行启动命令
        if: ${{ github.event.inputs.start_cmd != '' }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ steps.parse.outputs.server_host }}
          port: ${{ steps.parse.outputs.server_port }}
          username: ${{ steps.parse.outputs.server_user }}
          key: ${{ steps.parse.outputs.server_key }}
          script: |
            echo "执行启动命令: ${{ github.event.inputs.start_cmd }}"
            cd ${{ github.event.inputs.deploy_path }}
            ${{ github.event.inputs.start_cmd }}
            
      - name: 部署完成
        run: |
          echo "✅ 部署完成!"
          echo "项目: ${{ github.event.inputs.project }}"
          echo "部署路径: ${{ github.event.inputs.deploy_path }}"
          echo "调用者: ${{ steps.parse.outputs.caller_repo }}@${{ steps.parse.outputs.caller_branch }}"
          echo "提交: ${{ steps.parse.outputs.caller_commit }}"
          
      - name: 验证部署结果
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ steps.parse.outputs.server_host }}
          port: ${{ steps.parse.outputs.server_port }}
          username: ${{ steps.parse.outputs.server_user }}
          key: ${{ steps.parse.outputs.server_key }}
          script: |
            echo "🔍 验证部署结果..."
            echo "部署路径: ${{ github.event.inputs.deploy_path }}"
            
            # 检查目录是否存在
            if [ -d "${{ github.event.inputs.deploy_path }}" ]; then
              echo "✅ 部署目录存在"
              
              # 显示目录内容
              echo "📁 目录内容:"
              ls -la "${{ github.event.inputs.deploy_path }}"
              
              # 显示文件数量
              echo "📊 文件统计:"
              find "${{ github.event.inputs.deploy_path }}" -type f | wc -l
              
              # 显示最新修改的文件
              echo "🕒 最新修改的文件:"
              find "${{ github.event.inputs.deploy_path }}" -type f -exec ls -la {} \; | head -10
              
              # 检查关键文件
              if [ -f "${{ github.event.inputs.deploy_path }}/index.html" ]; then
                echo "✅ index.html 存在"
                echo "文件大小: $(du -h "${{ github.event.inputs.deploy_path }}/index.html" | cut -f1)"
              else
                echo "❌ index.html 不存在"
              fi
              
            else
              echo "❌ 部署目录不存在: ${{ github.event.inputs.deploy_path }}"
            fi
            
            # 显示服务器时间
            echo "🕐 服务器时间: $(date)"
            
            # 显示磁盘使用情况
            echo "💾 磁盘使用情况:"
            df -h "${{ github.event.inputs.deploy_path }}" 