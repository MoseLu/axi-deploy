name: Backend Service Diagnosis

description: "后端服务诊断和修复 - 专门处理后端服务启动失败和测试失败的问题"

on:
  workflow_call:
    inputs:
      project:
        required: true
        type: string
        description: "项目名称"
      server_host:
        required: true
        type: string
        description: "服务器地址"
      server_user:
        required: true
        type: string
        description: "服务器用户"
      server_key:
        required: true
        type: string
        description: "服务器密钥"
      server_port:
        required: true
        type: string
        description: "服务器端口"
      apps_root:
        required: false
        type: string
        description: "应用目录路径"
        default: "/srv/apps"
      service_port:
        required: false
        type: string
        description: "服务端口"
        default: "8090"
      health_endpoint:
        required: false
        type: string
        description: "健康检查端点"
        default: "/health"
    outputs:
      diagnosis_result:
        description: "诊断结果"
        value: ${{ jobs.diagnosis.outputs.result }}
      service_status:
        description: "服务状态"
        value: ${{ jobs.diagnosis.outputs.service_status }}
      fix_applied:
        description: "是否应用了修复"
        value: ${{ jobs.diagnosis.outputs.fix_applied }}

jobs:
  diagnosis:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      result: ${{ steps.diagnosis-step.outputs.result }}
      service_status: ${{ steps.diagnosis-step.outputs.service_status }}
      fix_applied: ${{ steps.diagnosis-step.outputs.fix_applied }}
    
    steps:
      - name: 后端服务诊断
        id: diagnosis-step
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ inputs.server_host }}
          username: ${{ inputs.server_user }}
          key: ${{ inputs.server_key }}
          port: ${{ inputs.server_port }}
          script: |
            echo "🔍 开始后端服务诊断..."
            echo "项目: ${{ inputs.project }}"
            echo "服务端口: ${{ inputs.service_port }}"
            echo "健康检查端点: ${{ inputs.health_endpoint }}"
            
            PROJECT="${{ inputs.project }}"
            SERVICE_PORT="${{ inputs.service_port }}"
            HEALTH_ENDPOINT="${{ inputs.health_endpoint }}"
            APPS_ROOT="${{ inputs.apps_root }}"
            PROJECT_DIR="$APPS_ROOT/$PROJECT"
            
            # 初始化状态变量
            SERVICE_STATUS="unknown"
            FIX_APPLIED="false"
            DIAGNOSIS_RESULT=""
            
            echo "📋 步骤1: 检查项目目录..."
            if [ -d "$PROJECT_DIR" ]; then
              echo "✅ 项目目录存在: $PROJECT_DIR"
              echo "目录内容:"
              ls -la "$PROJECT_DIR"
            else
              echo "❌ 项目目录不存在: $PROJECT_DIR"
              echo "result=project_not_found" >> $GITHUB_OUTPUT
              echo "service_status=not_deployed" >> $GITHUB_OUTPUT
              echo "fix_applied=false" >> $GITHUB_OUTPUT
              exit 1
            fi
            
            echo ""
            echo "📋 步骤2: 检查PM2进程状态..."
            PM2_STATUS=$(pm2 list 2>/dev/null | grep -E "$PROJECT|dashboard-backend" || echo "not_found")
            if [ "$PM2_STATUS" != "not_found" ]; then
              echo "📊 PM2进程状态:"
              pm2 list
              echo ""
              echo "📊 详细进程信息:"
              pm2 describe dashboard-backend 2>/dev/null || echo "无法获取进程详情"
            else
              echo "❌ 未找到PM2进程"
            fi
            
            echo ""
            echo "📋 步骤3: 检查端口占用..."
            PORT_STATUS=$(netstat -tlnp 2>/dev/null | grep ":$SERVICE_PORT" || echo "not_listening")
            if [ "$PORT_STATUS" != "not_listening" ]; then
              echo "✅ 端口 $SERVICE_PORT 正在监听:"
              echo "$PORT_STATUS"
              SERVICE_STATUS="listening"
            else
              echo "❌ 端口 $SERVICE_PORT 未监听"
              SERVICE_STATUS="not_listening"
            fi
            
            echo ""
            echo "📋 步骤4: 测试本地健康检查..."
            HEALTH_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:$SERVICE_PORT$HEALTH_ENDPOINT" --connect-timeout 5 --max-time 10 2>/dev/null || echo "connection_failed")
            if [ "$HEALTH_RESPONSE" = "200" ]; then
              echo "✅ 本地健康检查成功 - 状态码: $HEALTH_RESPONSE"
              SERVICE_STATUS="healthy"
            else
              echo "❌ 本地健康检查失败 - 响应: $HEALTH_RESPONSE"
              SERVICE_STATUS="unhealthy"
            fi
            
            echo ""
            echo "📋 步骤5: 检查服务日志..."
            echo "📋 PM2日志 (最近20行):"
            pm2 logs dashboard-backend --lines 20 --nostream 2>/dev/null || echo "无法获取PM2日志"
            
            echo ""
            echo "📋 系统日志 (最近10行):"
            journalctl -u nginx --no-pager -n 10 2>/dev/null || echo "无法获取系统日志"
            
            # 根据诊断结果决定修复策略
            echo ""
            echo "🔧 步骤6: 分析问题并应用修复..."
            
            if [ "$SERVICE_STATUS" = "healthy" ]; then
              echo "✅ 服务状态正常，无需修复"
              DIAGNOSIS_RESULT="service_healthy"
            elif [ "$SERVICE_STATUS" = "not_deployed" ]; then
              echo "❌ 项目未部署，无法修复"
              DIAGNOSIS_RESULT="project_not_deployed"
            else
              echo "🔧 尝试修复服务..."
              
              # 修复策略1: 重启PM2进程
              echo "🔄 策略1: 重启PM2进程..."
              pm2 restart dashboard-backend 2>/dev/null || echo "PM2重启失败"
              sleep 5
              
              # 检查重启后状态
              HEALTH_RESPONSE_AFTER=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:$SERVICE_PORT$HEALTH_ENDPOINT" --connect-timeout 5 --max-time 10 2>/dev/null || echo "connection_failed")
              if [ "$HEALTH_RESPONSE_AFTER" = "200" ]; then
                echo "✅ PM2重启成功，服务恢复正常"
                SERVICE_STATUS="healthy"
                FIX_APPLIED="true"
                DIAGNOSIS_RESULT="restart_success"
              else
                echo "❌ PM2重启后仍无法访问"
                
                # 修复策略2: 重新启动服务
                echo "🔄 策略2: 重新启动服务..."
                cd "$PROJECT_DIR"
                
                # 停止现有服务
                pm2 stop dashboard-backend 2>/dev/null || echo "停止服务失败"
                pm2 delete dashboard-backend 2>/dev/null || echo "删除服务失败"
                
                # 检查配置文件
                if [ -f "ecosystem.config.js" ]; then
                  echo "✅ 找到PM2配置文件"
                  cat ecosystem.config.js
                  
                  # 重新启动服务
                  pm2 start ecosystem.config.js --update-env
                  sleep 10
                  
                  # 检查启动后状态
                  HEALTH_RESPONSE_FINAL=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:$SERVICE_PORT$HEALTH_ENDPOINT" --connect-timeout 5 --max-time 10 2>/dev/null || echo "connection_failed")
                  if [ "$HEALTH_RESPONSE_FINAL" = "200" ]; then
                    echo "✅ 服务重新启动成功"
                    SERVICE_STATUS="healthy"
                    FIX_APPLIED="true"
                    DIAGNOSIS_RESULT="restart_success"
                  else
                    echo "❌ 服务重新启动失败"
                    DIAGNOSIS_RESULT="restart_failed"
                  fi
                else
                  echo "❌ 未找到PM2配置文件"
                  DIAGNOSIS_RESULT="config_missing"
                fi
              fi
            fi
            
            echo ""
            echo "📊 诊断结果总结:"
            echo "- 服务状态: $SERVICE_STATUS"
            echo "- 是否应用修复: $FIX_APPLIED"
            echo "- 诊断结果: $DIAGNOSIS_RESULT"
            
            # 设置输出
            echo "result=$DIAGNOSIS_RESULT" >> $GITHUB_OUTPUT
            echo "service_status=$SERVICE_STATUS" >> $GITHUB_OUTPUT
            echo "fix_applied=$FIX_APPLIED" >> $GITHUB_OUTPUT

      - name: 诊断结果处理
        run: |
          echo "📊 诊断结果处理..."
          echo "- 诊断结果: ${{ steps.diagnosis-step.outputs.result }}"
          echo "- 服务状态: ${{ steps.diagnosis-step.outputs.service_status }}"
          echo "- 修复应用: ${{ steps.diagnosis-step.outputs.fix_applied }}"
          
          case "${{ steps.diagnosis-step.outputs.result }}" in
            "service_healthy")
              echo "✅ 服务状态正常"
              ;;
            "restart_success")
              echo "✅ 服务修复成功"
              ;;
            "project_not_deployed")
              echo "❌ 项目未部署"
              exit 1
              ;;
            "restart_failed")
              echo "❌ 服务修复失败"
              exit 1
              ;;
            "config_missing")
              echo "❌ 配置文件缺失"
              exit 1
              ;;
            *)
              echo "❌ 未知诊断结果"
              exit 1
              ;;
          esac
