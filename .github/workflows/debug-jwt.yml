name: Debug JWT Generation

on:
  workflow_dispatch:

jobs:
  debug:
    runs-on: ubuntu-latest
    steps:
      - name: 详细调试 JWT 生成
        run: |
          echo "=== 详细调试 JWT 生成 ==="
          
          APP_ID="${{ secrets.APP_ID }}"
          PRIVATE_KEY="${{ secrets.APP_PRIVATE_KEY }}"
          INSTALLATION_ID="${{ secrets.APP_INSTALLATION_ID }}"
          
          echo "=== 1. 检查 Secrets ==="
          echo "APP_ID: $APP_ID"
          echo "APP_INSTALLATION_ID: $INSTALLATION_ID"
          echo "PRIVATE_KEY 长度: ${#PRIVATE_KEY}"
          
          if [ -z "$APP_ID" ]; then
            echo "❌ APP_ID 为空"
            exit 1
          fi
          
          if [ -z "$INSTALLATION_ID" ]; then
            echo "❌ APP_INSTALLATION_ID 为空"
            exit 1
          fi
          
          if [ -z "$PRIVATE_KEY" ]; then
            echo "❌ PRIVATE_KEY 为空"
            exit 1
          fi
          
          echo "✅ 所有 Secrets 都已配置"
          
          echo ""
          echo "=== 2. 检查私钥格式 ==="
          echo "私钥前100个字符:"
          echo "${PRIVATE_KEY:0:100}"
          echo ""
          echo "私钥后100个字符:"
          echo "${PRIVATE_KEY: -100}"
          
          # 检查私钥是否包含正确的标记
          if [[ "$PRIVATE_KEY" =~ "-----BEGIN RSA PRIVATE KEY-----" ]]; then
            echo "✅ 私钥包含正确的开始标记"
          else
            echo "❌ 私钥缺少开始标记"
          fi
          
          if [[ "$PRIVATE_KEY" =~ "-----END RSA PRIVATE KEY-----" ]]; then
            echo "✅ 私钥包含正确的结束标记"
          else
            echo "❌ 私钥缺少结束标记"
          fi
          
          echo ""
          echo "=== 3. 清理私钥 ==="
          # 清理私钥 - 移除可能的额外字符
          CLEANED_KEY=$(echo "$PRIVATE_KEY" | sed 's/\\n/\n/g' | sed 's/^[[:space:]]*//' | sed 's/[[:space:]]*$//')
          
          echo "清理后的私钥前100个字符:"
          echo "${CLEANED_KEY:0:100}"
          
          echo ""
          echo "=== 4. 写入私钥文件 ==="
          echo "$CLEANED_KEY" > /tmp/debug_key.pem
          chmod 600 /tmp/debug_key.pem
          
          echo "私钥文件大小:"
          ls -la /tmp/debug_key.pem
          
          echo "私钥文件内容（前10行）:"
          head -10 /tmp/debug_key.pem
          
          echo ""
          echo "=== 5. 验证私钥 ==="
          if openssl rsa -in /tmp/debug_key.pem -check -noout 2>/dev/null; then
            echo "✅ 私钥格式有效"
          else
            echo "❌ 私钥格式无效"
            echo "OpenSSL 错误信息:"
            openssl rsa -in /tmp/debug_key.pem -check -noout 2>&1
            exit 1
          fi
          
          echo ""
          echo "=== 6. 生成 JWT ==="
          NOW=$(date +%s)
          EXPIRES=$((NOW + 600))
          
          echo "当前时间戳: $NOW"
          echo "过期时间戳: $EXPIRES"
          
          # 生成 header
          HEADER_JSON='{"alg":"RS256","typ":"JWT"}'
          HEADER=$(echo -n "$HEADER_JSON" | base64 -w 0 | tr -d '=' | tr '/+' '_-')
          echo "Header JSON: $HEADER_JSON"
          echo "Header (base64): $HEADER"
          
          # 生成 payload
          PAYLOAD_JSON="{\"iat\":$NOW,\"exp\":$EXPIRES,\"iss\":\"$APP_ID\"}"
          PAYLOAD=$(echo -n "$PAYLOAD_JSON" | base64 -w 0 | tr -d '=' | tr '/+' '_-')
          echo "Payload JSON: $PAYLOAD_JSON"
          echo "Payload (base64): $PAYLOAD"
          
          # 生成签名
          SIGNATURE_INPUT="$HEADER.$PAYLOAD"
          echo "签名输入: $SIGNATURE_INPUT"
          
          SIGNATURE=$(echo -n "$SIGNATURE_INPUT" | openssl dgst -sha256 -sign /tmp/debug_key.pem | base64 -w 0 | tr -d '=' | tr '/+' '_-')
          
          if [ -z "$SIGNATURE" ]; then
            echo "❌ 签名生成失败"
            exit 1
          fi
          
          echo "Signature (base64): $SIGNATURE"
          
          # 组合 JWT
          JWT="$HEADER.$PAYLOAD.$SIGNATURE"
          echo ""
          echo "=== 完整 JWT ==="
          echo "JWT: $JWT"
          echo "JWT 长度: ${#JWT}"
          
          # 验证 JWT 格式
          JWT_PARTS=$(echo "$JWT" | tr '.' '\n' | wc -l)
          if [ "$JWT_PARTS" -ne 3 ]; then
            echo "❌ JWT 格式错误，应该有3个部分，实际有 $JWT_PARTS 个部分"
            exit 1
          fi
          
          echo "✅ JWT 格式正确"
          
          echo ""
          echo "=== 7. 测试 API 调用 ==="
          echo "测试 JWT 是否有效..."
          
          # 测试 API 调用
          API_RESPONSE=$(curl -s -X GET \
            -H "Authorization: Bearer $JWT" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/app")
          
          echo "API 响应: $API_RESPONSE"
          
          # 检查 API 响应
          if echo "$API_RESPONSE" | jq -e '.id' > /dev/null 2>&1; then
            echo "✅ JWT 有效，API 调用成功"
          else
            echo "❌ JWT 无效，API 调用失败"
            echo "错误详情: $API_RESPONSE"
            exit 1
          fi
          
          echo ""
          echo "=== 8. 获取 Installation Token ==="
          TOKEN_RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer $JWT" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/app/installations/$INSTALLATION_ID/access_tokens")
          
          echo "Token 响应: $TOKEN_RESPONSE"
          
          ACCESS_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r '.token')
          
          if [ "$ACCESS_TOKEN" = "null" ] || [ -z "$ACCESS_TOKEN" ]; then
            echo "❌ Installation Token 获取失败"
            echo "错误详情: $TOKEN_RESPONSE"
            exit 1
          fi
          
          echo "✅ Installation Token 获取成功"
          TOKEN_EXPIRES=$(echo "$TOKEN_RESPONSE" | jq -r '.expires_at')
          echo "Token 过期时间: $TOKEN_EXPIRES"
          
          # 清理
          rm -f /tmp/debug_key.pem
          
          echo ""
          echo "🎉 所有测试通过！JWT 生成和 API 调用都正常工作。" 