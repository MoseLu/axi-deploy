name: Configure Nginx

on:
  workflow_call:
    inputs:
      project:
        required: true
        type: string
        description: "项目名称"
      nginx_config:
        required: false
        type: string
        description: "Nginx配置"
        default: ""
      server_host:
        required: true
        type: string
        description: "服务器地址"
      server_user:
        required: true
        type: string
        description: "服务器用户"
      server_key:
        required: true
        type: string
        description: "服务器密钥"
      server_port:
        required: true
        type: string
        description: "服务器端口"
      domain:
        required: false
        type: string
        description: "域名"
        default: "redamancy.com.cn"
      nginx_conf_dir:
        required: false
        type: string
        description: "Nginx配置目录"
        default: "/www/server/nginx/conf/conf.d/redamancy"
      apps_root:
        required: false
        type: string
        description: "应用目录路径"
        default: "/srv/apps"
      static_root:
        required: false
        type: string
        description: "静态文件目录路径"
        default: "/srv/static"
      backend_port:
        required: false
        type: string
        description: "后端服务端口"
        default: "8080"
      service_name:
        required: false
        type: string
        description: "服务名称"
        default: "star-cloud"
      deploy_type:
        required: true
        type: string
        description: "部署类型"
    outputs:
      config_success:
        description: "配置是否成功"
        value: ${{ jobs.configure.outputs.config_success }}

jobs:
  configure:
    runs-on: ubuntu-latest
    timeout-minutes: 15  # 增加超时时间
    outputs:
      config_success: ${{ steps.set-outputs.outputs.config_success }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: 验证输入参数
        run: |
          echo "🔍 验证输入参数..."
          echo "- 项目: ${{ inputs.project }}"
          echo "- 服务器: ${{ inputs.server_host }}:${{ inputs.server_port }}"
          echo "- 用户: ${{ inputs.server_user }}"
          
          if [ -z "${{ inputs.nginx_config }}" ]; then
            echo "📝 没有提供Nginx配置，将使用默认配置"
          fi
          
          echo "✅ 输入参数验证通过"

      - name: 使用重试中心配置Nginx
        uses: ./.github/workflows/retry-center.yml
        with:
          step_name: "配置Nginx"
          command: |
            # 创建SSH密钥文件
            echo "${{ inputs.server_key }}" > /tmp/ssh_key
            chmod 600 /tmp/ssh_key
            
            # 创建SSH连接测试脚本
            cat > /tmp/nginx_config_script.sh << 'EOF'
            #!/bin/bash
            set -e
            
            echo "🔧 配置Nginx..."
            
            NGINX_CONF_DIR="${{ inputs.nginx_conf_dir || '/www/server/nginx/conf/conf.d/redamancy' }}"
            PROJECT="${{ inputs.project }}"
            
            # 验证Nginx配置目录是否存在
            if [ ! -d "$NGINX_CONF_DIR" ]; then
              echo "🚨 Nginx配置目录不存在: $NGINX_CONF_DIR"
              exit 1
            fi
            
            echo "✅ Nginx配置目录存在: $NGINX_CONF_DIR"
            
            # 生成项目路由配置
            ROUTE_CONF="$NGINX_CONF_DIR/route-$PROJECT.conf"
            
            # 保护主配置文件 - 确保不会被修改
            MAIN_CONF="$NGINX_CONF_DIR/00-main.conf"
            echo "🛡️ 保护主配置文件: $MAIN_CONF"
            if [ -f "$MAIN_CONF" ]; then
              echo "✅ 主配置文件存在，设置只读权限保护"
              sudo chmod 444 "$MAIN_CONF"
              echo "📋 主配置文件权限: $(ls -la $MAIN_CONF)"
            else
              echo "⚠️ 主配置文件不存在: $MAIN_CONF"
            fi
            
            # 创建项目专用备份目录
            BACKUP_DIR="$NGINX_CONF_DIR/backups"
            PROJECT_BACKUP_DIR="$BACKUP_DIR/$PROJECT"
            echo "📁 创建项目备份目录: $PROJECT_BACKUP_DIR"
            sudo mkdir -p "$PROJECT_BACKUP_DIR"
            sudo chmod 755 "$PROJECT_BACKUP_DIR"
            
            # 备份旧的路由配置文件
            if [ -f "$ROUTE_CONF" ]; then
              echo "📋 备份旧路由配置文件: $ROUTE_CONF"
              BACKUP_FILE="$PROJECT_BACKUP_DIR/route-$PROJECT.conf.backup.$(date +%Y%m%d_%H%M%S)"
              sudo cp "$ROUTE_CONF" "$BACKUP_FILE"
              sudo rm -f "$ROUTE_CONF"
              echo "✅ 旧路由配置文件已备份到: $BACKUP_FILE"
              
              # 清理旧的备份文件，只保留最近5个
              echo "🧹 清理旧的备份文件..."
              BACKUP_FILES=$(ls -t "$PROJECT_BACKUP_DIR"/route-$PROJECT.conf.backup.* 2>/dev/null | tail -n +6)
              if [ -n "$BACKUP_FILES" ]; then
                echo "🗑️ 删除旧的备份文件:"
                echo "$BACKUP_FILES" | xargs -r sudo rm -f
                echo "✅ 旧备份文件已清理，保留最近5个备份"
              else
                echo "📋 没有需要清理的旧备份文件"
              fi
            else
              echo "📋 没有找到旧的路由配置文件: $ROUTE_CONF"
            fi
            
            # 不再删除其他项目的配置文件，每个项目都应该有自己的配置文件
            echo "📋 保持其他项目的配置文件不变..."
            echo "📁 当前存在的route配置文件:"
            ls -la $NGINX_CONF_DIR/route-*.conf 2>/dev/null || echo "没有找到route配置文件"
            
            # 如果没有提供nginx_config，生成默认配置
            if [ -z "${{ inputs.nginx_config }}" ]; then
              echo "📝 生成默认Nginx配置..."
              DEPLOY_TYPE="${{ inputs.deploy_type }}"
              PROJECT="${{ inputs.project }}"
              
              if [ "$DEPLOY_TYPE" = "backend" ]; then
                # 后端项目配置
                CLEANED_CONFIG="
                location /docs/ {
                    proxy_pass http://localhost:8080/;
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                }"
              else
                # 静态项目配置 - 使用alias而不是root，并添加缓存控制
                CLEANED_CONFIG="
                location /docs/ {
                    alias /srv/static/$PROJECT/;
                    index index.html;
                    try_files \$uri \$uri/ /docs/index.html;
                    
                    # 确保不缓存HTML文件
                    add_header Cache-Control \"no-cache, no-store, must-revalidate\" always;
                    add_header Pragma \"no-cache\" always;
                    add_header Expires \"0\" always;
                }
                
                # 静态资源缓存
                location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                    alias /srv/static/$PROJECT/;
                    expires 1y;
                    add_header Cache-Control \"public, immutable\";
                }"
              fi
            else
              echo "📝 使用提供的Nginx配置..."
              CLEANED_CONFIG="${{ inputs.nginx_config }}"
            fi
            
            # 生成路由配置文件
            echo "📝 生成路由配置文件: $ROUTE_CONF"
            sudo tee "$ROUTE_CONF" > /dev/null << EOF
            # 项目: $PROJECT
            # 生成时间: $(date)
            # 部署类型: $DEPLOY_TYPE
            
            $CLEANED_CONFIG
            EOF
            
            echo "✅ 路由配置文件已生成"
            echo "📋 配置文件内容:"
            cat "$ROUTE_CONF"
            
            # 验证Nginx配置语法
            echo "🔍 验证Nginx配置语法..."
            if sudo nginx -t; then
              echo "✅ Nginx配置语法正确"
            else
              echo "❌ Nginx配置语法错误"
              echo "配置错误详情:"
              sudo nginx -t 2>&1
              exit 1
            fi
            
            # 重载Nginx配置
            echo "🔄 重载Nginx配置..."
            if sudo systemctl reload nginx; then
              echo "✅ Nginx配置重载成功"
            else
              echo "❌ Nginx重载失败，尝试重启..."
              if sudo systemctl restart nginx; then
                echo "✅ Nginx重启成功"
              else
                echo "❌ Nginx重启失败"
                exit 1
              fi
            fi
            
            echo "✅ Nginx配置完成！"
            EOF
            
            # 使用SSH执行配置脚本
            ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 -o ServerAliveInterval=60 -o ServerAliveCountMax=3 -i /tmp/ssh_key -p ${{ inputs.server_port }} ${{ inputs.server_user }}@${{ inputs.server_host }} "bash -s" < /tmp/nginx_config_script.sh
          max_retries: 3
          retry_delay: 10
          timeout_minutes: 15
          retry_strategy: "exponential"
          continue_on_error: false
          notify_on_failure: true
          step_type: "network"
          env_vars: '{"SSH_KEY":"${{ inputs.server_key }}"}'

      - name: 设置输出
        id: set-outputs
        run: |
          echo "config_success=true" >> $GITHUB_OUTPUT
          echo "✅ Nginx配置完成"
