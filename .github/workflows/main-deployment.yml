name: Main Deployment

description: "主部署工作流 - 整个部署流程的入口点"

on:
  workflow_dispatch:
    inputs:
      project:
        description: '项目名称'
        required: true
        type: string
      source_repo:
        description: '源仓库 (格式: owner/repo)'
        required: true
        type: string
      run_id:
        description: '构建运行ID'
        required: true
        type: string
      deploy_type:
        description: '部署类型'
        required: true
        default: 'static'
        type: choice
        options:
          - static
          - backend
      nginx_config:
        description: 'Nginx配置（可选）'
        required: false
        type: string
      start_cmd:
        description: '启动命令（后端项目）'
        required: false
        type: string
      server_host:
        description: '服务器地址'
        required: true
        type: string
      server_user:
        description: '服务器用户'
        required: true
        type: string
      server_key:
        description: '服务器密钥'
        required: true
        type: string
      server_port:
        description: '服务器端口'
        required: true
        type: string

jobs:
  download-artifact:
    runs-on: ubuntu-latest
    outputs:
      artifact_path: ${{ steps.set-outputs.outputs.artifact_path }}
      artifact_size: ${{ steps.set-outputs.outputs.artifact_size }}
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 下载构建产物
        id: download
        uses: dawidd6/action-download-artifact@v2
        with:
          name: dist-${{ inputs.project }}
          path: ./
          repo: ${{ inputs.source_repo }}
          workflow: ${{ inputs.project }}_deploy.yml
          run_id: ${{ inputs.run_id }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: 验证构建产物
        run: |
          echo "🔍 验证构建产物..."
          
          # 检查可能的构建产物目录
          if [ -d "./dist" ]; then
            ARTIFACT_DIR="./dist"
          elif [ -d "./dist-${{ inputs.project }}" ]; then
            ARTIFACT_DIR="./dist-${{ inputs.project }}"
          else
            # 构建产物直接在当前目录
            ARTIFACT_DIR="."
            echo "📁 构建产物直接在当前目录"
          fi
          
          echo "📁 构建产物目录: $ARTIFACT_DIR"
          echo "📁 构建产物目录内容:"
          ls -la "$ARTIFACT_DIR/"
          
          # 检查是否有文件
          FILE_COUNT=$(find "$ARTIFACT_DIR" -type f | wc -l)
          if [ "$FILE_COUNT" -eq 0 ]; then
            echo "❌ 构建产物目录为空"
            exit 1
          fi
          
          echo "✅ 构建产物验证通过"
          echo "📊 文件数量: $FILE_COUNT"

      - name: 设置输出
        id: set-outputs
        run: |
          # 确定构建产物路径
          if [ -d "./dist" ]; then
            ARTIFACT_PATH="./dist"
          elif [ -d "./dist-${{ inputs.project }}" ]; then
            ARTIFACT_PATH="./dist-${{ inputs.project }}"
          else
            # 构建产物直接在当前目录
            ARTIFACT_PATH="."
          fi
          
          echo "artifact_path=$ARTIFACT_PATH" >> $GITHUB_OUTPUT
          echo "artifact_size=$(du -sb $ARTIFACT_PATH | cut -f1)" >> $GITHUB_OUTPUT
          echo "✅ 输出已设置"
          echo "构建产物路径: $ARTIFACT_PATH"

  upload-files:
    needs: download-artifact
    runs-on: ubuntu-latest
    outputs:
      upload_success: ${{ steps.set-outputs.outputs.upload_success }}
      temp_dir: ${{ steps.set-outputs.outputs.temp_dir }}
    
    steps:
      - name: 创建临时目录并上传文件
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ inputs.server_host }}
          username: ${{ inputs.server_user }}
          key: ${{ inputs.server_key }}
          port: ${{ inputs.server_port }}
          script: |
            echo "📤 上传文件到服务器..."
            
            PROJECT="${{ inputs.project }}"
            RUN_USER="deploy"
            
            # 创建临时目录
            TEMP_DIR="/tmp/deploy-$PROJECT"
            echo "📁 创建临时目录: $TEMP_DIR"
            sudo mkdir -p "$TEMP_DIR"
            sudo chown $RUN_USER:$RUN_USER "$TEMP_DIR"
            
            echo "✅ 临时目录已创建: $TEMP_DIR"

      - name: 调试构建产物路径
        run: |
          echo "🔍 调试构建产物路径..."
          echo "当前工作目录: $(pwd)"
          echo "构建产物路径: ${{ needs.download-artifact.outputs.artifact_path }}"
          echo "构建产物大小: ${{ needs.download-artifact.outputs.artifact_size }}"
          
          echo "📁 当前目录内容:"
          ls -la ./
          
          echo "📁 构建产物目录内容:"
          if [ -d "${{ needs.download-artifact.outputs.artifact_path }}" ]; then
            ls -la "${{ needs.download-artifact.outputs.artifact_path }}/"
            echo "📊 文件统计:"
            find "${{ needs.download-artifact.outputs.artifact_path }}" -type f | wc -l
          else
            echo "❌ 构建产物目录不存在: ${{ needs.download-artifact.outputs.artifact_path }}"
          fi

      - name: 上传构建产物
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ inputs.server_host }}
          username: ${{ inputs.server_user }}
          key: ${{ inputs.server_key }}
          port: ${{ inputs.server_port }}
          source: "${{ github.workspace }}/${{ needs.download-artifact.outputs.artifact_path }}"
          target: "/tmp/deploy-${{ inputs.project }}/"

      - name: 设置输出
        id: set-outputs
        run: |
          echo "upload_success=true" >> $GITHUB_OUTPUT
          echo "temp_dir=/tmp/deploy-${{ inputs.project }}" >> $GITHUB_OUTPUT
          echo "✅ 上传完成"

  deploy-project:
    needs: upload-files
    runs-on: ubuntu-latest
    outputs:
      deploy_success: ${{ steps.set-outputs.outputs.deploy_success }}
      deploy_path: ${{ steps.set-outputs.outputs.deploy_path }}
    
    steps:
      - name: 部署项目
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ inputs.server_host }}
          username: ${{ inputs.server_user }}
          key: ${{ inputs.server_key }}
          port: ${{ inputs.server_port }}
          script: |
            echo "🚀 部署项目..."
            
            PROJECT="${{ inputs.project }}"
            DEPLOY_TYPE="${{ inputs.deploy_type }}"
            RUN_USER="deploy"
            APPS_ROOT="/srv/apps"
            STATIC_ROOT="/srv/static"
            BACKUP_ROOT="/srv/backups"
            TEMP_DIR="/tmp/deploy-$PROJECT"
            
            # 确定部署路径
            if [ "$DEPLOY_TYPE" = "backend" ]; then
              DEPLOY_PATH="$APPS_ROOT/$PROJECT"
            else
              DEPLOY_PATH="$STATIC_ROOT/$PROJECT"
            fi
            
            echo "📁 部署路径: $DEPLOY_PATH"
            
            # 备份现有部署
            if [ -d "$DEPLOY_PATH" ]; then
              echo "📋 备份现有部署..."
              BACKUP_PATH="$BACKUP_ROOT/$PROJECT/backup-$(date +%Y%m%d_%H%M%S)"
              sudo mkdir -p "$BACKUP_PATH"
              sudo cp -r "$DEPLOY_PATH" "$BACKUP_PATH/"
              echo "✅ 备份完成: $BACKUP_PATH"
            fi
            
            # 部署新文件
            echo "📦 部署新文件..."
            sudo mkdir -p "$(dirname $DEPLOY_PATH)"
            sudo rm -rf "$DEPLOY_PATH"
            sudo mv "$TEMP_DIR" "$DEPLOY_PATH"
            sudo chown -R $RUN_USER:$RUN_USER "$DEPLOY_PATH"
            
            echo "✅ 部署完成"

      - name: 设置输出
        id: set-outputs
        run: |
          echo "deploy_success=true" >> $GITHUB_OUTPUT
          echo "deploy_path=/srv/${{ inputs.deploy_type == 'backend' && 'apps' || 'static' }}/${{ inputs.project }}" >> $GITHUB_OUTPUT
          echo "✅ 部署完成"

  configure-nginx:
    needs: deploy-project
    runs-on: ubuntu-latest
    outputs:
      config_success: ${{ steps.set-outputs.outputs.config_success }}
    
    steps:
      - name: 配置Nginx
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ inputs.server_host }}
          username: ${{ inputs.server_user }}
          key: ${{ inputs.server_key }}
          port: ${{ inputs.server_port }}
          script: |
            echo "🔧 配置Nginx..."
            
            PROJECT="${{ inputs.project }}"
            DEPLOY_TYPE="${{ inputs.deploy_type }}"
            NGINX_CONF_DIR="/www/server/nginx/conf/conf.d/redamancy"
            
            echo "📋 配置信息:"
            echo "- 项目: $PROJECT"
            echo "- 部署类型: $DEPLOY_TYPE"
            echo "- 配置目录: $NGINX_CONF_DIR"
            
            # 检查配置目录是否存在
            if [ ! -d "$NGINX_CONF_DIR" ]; then
              echo "❌ Nginx配置目录不存在: $NGINX_CONF_DIR"
              echo "📁 创建配置目录..."
              sudo mkdir -p "$NGINX_CONF_DIR"
            fi
            
            # 生成项目路由配置
            ROUTE_CONF="$NGINX_CONF_DIR/route-$PROJECT.conf"
            echo "📁 配置文件路径: $ROUTE_CONF"
            
            # 显示当前配置文件内容
            if [ -f "$ROUTE_CONF" ]; then
              echo "📄 当前配置文件内容:"
              cat "$ROUTE_CONF"
            else
              echo "📄 配置文件不存在，将创建新文件"
            fi
            
            # 备份旧配置 - 使用项目专用备份目录，最多保留2个备份
            if [ -f "$ROUTE_CONF" ]; then
              # 创建项目专用备份目录
              PROJECT_BACKUP_DIR="$NGINX_CONF_DIR/backups/$PROJECT"
              sudo mkdir -p "$PROJECT_BACKUP_DIR"
              
              # 备份旧配置
              BACKUP_FILE="$PROJECT_BACKUP_DIR/route-$PROJECT.conf.backup.$(date +%Y%m%d_%H%M%S)"
              sudo cp "$ROUTE_CONF" "$BACKUP_FILE"
              sudo rm -f "$ROUTE_CONF"
              echo "✅ 旧配置已备份到: $BACKUP_FILE"
              
              # 清理旧的备份文件，只保留最近2个
              echo "🧹 清理旧的备份文件..."
              BACKUP_FILES=$(ls -t "$PROJECT_BACKUP_DIR"/route-$PROJECT.conf.backup.* 2>/dev/null | tail -n +3)
              if [ -n "$BACKUP_FILES" ]; then
                echo "🗑️ 删除旧的备份文件:"
                echo "$BACKUP_FILES" | xargs -r sudo rm -f
                echo "✅ 旧备份文件已清理，保留最近2个备份"
              else
                echo "📋 没有需要清理的旧备份文件"
              fi
            fi
            
            # 生成默认Nginx配置
            if [ "$DEPLOY_TYPE" = "backend" ]; then
              # 后端项目配置
              NGINX_CONFIG="
              location /docs/ {
                  proxy_pass http://localhost:8080/;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
              }"
            else
              # 静态项目配置 - 使用alias而不是root，并添加缓存控制
              NGINX_CONFIG="
              location /docs/ {
                  alias /srv/static/$PROJECT/;
                  index index.html;
                  try_files \$uri \$uri/ /docs/index.html;
                  
                  # 确保不缓存HTML文件
                  add_header Cache-Control \"no-cache, no-store, must-revalidate\" always;
                  add_header Pragma \"no-cache\" always;
                  add_header Expires \"0\" always;
              }
              
              # 处理 /docs 路径（不带斜杠）- 重定向到 /docs/
              location = /docs {
                  return 301 /docs/;
              }"
            fi
            
            # 如果提供了自定义配置，使用自定义配置
            if [ -n "${{ inputs.nginx_config }}" ]; then
              NGINX_CONFIG='${{ inputs.nginx_config }}'
              echo "📝 使用自定义配置"
            else
              echo "📝 使用默认配置"
              # 确保默认配置就是完整的配置，包含缓存控制和重定向
            fi
            
            echo "📄 新配置内容:"
            echo "$NGINX_CONFIG"
            
            # 写入新配置
            echo "$NGINX_CONFIG" | sudo tee "$ROUTE_CONF"
            
            # 验证配置文件是否写入成功
            echo "📄 写入后的配置文件内容:"
            cat "$ROUTE_CONF"
            
            # 显示配置摘要
            echo "📋 配置摘要:"
            echo "- 项目: $PROJECT"
            echo "- 配置文件: $ROUTE_CONF"
            echo "- 配置类型: $(if [ -n "${{ inputs.nginx_config }}" ]; then echo '自定义配置'; else echo '默认配置'; fi)"
            echo "- 部署类型: $DEPLOY_TYPE"
            
            # 检查配置语法
            echo "🔍 检查Nginx配置语法..."
            if sudo nginx -t; then
              echo "✅ Nginx配置语法正确"
              sudo systemctl reload nginx
              echo "✅ Nginx配置完成并重新加载"
            else
              echo "❌ Nginx配置语法错误"
              exit 1
            fi

      - name: 设置输出
        id: set-outputs
        run: |
          echo "config_success=true" >> $GITHUB_OUTPUT
          echo "✅ 配置完成"

  start-service:
    needs: [deploy-project]
    if: ${{ inputs.start_cmd != '' && inputs.deploy_type == 'backend' }}
    runs-on: ubuntu-latest
    outputs:
      start_success: ${{ steps.set-outputs.outputs.start_success }}
    
    steps:
      - name: 启动服务
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ inputs.server_host }}
          username: ${{ inputs.server_user }}
          key: ${{ inputs.server_key }}
          port: ${{ inputs.server_port }}
          script: |
            echo "🚀 启动服务..."
            
            PROJECT="${{ inputs.project }}"
            START_CMD="${{ inputs.start_cmd }}"
            APPS_ROOT="/srv/apps"
            
            # 切换到项目目录
            cd "$APPS_ROOT/$PROJECT"
            
            # 执行启动命令
            echo "📋 执行启动命令: $START_CMD"
            $START_CMD
            
            # 等待服务启动
            sleep 5
            
            echo "✅ 服务启动完成"

      - name: 设置输出
        id: set-outputs
        run: |
          echo "start_success=true" >> $GITHUB_OUTPUT
          echo "✅ 启动完成"

  test-website:
    needs: [deploy-project, configure-nginx, start-service]
    if: always()
    runs-on: ubuntu-latest
    outputs:
      test_success: ${{ steps.set-outputs.outputs.test_success }}
    
    steps:
      - name: 测试网站可访问性
        run: |
          echo "🔍 测试网站可访问性..."
          
          # 等待一段时间让服务完全启动
          sleep 10
          
          # 测试网站可访问性
          if curl -f -s -o /dev/null -w "%{http_code}" https://redamancy.com.cn/docs/ | grep -q "200\|301\|302"; then
            echo "✅ 网站可正常访问"
          else
            echo "❌ 网站无法访问，HTTP状态码: $(curl -f -s -o /dev/null -w "%{http_code}" https://redamancy.com.cn/docs/)"
            echo "⚠️ 这可能是因为 Nginx 配置问题或服务未完全启动"
          fi

      - name: 设置输出
        id: set-outputs
        run: |
          echo "test_success=true" >> $GITHUB_OUTPUT
          echo "✅ 测试完成"



  deployment-summary:
    needs: [download-artifact, upload-files, deploy-project, configure-nginx, start-service, test-website]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: 部署完成总结
        run: |
          echo "🎉 部署流程完成"
          echo "=========================================="
          echo "📋 部署信息:"
          echo "- 项目: ${{ inputs.project }}"
          echo "- 部署类型: ${{ inputs.deploy_type }}"
          echo "- 源仓库: ${{ inputs.source_repo }}"
          echo "- 构建ID: ${{ inputs.run_id }}"
          echo ""
          echo "📊 执行状态:"
          echo "- 下载构建产物: ${{ needs.download-artifact.result }}"
          echo "- 上传文件: ${{ needs.upload-files.result }}"
          echo "- 部署项目: ${{ needs.deploy-project.result }}"
          echo "- 配置Nginx: ${{ needs.configure-nginx.result || 'skipped' }}"
          echo "- 启动服务: ${{ needs.start-service.result || 'skipped' }}"
          echo "- 测试网站: ${{ needs.test-website.result || 'skipped' }}"
          echo ""
          echo "🔗 访问信息:"
          echo "- 域名: redamancy.com.cn"
          echo "- 项目路径: ${{ needs.deploy-project.outputs.deploy_path }}"
          echo "- 访问URL: https://redamancy.com.cn/docs/"
          echo ""
          echo "📝 部署完成通知:"
          echo "✅ 项目 ${{ inputs.project }} 已成功部署到服务器"
          echo "🌐 可通过 https://redamancy.com.cn/docs/ 访问"
          echo "=========================================="