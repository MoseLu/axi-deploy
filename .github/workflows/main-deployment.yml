name: Main Deployment

description: "主部署工作流 - 整个部署流程的入口点"

on:
  workflow_dispatch:
    inputs:
      project:
        description: '项目名称'
        required: true
        type: string
      source_repo:
        description: '源仓库 (格式: owner/repo)'
        required: true
        type: string
      run_id:
        description: '构建运行ID'
        required: true
        type: string
      deploy_type:
        description: '部署类型'
        required: true
        default: 'static'
        type: choice
        options:
          - static
          - backend
      nginx_config:
        description: 'Nginx配置（可选）'
        required: false
        type: string
      test_url:
        description: '测试URL（可选）'
        required: false
        type: string
      start_cmd:
        description: '启动命令（后端项目）'
        required: false
        type: string
      deploy_secrets:
        description: '部署密钥 (JSON格式或base64编码的JSON: {"SERVER_HOST":"host","SERVER_PORT":"port","SERVER_USER":"user","SERVER_KEY":"key","DEPLOY_CENTER_PAT":"pat"})'
        required: true
        type: string
      skip_init:
        description: '跳过服务器初始化步骤'
        required: false
        type: boolean
        default: false

jobs:
  # 步骤1: 解析部署密钥
  parse-secrets:
    runs-on: ubuntu-latest
    outputs:
      server_host: ${{ steps.parse-secrets.outputs.server_host }}
      server_port: ${{ steps.parse-secrets.outputs.server_port }}
      server_user: ${{ steps.parse-secrets.outputs.server_user }}
      server_key: ${{ steps.parse-secrets.outputs.server_key }}
      deploy_center_pat: ${{ steps.parse-secrets.outputs.deploy_center_pat }}
    
    steps:
      - name: 解析部署密钥
        id: parse-secrets
        run: |
          echo "🔍 解析部署密钥..."
          
          # 从输入参数获取部署密钥
          DEPLOY_SECRETS='${{ inputs.deploy_secrets }}'
          
          # 检查是否为base64编码
          if echo "$DEPLOY_SECRETS" | base64 -d &>/dev/null; then
            echo "📦 检测到base64编码的部署密钥，正在解码..."
            DEPLOY_SECRETS=$(echo "$DEPLOY_SECRETS" | base64 -d)
          fi
          
          # 使用jq解析JSON配置
          SERVER_HOST=$(echo "$DEPLOY_SECRETS" | jq -r '.SERVER_HOST')
          SERVER_PORT=$(echo "$DEPLOY_SECRETS" | jq -r '.SERVER_PORT')
          SERVER_USER=$(echo "$DEPLOY_SECRETS" | jq -r '.SERVER_USER')
          SERVER_KEY=$(echo "$DEPLOY_SECRETS" | jq -r '.SERVER_KEY')
          DEPLOY_CENTER_PAT=$(echo "$DEPLOY_SECRETS" | jq -r '.DEPLOY_CENTER_PAT')
          
          # 验证必需参数
          if [ "$SERVER_HOST" = "null" ] || [ -z "$SERVER_HOST" ]; then
            echo "🚨 缺少必需的SERVER_HOST参数"
            exit 1
          fi
          if [ "$SERVER_PORT" = "null" ] || [ -z "$SERVER_PORT" ]; then
            echo "🚨 缺少必需的SERVER_PORT参数"
            exit 1
          fi
          if [ "$SERVER_USER" = "null" ] || [ -z "$SERVER_USER" ]; then
            echo "🚨 缺少必需的SERVER_USER参数"
            exit 1
          fi
          if [ "$SERVER_KEY" = "null" ] || [ -z "$SERVER_KEY" ]; then
            echo "🚨 缺少必需的SERVER_KEY参数"
            exit 1
          fi
          if [ "$DEPLOY_CENTER_PAT" = "null" ] || [ -z "$DEPLOY_CENTER_PAT" ]; then
            echo "🚨 缺少必需的DEPLOY_CENTER_PAT参数"
            exit 1
          fi
          
          # 设置输出 - 对于包含换行符的SERVER_KEY，使用多行输出语法
          echo "server_host=$SERVER_HOST" >> $GITHUB_OUTPUT
          echo "server_port=$SERVER_PORT" >> $GITHUB_OUTPUT
          echo "server_user=$SERVER_USER" >> $GITHUB_OUTPUT
          echo "deploy_center_pat=$DEPLOY_CENTER_PAT" >> $GITHUB_OUTPUT
          
          # 对于包含换行符的SERVER_KEY，使用多行输出语法
          {
            echo 'server_key<<EOF' >> $GITHUB_OUTPUT
            echo "$SERVER_KEY" >> $GITHUB_OUTPUT
            echo 'EOF' >> $GITHUB_OUTPUT
          }
          
          echo "✅ 部署密钥解析完成"
          echo "📋 服务器信息:"
          echo "- 主机: $SERVER_HOST"
          echo "- 端口: $SERVER_PORT"
          echo "- 用户: $SERVER_USER"

  # 步骤2: 服务器初始化（可选，使用可复用工作流）
  server-init:
    needs: [parse-secrets]
    if: ${{ inputs.skip_init != 'true' }}
    uses: MoseLu/axi-deploy/.github/workflows/server-init.yml@main
    with:
      server_host: ${{ needs.parse-secrets.outputs.server_host }}
      server_user: ${{ needs.parse-secrets.outputs.server_user }}
      server_key: ${{ needs.parse-secrets.outputs.server_key }}
      server_port: ${{ needs.parse-secrets.outputs.server_port }}

  # 步骤3: 下载并验证构建产物（使用可复用工作流）
  download-artifact:
    needs: [parse-secrets]
    uses: MoseLu/axi-deploy/.github/workflows/download-artifact.yml@main
    with:
      project: ${{ inputs.project }}
      source_repo: ${{ inputs.source_repo }}
      run_id: ${{ inputs.run_id }}
      github_token: ${{ needs.parse-secrets.outputs.deploy_center_pat }}

  # 步骤4: 备份现有部署
  backup-deployment:
    needs: [parse-secrets, download-artifact]
    runs-on: ubuntu-latest
    steps:
      - name: 备份现有部署
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ needs.parse-secrets.outputs.server_host }}
          username: ${{ needs.parse-secrets.outputs.server_user }}
          key: ${{ needs.parse-secrets.outputs.server_key }}
          port: ${{ needs.parse-secrets.outputs.server_port }}
          script: |
            echo "📋 备份现有部署..."
            
            PROJECT="${{ inputs.project }}"
            DEPLOY_TYPE="${{ inputs.deploy_type }}"
            DEPLOY_PATH="/srv/${{ inputs.deploy_type == 'backend' && 'apps' || 'static' }}/$PROJECT"
            
            # 创建项目专用备份目录
            if [[ "$DEPLOY_TYPE" == "backend" ]]; then
              BACKUP_ROOT="/srv/backups/apps"
            else
              BACKUP_ROOT="/srv/backups/static"
            fi
            PROJECT_BACKUP_DIR="$BACKUP_ROOT/$PROJECT"
            echo "📁 创建项目备份目录: $PROJECT_BACKUP_DIR"
            sudo mkdir -p "$PROJECT_BACKUP_DIR"
            sudo chmod 755 "$PROJECT_BACKUP_DIR"
            
            # 备份现有部署目录（如果存在）
            if [ -d "$DEPLOY_PATH" ]; then
              echo "📋 备份现有部署目录: $DEPLOY_PATH"
              BACKUP_NAME="$PROJECT_BACKUP_DIR/$PROJECT.backup.$(date +%Y%m%d_%H%M%S)"
              sudo cp -r $DEPLOY_PATH $BACKUP_NAME
              echo "✅ 现有部署目录已备份到: $BACKUP_NAME"
              
              # 清理旧的备份文件，只保留最近2个
              echo "🧹 清理旧的备份文件..."
              BACKUP_FILES=$(ls -t "$PROJECT_BACKUP_DIR"/$PROJECT.backup.* 2>/dev/null | tail -n +3)
              if [ -n "$BACKUP_FILES" ]; then
                echo "🗑️ 删除旧的备份文件:"
                echo "$BACKUP_FILES" | xargs -r sudo rm -rf
                echo "✅ 旧备份文件已清理，保留最近2个备份"
              else
                echo "📋 没有需要清理的旧备份文件"
              fi
            else
              echo "📋 部署目录不存在，无需备份: $DEPLOY_PATH"
            fi

  # 步骤5: 部署项目
  deploy-project:
    needs: [parse-secrets, download-artifact, backup-deployment]
    uses: MoseLu/axi-deploy/.github/workflows/deploy-project.yml@main
    with:
      project: ${{ inputs.project }}
      deploy_type: ${{ inputs.deploy_type }}
      server_host: ${{ needs.parse-secrets.outputs.server_host }}
      server_user: ${{ needs.parse-secrets.outputs.server_user }}
      server_key: ${{ needs.parse-secrets.outputs.server_key }}
      server_port: ${{ needs.parse-secrets.outputs.server_port }}

  # 步骤6: 配置Nginx（可选）
  configure-nginx:
    needs: [deploy-project]
    if: ${{ inputs.nginx_config != '' }}
    uses: MoseLu/axi-deploy/.github/workflows/configure-nginx.yml@main
    with:
      project: ${{ inputs.project }}
      server_host: ${{ needs.parse-secrets.outputs.server_host }}
      server_user: ${{ needs.parse-secrets.outputs.server_user }}
      server_key: ${{ needs.parse-secrets.outputs.server_key }}
      server_port: ${{ needs.parse-secrets.outputs.server_port }}
      deploy_type: ${{ inputs.deploy_type }}
      nginx_config: ${{ inputs.nginx_config }}

  # 步骤7: 启动服务（可选，仅后端项目）
  start-service:
    needs: [deploy-project]
    if: ${{ inputs.start_cmd != '' && inputs.deploy_type == 'backend' }}
    uses: MoseLu/axi-deploy/.github/workflows/start-service.yml@main
    with:
      project: ${{ inputs.project }}
      start_cmd: ${{ inputs.start_cmd }}
      deploy_type: ${{ inputs.deploy_type }}
      server_host: ${{ needs.parse-secrets.outputs.server_host }}
      server_user: ${{ needs.parse-secrets.outputs.server_user }}
      server_key: ${{ needs.parse-secrets.outputs.server_key }}
      server_port: ${{ needs.parse-secrets.outputs.server_port }}

  # 步骤8: 测试网站（可选）
  test-website:
    needs: [deploy-project, configure-nginx, start-service]
    if: ${{ inputs.test_url != '' }}
    uses: MoseLu/axi-deploy/.github/workflows/test-website.yml@main
    with:
      project: ${{ inputs.project }}
      test_url: ${{ inputs.test_url }}
      deploy_type: ${{ inputs.deploy_type }}
      server_host: ${{ needs.parse-secrets.outputs.server_host }}
      server_user: ${{ needs.parse-secrets.outputs.server_user }}
      server_key: ${{ needs.parse-secrets.outputs.server_key }}
      server_port: ${{ needs.parse-secrets.outputs.server_port }}

  # 步骤9: 部署完成总结
  deployment-summary:
    needs: [parse-secrets, server-init, download-artifact, backup-deployment, deploy-project, configure-nginx, start-service, test-website]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: 部署完成总结
        run: |
          echo "🎉 部署流程完成"
          echo "=========================================="
          echo "📋 部署信息:"
          echo "- 项目: ${{ inputs.project }}"
          echo "- 部署类型: ${{ inputs.deploy_type }}"
          echo "- 源仓库: ${{ inputs.source_repo }}"
          echo "- 构建ID: ${{ inputs.run_id }}"
          echo ""
          echo "📊 执行状态:"
          echo "- 解析密钥: ${{ needs.parse-secrets.result }}"
          echo "- 服务器初始化: ${{ needs.server-init.result || 'skipped' }}"
          echo "- 下载构建产物: ${{ needs.download-artifact.result }}"
          echo "- 备份部署: ${{ needs.backup-deployment.result }}"
          echo "- 部署项目: ${{ needs.deploy-project.result }}"
          echo "- 配置Nginx: ${{ needs.configure-nginx.result || 'skipped' }}"
          echo "- 启动服务: ${{ needs.start-service.result || 'skipped' }}"
          echo "- 测试网站: ${{ needs.test-website.result || 'skipped' }}"
          echo ""
          echo "🔗 访问信息:"
          echo "- 域名: redamancy.com.cn"
          if [ "${{ needs.deploy-project.outputs.deploy_path }}" != "" ]; then
            echo "- 项目路径: ${{ needs.deploy-project.outputs.deploy_path }}"
          fi
          if [ "${{ inputs.test_url }}" != "" ]; then
            echo "- 测试URL: ${{ inputs.test_url }}"
          fi
          echo ""
          echo "📝 部署完成通知:"
          echo "✅ 项目 ${{ inputs.project }} 已成功部署到服务器"
          if [ "${{ inputs.test_url }}" != "" ]; then
            echo "🌐 可通过 ${{ inputs.test_url }} 访问"
          fi
          echo "=========================================="