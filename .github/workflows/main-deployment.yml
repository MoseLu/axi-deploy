name: Main Deployment

description: "主部署工作流 - 整个部署流程的入口点"

on:
  workflow_dispatch:
    inputs:
      project:
        description: '项目名称'
        required: true
        type: string
      source_repo:
        description: '源仓库 (格式: owner/repo)'
        required: true
        type: string
      run_id:
        description: '构建运行ID'
        required: true
        type: string
      deploy_type:
        description: '部署类型'
        required: true
        default: 'static'
        type: choice
        options:
          - static
          - backend
      nginx_config:
        description: 'Nginx配置（可选）'
        required: false
        type: string
      test_url:
        description: '测试URL（可选）'
        required: false
        type: string
      start_cmd:
        description: '启动命令（后端项目）'
        required: false
        type: string
      deploy_secrets:
        description: '部署密钥 (JSON格式或base64编码的JSON: {"SERVER_HOST":"host","SERVER_PORT":"port","SERVER_USER":"user","SERVER_KEY":"key","DEPLOY_CENTER_PAT":"pat"})'
        required: true
        type: string
      skip_init:
        description: '跳过服务器初始化步骤'
        required: false
        type: boolean
        default: false

jobs:
  # 步骤1: 验证构建产物可用性
  validate-artifact:
    runs-on: ubuntu-latest
    outputs:
      artifact_available: ${{ steps.check-artifact.outputs.available }}
      artifact_info: ${{ steps.check-artifact.outputs.info }}
      run_id: ${{ steps.check-artifact.outputs.run_id }}
    
    steps:
      - name: 验证构建产物可用性
        id: check-artifact
        run: |
          echo "🔍 验证构建产物可用性..."
          echo "项目名称: ${{ inputs.project }}"
          echo "源仓库: ${{ inputs.source_repo }}"
          echo "期望的构建产物名称: dist-${{ inputs.project }}"
          echo ""
          
          # 从部署密钥中提取GitHub Token
          DEPLOY_SECRETS='${{ inputs.deploy_secrets }}'
          
          # 检查是否为base64编码
          if echo "$DEPLOY_SECRETS" | base64 -d &>/dev/null; then
            echo "📦 检测到base64编码的部署密钥，正在解码..."
            DEPLOY_SECRETS=$(echo "$DEPLOY_SECRETS" | base64 -d)
          fi
          
          # 提取GitHub Token
          if echo "$DEPLOY_SECRETS" | jq -e '.DEPLOY_CENTER_PAT' >/dev/null 2>&1; then
            GITHUB_TOKEN=$(echo "$DEPLOY_SECRETS" | jq -r '.DEPLOY_CENTER_PAT')
          else
            echo "🚨 无法解析DEPLOY_CENTER_PAT参数"
            echo "🔍 部署密钥内容预览:"
            echo "$DEPLOY_SECRETS" | head -c 100
            echo "available=false" >> $GITHUB_OUTPUT
            echo "info=无法解析GitHub Token" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          if [ "$GITHUB_TOKEN" = "null" ] || [ -z "$GITHUB_TOKEN" ]; then
            echo "🚨 缺少必需的DEPLOY_CENTER_PAT参数"
            echo "available=false" >> $GITHUB_OUTPUT
            echo "info=缺少GitHub Token" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "📋 获取最近一次成功的构建产物..."
          
          # 获取最近一次成功的workflow run
          RUNS_RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ inputs.source_repo }}/actions/runs?per_page=10" 2>/dev/null || echo "API调用失败")
          
          echo "🔍 API响应调试信息:"
          echo "响应长度: $(echo "$RUNS_RESPONSE" | wc -c)"
          echo "响应前200字符:"
          echo "$RUNS_RESPONSE" | head -c 200
          echo ""
          
          # 检查API响应是否包含错误
          if echo "$RUNS_RESPONSE" | grep -q '"message"'; then
            ERROR_MSG=$(echo "$RUNS_RESPONSE" | jq -r '.message // empty' 2>/dev/null)
            if [ -n "$ERROR_MSG" ]; then
              echo "❌ API调用失败:"
              echo "$ERROR_MSG"
              echo "available=false" >> $GITHUB_OUTPUT
              echo "info=API调用失败" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi
          
          echo "📊 最近的构建记录:"
          if echo "$RUNS_RESPONSE" | jq -e '.workflow_runs' >/dev/null 2>&1; then
            echo "$RUNS_RESPONSE" | jq -r '.workflow_runs[] | "ID: \(.id), 状态: \(.status), 结论: \(.conclusion), 时间: \(.created_at)"' 2>/dev/null || echo "无法解析构建记录"
          else
            echo "无法解析构建记录响应"
            echo "响应内容: $RUNS_RESPONSE"
          fi
          
          # 获取最近一次成功的run ID
          if echo "$RUNS_RESPONSE" | jq -e '.workflow_runs' >/dev/null 2>&1; then
            LATEST_RUN_ID=$(echo "$RUNS_RESPONSE" | jq -r '.workflow_runs[] | select(.conclusion == "success") | .id' 2>/dev/null | head -1)
          else
            LATEST_RUN_ID=""
          fi
          
          if [ "$LATEST_RUN_ID" = "null" ] || [ -z "$LATEST_RUN_ID" ]; then
            echo "❌ 未找到成功的构建记录"
            echo "🔍 调试信息:"
            echo "- Token长度: $(echo "$GITHUB_TOKEN" | wc -c)"
            echo "- Token前10字符: ${GITHUB_TOKEN:0:10}..."
            echo "- 源仓库: ${{ inputs.source_repo }}"
            echo "- API URL: https://api.github.com/repos/${{ inputs.source_repo }}/actions/runs?per_page=10"
            echo ""
            echo "🔧 可能的原因:"
            echo "1. GitHub Token权限不足"
            echo "2. 源仓库没有成功的构建记录"
            echo "3. API调用失败"
            echo "4. 网络连接问题"
            echo ""
            echo "🔍 建议检查:"
            echo "1. 访问 https://github.com/${{ inputs.source_repo }}/actions"
            echo "2. 确认有成功的构建记录"
            echo "3. 检查Token权限"
            echo "available=false" >> $GITHUB_OUTPUT
            echo "info=未找到成功的构建记录" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "✅ 找到最近的成功构建，运行ID: $LATEST_RUN_ID"
          echo "🔍 构建时间信息:"
          echo "$RUNS_RESPONSE" | jq -r '.workflow_runs[] | select(.id == '$LATEST_RUN_ID') | "创建时间: \(.created_at), 更新时间: \(.updated_at)"' 2>/dev/null || echo "无法获取时间信息"
          
          # 检查该run的构建产物
          ARTIFACTS_RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ inputs.source_repo }}/actions/runs/$LATEST_RUN_ID/artifacts" 2>/dev/null || echo "API调用失败")
          
          echo "📦 构建产物列表:"
          if echo "$ARTIFACTS_RESPONSE" | jq -e '.artifacts' >/dev/null 2>&1; then
            echo "$ARTIFACTS_RESPONSE" | jq -r '.artifacts[] | "名称: \(.name), 大小: \(.size_in_bytes) bytes"' 2>/dev/null || echo "无法解析构建产物"
          else
            echo "无法解析构建产物响应"
            echo "响应内容: $ARTIFACTS_RESPONSE"
          fi
          
          # 检查是否包含目标构建产物
          if echo "$ARTIFACTS_RESPONSE" | grep -q "dist-${{ inputs.project }}"; then
            echo "✅ 找到构建产物: dist-${{ inputs.project }}"
            echo "available=true" >> $GITHUB_OUTPUT
            echo "info=构建产物可用" >> $GITHUB_OUTPUT
            echo "run_id=$LATEST_RUN_ID" >> $GITHUB_OUTPUT
          else
            echo "❌ 未找到构建产物: dist-${{ inputs.project }}"
            echo "🔍 可用的构建产物:"
            if echo "$ARTIFACTS_RESPONSE" | jq -e '.artifacts' >/dev/null 2>&1; then
              echo "$ARTIFACTS_RESPONSE" | jq -r '.artifacts[].name' 2>/dev/null || echo "无法解析构建产物名称"
            else
              echo "$ARTIFACTS_RESPONSE" | grep -o '"name":"[^"]*"' | head -10 || echo "无法解析构建产物"
            fi
            echo "available=false" >> $GITHUB_OUTPUT
            echo "info=构建产物不可用" >> $GITHUB_OUTPUT
            echo ""
            echo "🚨 构建产物验证失败，终止部署"
            echo "🔧 解决方案:"
            echo "1. 重新触发源仓库的构建工作流"
            echo "2. 检查构建产物名称是否正确"
            echo "3. 确认构建是否成功完成"
            exit 1
          fi

  # 步骤2: 解析部署密钥
  parse-secrets:
    needs: [validate-artifact]
    runs-on: ubuntu-latest
    outputs:
      server_host: ${{ steps.parse-secrets.outputs.server_host }}
      server_port: ${{ steps.parse-secrets.outputs.server_port }}
      server_user: ${{ steps.parse-secrets.outputs.server_user }}
      server_key: ${{ steps.parse-secrets.outputs.server_key }}
      deploy_center_pat: ${{ steps.parse-secrets.outputs.deploy_center_pat }}
    
    steps:
      - name: 解析部署密钥
        id: parse-secrets
        run: |
          echo "🔍 解析部署密钥..."
          
          # 从输入参数获取部署密钥
          DEPLOY_SECRETS='${{ inputs.deploy_secrets }}'
          
          # 检查是否为base64编码
          if echo "$DEPLOY_SECRETS" | base64 -d &>/dev/null; then
            echo "📦 检测到base64编码的部署密钥，正在解码..."
            DEPLOY_SECRETS=$(echo "$DEPLOY_SECRETS" | base64 -d)
          fi
          
          # 使用jq解析JSON配置
          if echo "$DEPLOY_SECRETS" | jq -e '.' >/dev/null 2>&1; then
            SERVER_HOST=$(echo "$DEPLOY_SECRETS" | jq -r '.SERVER_HOST // empty')
            SERVER_PORT=$(echo "$DEPLOY_SECRETS" | jq -r '.SERVER_PORT // empty')
            SERVER_USER=$(echo "$DEPLOY_SECRETS" | jq -r '.SERVER_USER // empty')
            SERVER_KEY=$(echo "$DEPLOY_SECRETS" | jq -r '.SERVER_KEY // empty')
            DEPLOY_CENTER_PAT=$(echo "$DEPLOY_SECRETS" | jq -r '.DEPLOY_CENTER_PAT // empty')
          else
            echo "🚨 无法解析部署密钥JSON格式"
            echo "🔍 部署密钥内容预览:"
            echo "$DEPLOY_SECRETS" | head -c 100
            exit 1
          fi
          
          # 验证必需参数
          if [ "$SERVER_HOST" = "null" ] || [ -z "$SERVER_HOST" ]; then
            echo "🚨 缺少必需的SERVER_HOST参数"
            exit 1
          fi
          if [ "$SERVER_PORT" = "null" ] || [ -z "$SERVER_PORT" ]; then
            echo "🚨 缺少必需的SERVER_PORT参数"
            exit 1
          fi
          if [ "$SERVER_USER" = "null" ] || [ -z "$SERVER_USER" ]; then
            echo "🚨 缺少必需的SERVER_USER参数"
            exit 1
          fi
          if [ "$SERVER_KEY" = "null" ] || [ -z "$SERVER_KEY" ]; then
            echo "🚨 缺少必需的SERVER_KEY参数"
            exit 1
          fi
          if [ "$DEPLOY_CENTER_PAT" = "null" ] || [ -z "$DEPLOY_CENTER_PAT" ]; then
            echo "🚨 缺少必需的DEPLOY_CENTER_PAT参数"
            exit 1
          fi
          
          # 设置输出 - 对于包含换行符的SERVER_KEY，使用多行输出语法
          echo "server_host=$SERVER_HOST" >> $GITHUB_OUTPUT
          echo "server_port=$SERVER_PORT" >> $GITHUB_OUTPUT
          echo "server_user=$SERVER_USER" >> $GITHUB_OUTPUT
          echo "deploy_center_pat=$DEPLOY_CENTER_PAT" >> $GITHUB_OUTPUT
          
          # 对于包含换行符的SERVER_KEY，使用多行输出语法
          {
            echo 'server_key<<EOF' >> $GITHUB_OUTPUT
            echo "$SERVER_KEY" >> $GITHUB_OUTPUT
            echo 'EOF' >> $GITHUB_OUTPUT
          }
          
          echo "✅ 部署密钥解析完成"
          echo "📋 服务器信息:"
          echo "- 主机: $SERVER_HOST"
          echo "- 端口: $SERVER_PORT"
          echo "- 用户: $SERVER_USER"
          echo "🔍 PAT调试信息:"
          echo "- PAT长度: $(echo "$DEPLOY_CENTER_PAT" | wc -c)"
          echo "- PAT是否为空: $([ -z "$DEPLOY_CENTER_PAT" ] && echo '是' || echo '否')"
          echo "- PAT是否为null: $([ "$DEPLOY_CENTER_PAT" = "null" ] && echo '是' || echo '否')"
          echo "- PAT前10个字符: ${DEPLOY_CENTER_PAT:0:10}..."

  # 步骤3: 服务器初始化（可选，使用可复用工作流）
  server-init:
    needs: [parse-secrets, validate-artifact]
    if: ${{ inputs.skip_init != 'true' }}
    uses: MoseLu/axi-deploy/.github/workflows/server-init.yml@master
    with:
      server_host: ${{ needs.parse-secrets.outputs.server_host }}
      server_user: ${{ needs.parse-secrets.outputs.server_user }}
      server_key: ${{ needs.parse-secrets.outputs.server_key }}
      server_port: ${{ needs.parse-secrets.outputs.server_port }}

  # 步骤4: 部署项目
  deploy-project:
    needs: [parse-secrets, validate-artifact]
    uses: MoseLu/axi-deploy/.github/workflows/deploy-project.yml@master
    with:
      project: ${{ inputs.project }}
      source_repo: ${{ inputs.source_repo }}
      run_id: ${{ needs.validate-artifact.outputs.run_id }}
      deploy_type: ${{ inputs.deploy_type }}
      server_host: ${{ needs.parse-secrets.outputs.server_host }}
      server_user: ${{ needs.parse-secrets.outputs.server_user }}
      server_key: ${{ needs.parse-secrets.outputs.server_key }}
      server_port: ${{ needs.parse-secrets.outputs.server_port }}
      deploy_center_pat: ${{ needs.parse-secrets.outputs.deploy_center_pat }}

  # 步骤5: 配置Nginx（可选）
  configure-nginx:
    needs: [deploy-project]
    if: ${{ inputs.nginx_config != '' }}
    uses: MoseLu/axi-deploy/.github/workflows/configure-nginx.yml@master
    with:
      project: ${{ inputs.project }}
      server_host: ${{ needs.parse-secrets.outputs.server_host }}
      server_user: ${{ needs.parse-secrets.outputs.server_user }}
      server_key: ${{ needs.parse-secrets.outputs.server_key }}
      server_port: ${{ needs.parse-secrets.outputs.server_port }}
      deploy_type: ${{ inputs.deploy_type }}
      nginx_config: ${{ inputs.nginx_config }}

  # 步骤6: 启动服务（可选，仅后端项目）
  start-service:
    needs: [deploy-project]
    if: ${{ inputs.start_cmd != '' && inputs.deploy_type == 'backend' }}
    uses: MoseLu/axi-deploy/.github/workflows/start-service.yml@master
    with:
      project: ${{ inputs.project }}
      start_cmd: ${{ inputs.start_cmd }}
      deploy_type: ${{ inputs.deploy_type }}
      server_host: ${{ needs.parse-secrets.outputs.server_host }}
      server_user: ${{ needs.parse-secrets.outputs.server_user }}
      server_key: ${{ needs.parse-secrets.outputs.server_key }}
      server_port: ${{ needs.parse-secrets.outputs.server_port }}

  # 步骤7: 测试网站（可选）
  test-website:
    needs: [deploy-project, configure-nginx, start-service]
    if: ${{ inputs.test_url != '' }}
    uses: MoseLu/axi-deploy/.github/workflows/test-website.yml@master
    with:
      project: ${{ inputs.project }}
      test_url: ${{ inputs.test_url }}
      deploy_type: ${{ inputs.deploy_type }}
      server_host: ${{ needs.parse-secrets.outputs.server_host }}
      server_user: ${{ needs.parse-secrets.outputs.server_user }}
      server_key: ${{ needs.parse-secrets.outputs.server_key }}
      server_port: ${{ needs.parse-secrets.outputs.server_port }}

  # 步骤8: 部署完成总结
  deployment-summary:
    needs: [parse-secrets, server-init, validate-artifact, deploy-project, configure-nginx, start-service, test-website]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: 部署完成总结
        run: |
          echo "🎉 部署流程完成"
          echo "=========================================="
          echo "📋 部署信息:"
          echo "- 项目: ${{ inputs.project }}"
          echo "- 部署类型: ${{ inputs.deploy_type }}"
          echo "- 源仓库: ${{ inputs.source_repo }}"
          echo "- 构建ID: ${{ inputs.run_id }}"
          echo ""
          echo "📊 执行状态:"
          echo "- 解析密钥: ${{ needs.parse-secrets.result }}"
          echo "- 服务器初始化: ${{ needs.server-init.result || 'skipped' }}"
          echo "- 验证构建产物: ${{ needs.validate-artifact.result }}"
          echo "- 部署项目: ${{ needs.deploy-project.result }}"
          echo "- 配置Nginx: ${{ needs.configure-nginx.result || 'skipped' }}"
          echo "- 启动服务: ${{ needs.start-service.result || 'skipped' }}"
          echo "- 测试网站: ${{ needs.test-website.result || 'skipped' }}"
          echo ""
          echo "🔗 访问信息:"
          echo "- 域名: redamancy.com.cn"
          if [ "${{ needs.deploy-project.outputs.deploy_path }}" != "" ]; then
            echo "- 项目路径: ${{ needs.deploy-project.outputs.deploy_path }}"
          fi
          if [ "${{ inputs.test_url }}" != "" ]; then
            echo "- 测试URL: ${{ inputs.test_url }}"
          fi
          echo ""
          echo "📝 部署完成通知:"
          echo "✅ 项目 ${{ inputs.project }} 已成功部署到服务器"
          if [ "${{ inputs.test_url }}" != "" ]; then
            echo "🌐 可通过 ${{ inputs.test_url }} 访问"
          fi
          echo "=========================================="