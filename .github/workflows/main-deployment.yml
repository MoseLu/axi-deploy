name: Main Deployment

description: "主部署工作流 - 整个部署流程的入口点"



on:
  workflow_dispatch:
    inputs:
      project:
        description: '项目名称'
        required: true
        type: string
      source_repo:
        description: '源仓库 (格式: owner/repo)'
        required: true
        type: string
      run_id:
        description: '构建运行ID'
        required: true
        type: string
      deploy_type:
        description: '部署类型'
        required: true
        default: 'static'
        type: choice
        options:
          - static
          - backend
      deploy_secrets:
        description: '部署密钥 (JSON格式或base64编码的JSON: {"SERVER_HOST":"host","SERVER_PORT":"port","SERVER_USER":"user","SERVER_KEY":"key","DEPLOY_CENTER_PAT":"pat"})，DEPLOY_CENTER_PAT可选，默认使用内置Token'
        required: true
        type: string
      deploy_config:
        description: '部署配置 (base64编码的JSON: {"nginx_config":"...","test_url":"...","start_cmd":"...","service_port":"...","mysql_config":"...","skip_init":false})'
        required: false
        type: string

jobs:
  # 步骤1: 验证构建产物可用性
  validate-artifact:
    uses: MoseLu/axi-deploy/.github/workflows/validate-artifact.yml@master
    with:
      # 项目名称
      project: ${{ inputs.project }}
      # 源仓库 (格式: owner/repo)
      source_repo: ${{ inputs.source_repo }}
      # 部署密钥 (JSON格式或base64编码的JSON)
      deploy_secrets: ${{ inputs.deploy_secrets }}

  # 步骤2: 解析部署密钥
  parse-secrets:
    needs: [validate-artifact]
    uses: MoseLu/axi-deploy/.github/workflows/parse-secrets.yml@master
    with:
      # 部署密钥 (JSON格式或base64编码的JSON)
      deploy_secrets: ${{ inputs.deploy_secrets }}

  # 步骤2.5: 解析部署配置
  parse-deploy-config:
    needs: [validate-artifact]
    runs-on: ubuntu-latest
    outputs:
      nginx_config: ${{ steps.parse-config.outputs.nginx_config }}
      test_url: ${{ steps.parse-config.outputs.test_url }}
      start_cmd: ${{ steps.parse-config.outputs.start_cmd }}
      service_port: ${{ steps.parse-config.outputs.service_port }}
      mysql_config: ${{ steps.parse-config.outputs.mysql_config }}
      skip_init: ${{ steps.parse-config.outputs.skip_init }}
    steps:
      - name: 解析部署配置
        id: parse-config
        run: |
          if [ -n "${{ inputs.deploy_config }}" ]; then
            echo "🔍 解析部署配置..."
            DEPLOY_CONFIG_JSON=$(echo "${{ inputs.deploy_config }}" | base64 -d)
            echo "📄 部署配置: $DEPLOY_CONFIG_JSON"
            
            # 提取各个参数
            NGINX_CONFIG=$(echo "$DEPLOY_CONFIG_JSON" | jq -r '.nginx_config // ""')
            TEST_URL=$(echo "$DEPLOY_CONFIG_JSON" | jq -r '.test_url // ""')
            START_CMD=$(echo "$DEPLOY_CONFIG_JSON" | jq -r '.start_cmd // ""')
            SERVICE_PORT=$(echo "$DEPLOY_CONFIG_JSON" | jq -r '.service_port // ""')
            MYSQL_CONFIG=$(echo "$DEPLOY_CONFIG_JSON" | jq -r '.mysql_config // ""')
            SKIP_INIT=$(echo "$DEPLOY_CONFIG_JSON" | jq -r '.skip_init // false')
            
            # 将 Nginx 配置转换为 base64 编码，避免多行文本问题
            if [ -n "$NGINX_CONFIG" ]; then
              NGINX_CONFIG_B64=$(echo "$NGINX_CONFIG" | base64 -w 0)
            else
              NGINX_CONFIG_B64=""
            fi
            
            echo "nginx_config=$NGINX_CONFIG_B64" >> $GITHUB_OUTPUT
            echo "test_url=$TEST_URL" >> $GITHUB_OUTPUT
            echo "start_cmd=$START_CMD" >> $GITHUB_OUTPUT
            echo "service_port=$SERVICE_PORT" >> $GITHUB_OUTPUT
            echo "mysql_config=$MYSQL_CONFIG" >> $GITHUB_OUTPUT
            echo "skip_init=$SKIP_INIT" >> $GITHUB_OUTPUT
            
            echo "✅ 部署配置解析完成"
          else
            echo "📋 未提供部署配置，使用默认值"
            echo "nginx_config=" >> $GITHUB_OUTPUT
            echo "test_url=" >> $GITHUB_OUTPUT
            echo "start_cmd=" >> $GITHUB_OUTPUT
            echo "service_port=" >> $GITHUB_OUTPUT
            echo "mysql_config=" >> $GITHUB_OUTPUT
            echo "skip_init=false" >> $GITHUB_OUTPUT
          fi

  # 步骤3: 服务器初始化（可选，使用可复用工作流）
  server-init:
    needs: [parse-secrets, validate-artifact, parse-deploy-config]
    if: ${{ needs.parse-deploy-config.outputs.skip_init != 'true' }}
    uses: MoseLu/axi-deploy/.github/workflows/server-init.yml@master
    with:
      # 服务器配置
      server_host: ${{ needs.parse-secrets.outputs.server_host }}
      server_user: ${{ needs.parse-secrets.outputs.server_user }}
      server_key: ${{ needs.parse-secrets.outputs.server_key }}
      server_port: ${{ needs.parse-secrets.outputs.server_port }}


  # 步骤4: 动态端口分配（仅后端项目）
  dynamic-port-allocation:
    needs: [parse-secrets, validate-artifact, parse-deploy-config]
    if: ${{ inputs.deploy_type == 'backend' }}
    uses: ./.github/workflows/dynamic-port-allocation.yml
    with:
      # 项目名称
      project: ${{ inputs.project }}
      # 服务器配置
      server_host: ${{ needs.parse-secrets.outputs.server_host }}
      server_user: ${{ needs.parse-secrets.outputs.server_user }}
      server_key: ${{ needs.parse-secrets.outputs.server_key }}
      server_port: ${{ needs.parse-secrets.outputs.server_port }}
      # 端口范围
      port_range_start: "8080"
      port_range_end: "10000"
      # 首选端口（从配置中获取）
      preferred_port: ${{ needs.parse-deploy-config.outputs.service_port || '' }}

  # 步骤5: 部署项目
  deploy-project:
    needs: [parse-secrets, validate-artifact, parse-deploy-config, dynamic-port-allocation]
    uses: MoseLu/axi-deploy/.github/workflows/deploy-project.yml@master
    with:
      # 项目名称
      project: ${{ inputs.project }}
      # 源仓库 (格式: owner/repo)
      source_repo: ${{ inputs.source_repo }}
      # 构建运行ID
      run_id: ${{ needs.validate-artifact.outputs.run_id }}
      # 部署类型 (backend/static)
      deploy_type: ${{ inputs.deploy_type }}
      # 服务器配置
      server_host: ${{ needs.parse-secrets.outputs.server_host }}
      server_user: ${{ needs.parse-secrets.outputs.server_user }}
      server_key: ${{ needs.parse-secrets.outputs.server_key }}
      server_port: ${{ needs.parse-secrets.outputs.server_port }}
      # GitHub Token (可选)
      deploy_center_pat: ${{ needs.parse-secrets.outputs.deploy_center_pat || '' }}
      # MySQL 配置（可选）
      mysql_config: ${{ needs.parse-deploy-config.outputs.mysql_config || '' }}

  # 步骤5: 配置Nginx（可选）
  configure-nginx:
    needs: [parse-secrets, deploy-project, parse-deploy-config]
    if: ${{ needs.parse-deploy-config.outputs.nginx_config != '' }}
    uses: MoseLu/axi-deploy/.github/workflows/configure-nginx.yml@master
    with:
      # 项目名称
      project: ${{ inputs.project }}
      # 服务器配置
      server_host: ${{ needs.parse-secrets.outputs.server_host }}
      server_user: ${{ needs.parse-secrets.outputs.server_user }}
      server_key: ${{ needs.parse-secrets.outputs.server_key }}
      server_port: ${{ needs.parse-secrets.outputs.server_port }}
      # 部署类型
      deploy_type: ${{ inputs.deploy_type }}
      # Nginx配置
      nginx_config: ${{ needs.parse-deploy-config.outputs.nginx_config }}

  # 步骤6: 启动服务（可选，仅后端项目）
  start-service:
    needs: [parse-secrets, deploy-project, configure-nginx, parse-deploy-config, dynamic-port-allocation]
    if: ${{ needs.parse-deploy-config.outputs.start_cmd != '' && inputs.deploy_type == 'backend' }}
    uses: MoseLu/axi-deploy/.github/workflows/start-service.yml@master
    with:
      # 项目名称
      project: ${{ inputs.project }}
      # 启动命令
      start_cmd: ${{ needs.parse-deploy-config.outputs.start_cmd }}
      # 部署类型
      deploy_type: ${{ inputs.deploy_type }}
      # 服务端口（优先使用动态分配的端口）
      service_port: ${{ needs.dynamic-port-allocation.outputs.allocated_port || needs.parse-deploy-config.outputs.service_port || '' }}
      # 服务器配置
      server_host: ${{ needs.parse-secrets.outputs.server_host }}
      server_user: ${{ needs.parse-secrets.outputs.server_user }}
      server_key: ${{ needs.parse-secrets.outputs.server_key }}
      server_port: ${{ needs.parse-secrets.outputs.server_port }}

  # 步骤7: 测试网站 - 静态项目（可选）
  test-website-static:
    needs: [parse-secrets, deploy-project, configure-nginx, parse-deploy-config]
    if: ${{ needs.parse-deploy-config.outputs.test_url != '' && inputs.deploy_type == 'static' }}
    uses: MoseLu/axi-deploy/.github/workflows/test-website.yml@master
    with:
      # 项目名称
      project: ${{ inputs.project }}
      # 测试URL
      test_url: ${{ needs.parse-deploy-config.outputs.test_url }}
      # 部署类型
      deploy_type: ${{ inputs.deploy_type }}
      # 服务器配置
      server_host: ${{ needs.parse-secrets.outputs.server_host }}
      server_user: ${{ needs.parse-secrets.outputs.server_user }}
      server_key: ${{ needs.parse-secrets.outputs.server_key }}
      server_port: ${{ needs.parse-secrets.outputs.server_port }}
      # 部署路径配置
      apps_root: "/srv/apps"
      static_root: "/srv/static"
      nginx_conf_dir: "/www/server/nginx/conf/conf.d/redamancy"

  # 步骤8: 测试网站 - 后端项目（可选）
  test-website-backend:
    needs: [parse-secrets, deploy-project, configure-nginx, start-service, parse-deploy-config]
    if: ${{ needs.parse-deploy-config.outputs.test_url != '' && inputs.deploy_type == 'backend' }}
    uses: MoseLu/axi-deploy/.github/workflows/test-website.yml@master
    with:
      # 项目名称
      project: ${{ inputs.project }}
      # 测试URL
      test_url: ${{ needs.parse-deploy-config.outputs.test_url }}
      # 部署类型
      deploy_type: ${{ inputs.deploy_type }}
      # 服务器配置
      server_host: ${{ needs.parse-secrets.outputs.server_host }}
      server_user: ${{ needs.parse-secrets.outputs.server_user }}
      server_key: ${{ needs.parse-secrets.outputs.server_key }}
      server_port: ${{ needs.parse-secrets.outputs.server_port }}
      # 部署路径配置
      apps_root: "/srv/apps"
      static_root: "/srv/static"
      nginx_conf_dir: "/www/server/nginx/conf/conf.d/redamancy"

  # 步骤9: 部署完成总结
  deployment-summary:
    needs: [parse-secrets, server-init, validate-artifact, deploy-project, configure-nginx, start-service, test-website-static, test-website-backend, parse-deploy-config]
    if: always()
    uses: MoseLu/axi-deploy/.github/workflows/deployment-summary.yml@master
    with:
      # 项目信息
      project: ${{ inputs.project }}
      deploy_type: ${{ inputs.deploy_type }}
      source_repo: ${{ inputs.source_repo }}
      run_id: ${{ inputs.run_id }}
      # 测试信息
      test_url: ${{ needs.parse-deploy-config.outputs.test_url }}
      # 部署路径
      deploy_path: ${{ needs.deploy-project.outputs.deploy_path || '' }}
      # 各步骤执行结果
      parse_secrets_result: ${{ needs.parse-secrets.result }}
      server_init_result: ${{ needs.server-init.result || '' }}
      validate_artifact_result: ${{ needs.validate-artifact.result }}
      deploy_project_result: ${{ needs.deploy-project.result }}
      configure_nginx_result: ${{ needs.configure-nginx.result || '' }}
      start_service_result: ${{ needs.start-service.result || '' }}
      test_website_static_result: ${{ needs.test-website-static.result || '' }}
      test_website_backend_result: ${{ needs.test-website-backend.result || '' }}