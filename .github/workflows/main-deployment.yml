name: Main Deployment

description: "主部署工作流 - 整个部署流程的入口点"

on:
  workflow_dispatch:
    inputs:
      project:
        description: '项目名称'
        required: true
        type: string
      source_repo:
        description: '源仓库 (格式: owner/repo)'
        required: true
        type: string
      run_id:
        description: '构建运行ID'
        required: true
        type: string
      deploy_type:
        description: '部署类型'
        required: true
        default: 'static'
        type: choice
        options:
          - static
          - backend
      nginx_config:
        description: 'Nginx配置（可选）'
        required: false
        type: string
      start_cmd:
        description: '启动命令（后端项目）'
        required: false
        type: string
      server_host:
        description: '服务器地址'
        required: true
        type: string
      server_user:
        description: '服务器用户'
        required: true
        type: string
      server_key:
        description: '服务器密钥'
        required: true
        type: string
      server_port:
        description: '服务器端口'
        required: true
        type: string

jobs:
  download-artifact:
    runs-on: ubuntu-latest
    outputs:
      artifact_path: ${{ steps.set-outputs.outputs.artifact_path }}
      artifact_size: ${{ steps.set-outputs.outputs.artifact_size }}
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 下载构建产物
        id: download
        uses: dawidd6/action-download-artifact@v2
        with:
          name: dist-${{ inputs.project }}
          path: ./
          repo: ${{ inputs.source_repo }}
          workflow: ${{ inputs.project }}_deploy.yml
          run_id: ${{ inputs.run_id }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: 验证构建产物
        run: |
          echo "🔍 验证构建产物..."
          
          # 检查可能的构建产物目录
          if [ -d "./dist" ]; then
            ARTIFACT_DIR="./dist"
          elif [ -d "./dist-${{ inputs.project }}" ]; then
            ARTIFACT_DIR="./dist-${{ inputs.project }}"
          elif [ -d "./docs/.vitepress/dist" ]; then
            ARTIFACT_DIR="./docs/.vitepress/dist"
          else
            # 构建产物直接在当前目录
            ARTIFACT_DIR="."
            echo "📁 构建产物直接在当前目录"
          fi
          
          echo "📁 构建产物目录: $ARTIFACT_DIR"
          echo "📁 构建产物目录内容:"
          ls -la "$ARTIFACT_DIR/"
          
          # 检查是否有文件
          FILE_COUNT=$(find "$ARTIFACT_DIR" -type f | wc -l)
          if [ "$FILE_COUNT" -eq 0 ]; then
            echo "❌ 构建产物目录为空"
            exit 1
          fi
          
          echo "✅ 构建产物验证通过"
          echo "📊 文件数量: $FILE_COUNT"

      - name: 设置输出
        id: set-outputs
        run: |
          # 确定构建产物路径
          if [ -d "./dist" ]; then
            ARTIFACT_PATH="./dist"
          elif [ -d "./dist-${{ inputs.project }}" ]; then
            ARTIFACT_PATH="./dist-${{ inputs.project }}"
          elif [ -d "./docs/.vitepress/dist" ]; then
            ARTIFACT_PATH="./docs/.vitepress/dist"
          else
            # 构建产物直接在当前目录
            ARTIFACT_PATH="."
          fi
          
          echo "artifact_path=$ARTIFACT_PATH" >> $GITHUB_OUTPUT
          echo "artifact_size=$(du -sb $ARTIFACT_PATH | cut -f1)" >> $GITHUB_OUTPUT
          echo "✅ 输出已设置"
          echo "构建产物路径: $ARTIFACT_PATH"

  upload-files:
    needs: download-artifact
    runs-on: ubuntu-latest
    outputs:
      upload_success: ${{ steps.set-outputs.outputs.upload_success }}
      temp_dir: ${{ steps.set-outputs.outputs.temp_dir }}
    
    steps:
      - name: 创建临时目录
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ inputs.server_host }}
          username: ${{ inputs.server_user }}
          key: ${{ inputs.server_key }}
          port: ${{ inputs.server_port }}
          script: |
            echo "📁 创建临时目录..."
            
            PROJECT="${{ inputs.project }}"
            RUN_USER="deploy"
            
            # 创建临时目录
            TEMP_DIR="/tmp/deploy-$PROJECT"
            echo "📁 创建临时目录: $TEMP_DIR"
            sudo mkdir -p "$TEMP_DIR"
            sudo chown $RUN_USER:$RUN_USER "$TEMP_DIR"
            
            echo "✅ 临时目录已创建: $TEMP_DIR"

      - name: 调试构建产物路径
        run: |
          echo "🔍 调试构建产物路径..."
          echo "当前工作目录: $(pwd)"
          echo "构建产物路径: ${{ needs.download-artifact.outputs.artifact_path }}"
          echo "构建产物大小: ${{ needs.download-artifact.outputs.artifact_size }}"
          
          echo "📁 当前目录内容:"
          ls -la ./
          
          echo "📁 构建产物目录内容:"
          if [ -d "${{ needs.download-artifact.outputs.artifact_path }}" ]; then
            ls -la "${{ needs.download-artifact.outputs.artifact_path }}/"
            echo "📊 文件统计:"
            find "${{ needs.download-artifact.outputs.artifact_path }}" -type f | wc -l
          else
            echo "❌ 构建产物目录不存在: ${{ needs.download-artifact.outputs.artifact_path }}"
          fi

      - name: 上传构建产物
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ inputs.server_host }}
          username: ${{ inputs.server_user }}
          key: ${{ inputs.server_key }}
          port: ${{ inputs.server_port }}
          source: "${{ github.workspace }}/${{ needs.download-artifact.outputs.artifact_path }}/*"
          target: "/tmp/deploy-${{ inputs.project }}/"

      - name: 验证上传结果
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ inputs.server_host }}
          username: ${{ inputs.server_user }}
          key: ${{ inputs.server_key }}
          port: ${{ inputs.server_port }}
          script: |
            echo "🔍 验证上传结果..."
            
            PROJECT="${{ inputs.project }}"
            TEMP_DIR="/tmp/deploy-$PROJECT"
            
            if [ -d "$TEMP_DIR" ]; then
              echo "✅ 临时目录存在: $TEMP_DIR"
              echo "📁 临时目录内容:"
              ls -la "$TEMP_DIR/"
              
              # 检查文件数量
              FILE_COUNT=$(find "$TEMP_DIR" -type f | wc -l)
              echo "📊 文件数量: $FILE_COUNT"
              
              if [ "$FILE_COUNT" -gt 0 ]; then
                echo "✅ 文件上传验证通过"
              else
                echo "❌ 临时目录为空，检查是否有压缩文件..."
                
                # 查找压缩文件
                ZIP_FILES=$(find "$TEMP_DIR" -name "*.zip" -type f)
                TAR_FILES=$(find "$TEMP_DIR" -name "*.tar.gz" -o -name "*.tgz" -type f)
                TAR_FILES_2=$(find "$TEMP_DIR" -name "*.tar" -type f)
                
                if [ -n "$ZIP_FILES" ] || [ -n "$TAR_FILES" ] || [ -n "$TAR_FILES_2" ]; then
                  echo "📦 发现压缩文件，需要解压"
                  echo "ZIP文件: $ZIP_FILES"
                  echo "TAR文件: $TAR_FILES $TAR_FILES_2"
                else
                  echo "❌ 没有找到任何文件或压缩文件"
                  exit 1
                fi
              fi
            else
              echo "❌ 临时目录不存在: $TEMP_DIR"
              echo "📁 /tmp 目录内容:"
              ls -la /tmp/ | grep "$PROJECT" || echo "没有找到项目相关目录"
              exit 1
            fi

      - name: 解压构建产物
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ inputs.server_host }}
          username: ${{ inputs.server_user }}
          key: ${{ inputs.server_key }}
          port: ${{ inputs.server_port }}
          script: |
            echo "📦 解压构建产物..."
            
            PROJECT="${{ inputs.project }}"
            TEMP_DIR="/tmp/deploy-$PROJECT"
            
            echo "📁 检查临时目录内容..."
            ls -la "$TEMP_DIR/"
            
            # 查找压缩文件并解压
            cd "$TEMP_DIR"
            
            # 查找zip文件
            ZIP_FILES=$(find . -name "*.zip" -type f)
            if [ -n "$ZIP_FILES" ]; then
              echo "📦 发现zip文件，正在解压..."
              for zip_file in $ZIP_FILES; do
                echo "📦 解压: $zip_file"
                unzip -o "$zip_file" -d .
                rm -f "$zip_file"
              done
            fi
            
            # 查找tar.gz文件
            TAR_FILES=$(find . -name "*.tar.gz" -o -name "*.tgz" -type f)
            if [ -n "$TAR_FILES" ]; then
              echo "📦 发现tar.gz文件，正在解压..."
              for tar_file in $TAR_FILES; do
                echo "📦 解压: $tar_file"
                tar -xzf "$tar_file"
                rm -f "$tar_file"
              done
            fi
            
            # 查找tar文件
            TAR_FILES=$(find . -name "*.tar" -type f)
            if [ -n "$TAR_FILES" ]; then
              echo "📦 发现tar文件，正在解压..."
              for tar_file in $TAR_FILES; do
                echo "📦 解压: $tar_file"
                tar -xf "$tar_file"
                rm -f "$tar_file"
              done
            fi
            
            echo "📁 解压后的目录内容:"
            ls -la "$TEMP_DIR/"
            
            echo "✅ 解压完成"

      - name: 设置输出
        id: set-outputs
        run: |
          echo "upload_success=true" >> $GITHUB_OUTPUT
          echo "temp_dir=/tmp/deploy-${{ inputs.project }}" >> $GITHUB_OUTPUT
          echo "✅ 上传完成"

  deploy-project:
    needs: upload-files
    runs-on: ubuntu-latest
    outputs:
      deploy_success: ${{ steps.set-outputs.outputs.deploy_success }}
      deploy_path: ${{ steps.set-outputs.outputs.deploy_path }}
    
    steps:
      - name: 部署项目
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ inputs.server_host }}
          username: ${{ inputs.server_user }}
          key: ${{ inputs.server_key }}
          port: ${{ inputs.server_port }}
          script: |
            echo "🚀 部署项目..."
            
            PROJECT="${{ inputs.project }}"
            DEPLOY_TYPE="${{ inputs.deploy_type }}"
            RUN_USER="deploy"
            APPS_ROOT="/srv/apps"
            STATIC_ROOT="/srv/static"
            BACKUP_ROOT="/srv/backups"
            TEMP_DIR="/tmp/deploy-$PROJECT"
            
            # 确定部署路径
            if [ "$DEPLOY_TYPE" = "backend" ]; then
              DEPLOY_PATH="$APPS_ROOT/$PROJECT"
            else
              DEPLOY_PATH="$STATIC_ROOT/$PROJECT"
            fi
            
            echo "📁 部署路径: $DEPLOY_PATH"
            
            # 备份现有部署
            if [ -d "$DEPLOY_PATH" ]; then
              echo "📋 备份现有部署..."
              
              # 创建项目专用备份目录
              PROJECT_BACKUP_DIR="$BACKUP_ROOT/$PROJECT"
              echo "📁 创建项目备份目录: $PROJECT_BACKUP_DIR"
              sudo mkdir -p "$PROJECT_BACKUP_DIR"
              sudo chmod 755 "$PROJECT_BACKUP_DIR"
              
              # 备份现有部署
              BACKUP_FILE="$PROJECT_BACKUP_DIR/backup-$(date +%Y%m%d_%H%M%S)"
              sudo cp -r "$DEPLOY_PATH" "$BACKUP_FILE"
              echo "✅ 现有部署已备份到: $BACKUP_FILE"
              
              # 清理旧的备份文件，只保留最近2个
              echo "🧹 清理旧的备份文件..."
              BACKUP_FILES=$(ls -t "$PROJECT_BACKUP_DIR"/backup-* 2>/dev/null | tail -n +3)
              if [ -n "$BACKUP_FILES" ]; then
                echo "🗑️ 删除旧的备份文件:"
                echo "$BACKUP_FILES" | xargs -r sudo rm -rf
                echo "✅ 旧备份文件已清理，保留最近2个备份"
              else
                echo "📋 没有需要清理的旧备份文件"
              fi
            else
              echo "📋 没有找到现有部署: $DEPLOY_PATH"
            fi
            
            # 部署新文件
            echo "📦 部署新文件..."
            sudo mkdir -p "$(dirname $DEPLOY_PATH)"
            sudo rm -rf "$DEPLOY_PATH"
            
            # 检查临时目录的内容结构
            echo "📁 检查临时目录内容结构..."
            ls -la "$TEMP_DIR/"
            
            # 查找实际的构建产物文件
            if [ -d "$TEMP_DIR/github" ]; then
              echo "📁 发现github子目录，检查其内容..."
              ls -la "$TEMP_DIR/github/"
              
              if [ -d "$TEMP_DIR/github/workspace" ]; then
                echo "📁 发现workspace子目录，检查其内容..."
                ls -la "$TEMP_DIR/github/workspace/"
                
                # 在workspace中查找构建产物
                if [ -d "$TEMP_DIR/github/workspace/dist" ]; then
                  echo "📁 发现dist目录，这是构建产物"
                  sudo mv "$TEMP_DIR/github/workspace/dist" "$DEPLOY_PATH"
                elif [ -d "$TEMP_DIR/github/workspace/docs/.vitepress/dist" ]; then
                  echo "📁 发现docs/.vitepress/dist目录，这是构建产物"
                  sudo mv "$TEMP_DIR/github/workspace/docs/.vitepress/dist" "$DEPLOY_PATH"
                else
                  echo "📁 没有找到构建产物目录，使用整个workspace"
                  sudo mv "$TEMP_DIR/github/workspace" "$DEPLOY_PATH"
                fi
              else
                echo "📁 没有workspace子目录，检查github目录内容..."
                if [ -d "$TEMP_DIR/github/dist" ]; then
                  echo "📁 发现dist目录，这是构建产物"
                  sudo mv "$TEMP_DIR/github/dist" "$DEPLOY_PATH"
                elif [ -d "$TEMP_DIR/github/docs/.vitepress/dist" ]; then
                  echo "📁 发现docs/.vitepress/dist目录，这是构建产物"
                  sudo mv "$TEMP_DIR/github/docs/.vitepress/dist" "$DEPLOY_PATH"
                else
                  echo "📁 没有找到构建产物目录，使用整个github目录"
                  sudo mv "$TEMP_DIR/github" "$DEPLOY_PATH"
                fi
              fi
            else
              echo "📁 没有github子目录，检查临时目录内容..."
              if [ -d "$TEMP_DIR/dist" ]; then
                echo "📁 发现dist目录，这是构建产物"
                sudo mv "$TEMP_DIR/dist" "$DEPLOY_PATH"
              elif [ -d "$TEMP_DIR/docs/.vitepress/dist" ]; then
                echo "📁 发现docs/.vitepress/dist目录，这是构建产物"
                sudo mv "$TEMP_DIR/docs/.vitepress/dist" "$DEPLOY_PATH"
              else
                echo "📁 没有找到构建产物目录，使用整个临时目录"
                sudo mv "$TEMP_DIR" "$DEPLOY_PATH"
              fi
            fi
            
            sudo chown -R $RUN_USER:$RUN_USER "$DEPLOY_PATH"
            
            echo "✅ 部署完成"

      - name: 设置输出
        id: set-outputs
        run: |
          echo "deploy_success=true" >> $GITHUB_OUTPUT
          echo "deploy_path=/srv/${{ inputs.deploy_type == 'backend' && 'apps' || 'static' }}/${{ inputs.project }}" >> $GITHUB_OUTPUT
          echo "✅ 部署完成"

  configure-nginx:
    needs: deploy-project
    uses: ./.github/workflows/configure-nginx.yml
    with:
      project: ${{ inputs.project }}
      nginx_config: ${{ inputs.nginx_config }}
      server_host: ${{ inputs.server_host }}
      server_user: ${{ inputs.server_user }}
      server_key: ${{ inputs.server_key }}
      server_port: ${{ inputs.server_port }}
      deploy_type: ${{ inputs.deploy_type }}

  start-service:
    needs: [deploy-project]
    if: ${{ inputs.start_cmd != '' && inputs.deploy_type == 'backend' }}
    runs-on: ubuntu-latest
    outputs:
      start_success: ${{ steps.set-outputs.outputs.start_success }}
    
    steps:
      - name: 启动服务
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ inputs.server_host }}
          username: ${{ inputs.server_user }}
          key: ${{ inputs.server_key }}
          port: ${{ inputs.server_port }}
          script: |
            echo "🚀 启动服务..."
            
            PROJECT="${{ inputs.project }}"
            START_CMD="${{ inputs.start_cmd }}"
            APPS_ROOT="/srv/apps"
            
            # 切换到项目目录
            cd "$APPS_ROOT/$PROJECT"
            
            # 执行启动命令
            echo "📋 执行启动命令: $START_CMD"
            $START_CMD
            
            # 等待服务启动
            sleep 5
            
            echo "✅ 服务启动完成"

      - name: 设置输出
        id: set-outputs
        run: |
          echo "start_success=true" >> $GITHUB_OUTPUT
          echo "✅ 启动完成"

  test-website:
    needs: [deploy-project, configure-nginx, start-service]
    if: always()
    runs-on: ubuntu-latest
    outputs:
      test_success: ${{ steps.set-outputs.outputs.test_success }}
    
    steps:
      - name: 测试网站可访问性
        run: |
          echo "🔍 测试网站可访问性..."
          
          # 等待一段时间让服务完全启动
          sleep 10
          
          # 测试网站可访问性
          HTTP_STATUS=$(curl -f -s -o /dev/null -w "%{http_code}" https://redamancy.com.cn/docs/ 2>/dev/null || echo "000")
          echo "📋 HTTP状态码: $HTTP_STATUS"
          
          if [ "$HTTP_STATUS" = "200" ] || [ "$HTTP_STATUS" = "301" ] || [ "$HTTP_STATUS" = "302" ]; then
            echo "✅ 网站可正常访问"
          else
            echo "❌ 网站无法访问，HTTP状态码: $HTTP_STATUS"
            echo "🚨 工作流错误：网站返回 $HTTP_STATUS 状态码，这表示配置有问题"
            echo "可能的原因:"
            echo "1. Nginx配置错误"
            echo "2. 文件权限问题"
            echo "3. 路径不存在"
            echo "4. SSL证书问题"
            exit 1
          fi

      - name: 设置输出
        id: set-outputs
        run: |
          echo "test_success=true" >> $GITHUB_OUTPUT
          echo "✅ 测试完成"



  deployment-summary:
    needs: [download-artifact, upload-files, deploy-project, configure-nginx, start-service, test-website]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: 部署完成总结
        run: |
          echo "🎉 部署流程完成"
          echo "=========================================="
          echo "📋 部署信息:"
          echo "- 项目: ${{ inputs.project }}"
          echo "- 部署类型: ${{ inputs.deploy_type }}"
          echo "- 源仓库: ${{ inputs.source_repo }}"
          echo "- 构建ID: ${{ inputs.run_id }}"
          echo ""
          echo "📊 执行状态:"
          echo "- 下载构建产物: ${{ needs.download-artifact.result }}"
          echo "- 上传文件: ${{ needs.upload-files.result }}"
          echo "- 部署项目: ${{ needs.deploy-project.result }}"
          echo "- 配置Nginx: ${{ needs.configure-nginx.result || 'skipped' }}"
          echo "- 启动服务: ${{ needs.start-service.result || 'skipped' }}"
          echo "- 测试网站: ${{ needs.test-website.result || 'skipped' }}"
          echo ""
          echo "🔗 访问信息:"
          echo "- 域名: redamancy.com.cn"
          echo "- 项目路径: ${{ needs.deploy-project.outputs.deploy_path }}"
          echo "- 访问URL: https://redamancy.com.cn/docs/"
          echo ""
          echo "📝 部署完成通知:"
          echo "✅ 项目 ${{ inputs.project }} 已成功部署到服务器"
          echo "🌐 可通过 https://redamancy.com.cn/docs/ 访问"
          echo "=========================================="