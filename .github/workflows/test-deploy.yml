name: Test Deployment

on:
  workflow_dispatch:
    inputs:
      project:
        description: '项目名称'
        required: true
        type: string
        default: 'axi-docs'
      deploy_path:
        description: '部署路径'
        required: true
        type: string
        default: '/www/wwwroot/axi-docs'
      test_url:
        description: '测试URL'
        required: false
        type: string
        default: 'https://docs.axiom.top'

jobs:
  test-deployment:
    runs-on: ubuntu-latest
    steps:
      - name: 检查服务器部署状态
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          port: ${{ secrets.SERVER_PORT }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_KEY }}
          script: |
            echo "🔍 检查部署状态..."
            echo "项目: ${{ github.event.inputs.project }}"
            echo "部署路径: ${{ github.event.inputs.deploy_path }}"
            echo "检查时间: $(date)"
            echo ""
            
            # 检查目录是否存在
            if [ -d "${{ github.event.inputs.deploy_path }}" ]; then
              echo "✅ 部署目录存在"
              echo "📁 目录内容:"
              ls -la "${{ github.event.inputs.deploy_path }}"
              echo ""
              
              # 检查关键文件
              echo "🔑 关键文件检查:"
              if [ -f "${{ github.event.inputs.deploy_path }}/index.html" ]; then
                echo "✅ index.html 存在"
                echo "   大小: $(du -h "${{ github.event.inputs.deploy_path }}/index.html" | cut -f1)"
                echo "   修改时间: $(stat -c %y "${{ github.event.inputs.deploy_path }}/index.html")"
              else
                echo "❌ index.html 不存在"
              fi
              
              if [ -d "${{ github.event.inputs.deploy_path }}/assets" ]; then
                echo "✅ assets 目录存在"
                echo "   文件数量: $(find "${{ github.event.inputs.deploy_path }}/assets" -type f | wc -l)"
              else
                echo "❌ assets 目录不存在"
              fi
              
              echo ""
              
              # 检查 Nginx 配置
              echo "🌐 Nginx 配置检查:"
              if command -v nginx &> /dev/null; then
                echo "✅ Nginx 已安装"
                nginx -t 2>&1 | head -5
              else
                echo "❌ Nginx 未安装"
              fi
              
              echo ""
              
              # 检查端口监听
              echo "🔌 端口监听检查:"
              netstat -tlnp | grep :80 || echo "❌ 80端口未监听"
              
            else
              echo "❌ 部署目录不存在: ${{ github.event.inputs.deploy_path }}"
            fi

      - name: 测试网站可访问性
        if: ${{ github.event.inputs.test_url != '' }}
        run: |
          echo "🌐 测试网站可访问性..."
          echo "测试URL: ${{ github.event.inputs.test_url }}"
          
          # 使用curl测试网站响应
          response=$(curl -s -o /dev/null -w "%{http_code}" "${{ github.event.inputs.test_url }}" || echo "000")
          
          if [ "$response" = "200" ]; then
            echo "✅ 网站可正常访问 (HTTP $response)"
          else
            echo "❌ 网站无法访问 (HTTP $response)"
            echo "可能的原因:"
            echo "1. 域名解析问题"
            echo "2. 服务器防火墙设置"
            echo "3. Nginx配置问题"
            echo "4. SSL证书问题"
          fi
          
          # 获取网站标题
          title=$(curl -s "${{ github.event.inputs.test_url }}" | grep -o '<title>[^<]*</title>' | sed 's/<title>\(.*\)<\/title>/\1/' || echo "无法获取标题")
          echo "网站标题: $title"

      - name: 生成测试报告
        run: |
          echo "📊 部署测试报告"
          echo "=================="
          echo "测试时间: $(date)"
          echo "项目名称: ${{ github.event.inputs.project }}"
          echo "部署路径: ${{ github.event.inputs.deploy_path }}"
          echo "测试URL: ${{ github.event.inputs.test_url }}"
          echo ""
          echo "✅ 测试完成！"
          echo "如果看到此消息，说明测试流程正常运行" 