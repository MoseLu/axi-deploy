name: Deploy Dispatch

on:
  workflow_dispatch:
    inputs:
      # 调用方信息
      caller_repo:
        description: '调用方仓库名称'
        required: true
        type: string
      caller_branch:
        description: '调用方分支名称'
        required: true
        type: string
      caller_commit:
        description: '调用方提交哈希'
        required: true
        type: string
      
      # 部署配置
      source_path:
        description: '本地文件路径'
        required: false
        type: string
        default: './dist'
      target_path:
        description: '远程目标路径'
        required: false
        type: string
        default: '/www/wwwroot'
      commands:
        description: '部署后执行的命令'
        required: false
        type: string
      exclude_files:
        description: '排除的文件/目录'
        required: false
        type: string
      timeout:
        description: 'SSH连接超时时间(秒)'
        required: false
        type: string
        default: '300'
  workflow_call:
    inputs:
      caller_repo:
        description: '调用方仓库名称'
        required: true
        type: string
      caller_branch:
        description: '调用方分支名称'
        required: true
        type: string
      caller_commit:
        description: '调用方提交哈希'
        required: true
        type: string
      source_path:
        description: '本地文件路径'
        required: false
        type: string
        default: './dist'
      target_path:
        description: '远程目标路径'
        required: false
        type: string
        default: '/www/wwwroot'
      commands:
        description: '部署后执行的命令'
        required: false
        type: string
      exclude_files:
        description: '排除的文件/目录'
        required: false
        type: string
      timeout:
        description: 'SSH连接超时时间(秒)'
        required: false
        type: string
        default: '300'

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    
    steps:
      - name: 显示部署信息
        run: |
          echo "🚀 开始部署"
          echo "调用方仓库: ${{ github.event.inputs.caller_repo }}"
          echo "调用方分支: ${{ github.event.inputs.caller_branch }}"
          echo "调用方提交: ${{ github.event.inputs.caller_commit }}"
          echo "源路径: ${{ github.event.inputs.source_path }}"
          echo "目标路径: ${{ github.event.inputs.target_path }}"
          echo "部署时间: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
        
      - name: 设置SSH环境
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SERVER_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # 配置SSH选项，跳过主机密钥验证
          cat > ~/.ssh/config << EOF
          Host ${{ secrets.SERVER_HOST }}
            HostName ${{ secrets.SERVER_HOST }}
            Port ${{ secrets.SERVER_PORT }}
            User ${{ secrets.SERVER_USER }}
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null
          EOF
          chmod 600 ~/.ssh/config
          
      - name: 测试SSH连接
        run: |
          echo "🔍 测试SSH连接..."
          echo "服务器: ${{ secrets.SERVER_HOST }}"
          echo "端口: ${{ secrets.SERVER_PORT }}"
          echo "用户: ${{ secrets.SERVER_USER }}"
          
          ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "echo '✅ SSH连接测试成功'"
          
      - name: 创建远程目录
        run: |
          echo "📁 创建远程目录: ${{ github.event.inputs.target_path }}"
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "mkdir -p ${{ github.event.inputs.target_path }}"
          
      - name: 传输文件
        if: github.event.inputs.source_path != ''
        run: |
          echo "📤 开始传输文件..."
          echo "源路径: ${{ github.event.inputs.source_path }}"
          echo "目标路径: ${{ github.event.inputs.target_path }}"
          
          # 构建rsync排除参数
          EXCLUDE_PARAMS=""
          if [ -n "${{ github.event.inputs.exclude_files }}" ]; then
            IFS=',' read -ra EXCLUDE_FILES <<< "${{ github.event.inputs.exclude_files }}"
            for file in "${EXCLUDE_FILES[@]}"; do
              EXCLUDE_PARAMS="$EXCLUDE_PARAMS --exclude=$file"
            done
          fi
          
          # 使用rsync传输文件
          rsync -avz --delete $EXCLUDE_PARAMS \
            -e "ssh -o StrictHostKeyChecking=no -p ${{ secrets.SERVER_PORT }}" \
            "${{ github.event.inputs.source_path }}/" \
            "${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:${{ github.event.inputs.target_path }}/"
            
          echo "✅ 文件传输完成"
            
      - name: 执行部署命令
        if: github.event.inputs.commands != ''
        run: |
          echo "⚙️ 执行部署命令..."
          echo "命令内容:"
          echo "${{ github.event.inputs.commands }}"
          
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          set -e
          ${{ github.event.inputs.commands }}
          EOF
          
          echo "✅ 部署命令执行完成"
          
      - name: 使用部署脚本
        if: github.event.inputs.commands == ''
        run: |
          echo "📜 使用通用部署脚本..."
          
          # 上传部署脚本到服务器
          scp -o StrictHostKeyChecking=no -P ${{ secrets.SERVER_PORT }} scripts/deploy.sh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/
          
          # 在服务器上执行部署脚本
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          set -e
          export TARGET_PATH="${{ github.event.inputs.target_path }}"
          chmod +x /tmp/deploy.sh
          /tmp/deploy.sh
          rm -f /tmp/deploy.sh
          EOF
          
          echo "✅ 部署脚本执行完成"
          
      - name: 验证部署
        run: |
          echo "🔍 验证部署结果..."
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "ls -la ${{ github.event.inputs.target_path }}"
          
      - name: 部署完成
        run: |
          echo "🎉 部署完成!"
          echo "部署时间: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          echo "目标路径: ${{ github.event.inputs.target_path }}"
          
      - name: 清理SSH密钥
        if: always()
        run: |
          rm -f ~/.ssh/id_rsa
          rm -f ~/.ssh/known_hosts
          echo "🧹 SSH密钥已清理" 