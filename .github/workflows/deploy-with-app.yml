name: Deploy with GitHub App

on:
  workflow_dispatch:
    inputs:
      project:
        description: '项目标识'
        required: true
        type: string
      lang:
        description: '项目语言 (go|node|python|rust|java)'
        required: true
        type: string
      artifact_id:
        description: '构建产物ID'
        required: true
        type: string
      deploy_path:
        description: '服务器部署路径'
        required: true
        type: string
      start_cmd:
        description: '启动/重启命令'
        required: true
        type: string
      caller_repo:
        description: '调用方仓库'
        required: true
        type: string
      caller_branch:
        description: '调用方分支'
        required: true
        type: string
      caller_commit:
        description: '调用方提交'
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
      id-token: write
    
    steps:
      - name: 生成 GitHub App Token
        id: generate-token
        run: |
          # 生成 JWT Token
          APP_ID="${{ secrets.APP_ID }}"
          PRIVATE_KEY="${{ secrets.APP_PRIVATE_KEY }}"
          
          echo "=== 调试信息 ==="
          echo "App ID: $APP_ID"
          echo "Private Key length: ${#PRIVATE_KEY}"
          echo "Private Key starts with: ${PRIVATE_KEY:0:50}..."
          
          # 检查私钥是否为空
          if [ -z "$PRIVATE_KEY" ]; then
            echo "❌ 私钥为空，请检查 APP_PRIVATE_KEY secret 配置"
            exit 1
          fi
          
          # 检查私钥格式
          if [[ ! "$PRIVATE_KEY" =~ "-----BEGIN" ]]; then
            echo "❌ 私钥格式不正确，应该以 -----BEGIN 开头"
            echo "私钥前100个字符: ${PRIVATE_KEY:0:100}"
            exit 1
          fi
          
          # 清理私钥 - 移除可能的额外字符
          CLEANED_KEY=$(echo "$PRIVATE_KEY" | sed 's/\\n/\n/g' | sed 's/^[[:space:]]*//' | sed 's/[[:space:]]*$//')
          
          # 将私钥写入临时文件
          echo "$CLEANED_KEY" > /tmp/jwt_key.pem
          chmod 600 /tmp/jwt_key.pem
          
          # 验证私钥文件
          echo "=== 私钥文件验证 ==="
          echo "Private key file content (first 5 lines):"
          head -5 /tmp/jwt_key.pem
          
          echo ""
          echo "Private key file size:"
          ls -la /tmp/jwt_key.pem
          
          # 测试私钥是否有效
          echo ""
          echo "=== 私钥格式验证 ==="
          if ! openssl rsa -in /tmp/jwt_key.pem -check -noout 2>/dev/null; then
            echo "❌ 私钥格式无效，请检查私钥内容"
            echo "OpenSSL 错误信息:"
            openssl rsa -in /tmp/jwt_key.pem -check -noout 2>&1
            exit 1
          fi
          
          echo "✅ 私钥格式验证通过"
          
          # 创建 JWT payload
          NOW=$(date +%s)
          EXPIRES=$((NOW + 600)) # 10 minutes
          
          echo ""
          echo "=== JWT 生成 ==="
          echo "当前时间戳: $NOW"
          echo "过期时间戳: $EXPIRES"
          
          # 生成 JWT header - 使用更安全的方法
          HEADER_JSON='{"alg":"RS256","typ":"JWT"}'
          HEADER=$(echo -n "$HEADER_JSON" | base64 -w 0 | tr -d '=' | tr '/+' '_-')
          echo "JWT Header JSON: $HEADER_JSON"
          echo "JWT Header (base64): $HEADER"
          
          # 生成 JWT payload - 使用更安全的方法
          PAYLOAD_JSON="{\"iat\":$NOW,\"exp\":$EXPIRES,\"iss\":\"$APP_ID\"}"
          PAYLOAD=$(echo -n "$PAYLOAD_JSON" | base64 -w 0 | tr -d '=' | tr '/+' '_-')
          echo "JWT Payload JSON: $PAYLOAD_JSON"
          echo "JWT Payload (base64): $PAYLOAD"
          
          # 生成 JWT signature
          echo ""
          echo "=== JWT 签名生成 ==="
          SIGNATURE_INPUT="$HEADER.$PAYLOAD"
          echo "签名输入: $SIGNATURE_INPUT"
          
          SIGNATURE=$(echo -n "$SIGNATURE_INPUT" | openssl dgst -sha256 -sign /tmp/jwt_key.pem | base64 -w 0 | tr -d '=' | tr '/+' '_-')
          
          # 验证签名是否生成成功
          if [ -z "$SIGNATURE" ]; then
            echo "❌ JWT 签名生成失败"
            echo "请检查私钥是否正确"
            exit 1
          fi
          
          echo "JWT Signature (base64): $SIGNATURE"
          
          # 组合 JWT
          JWT="$HEADER.$PAYLOAD.$SIGNATURE"
          echo ""
          echo "=== 完整 JWT ==="
          echo "JWT: $JWT"
          
          # 验证 JWT 格式
          JWT_PARTS=$(echo "$JWT" | tr '.' '\n' | wc -l)
          if [ "$JWT_PARTS" -ne 3 ]; then
            echo "❌ JWT 格式错误，应该有3个部分，实际有 $JWT_PARTS 个部分"
            exit 1
          fi
          
          echo "✅ JWT 格式验证通过"
          
          # 获取 Installation Token
          INSTALLATION_ID="${{ secrets.APP_INSTALLATION_ID }}"
          echo ""
          echo "=== 获取 Installation Token ==="
          echo "Installation ID: $INSTALLATION_ID"
          
          TOKEN_RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer $JWT" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/app/installations/$INSTALLATION_ID/access_tokens")
          
          echo "Token Response: $TOKEN_RESPONSE"
          
          ACCESS_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r '.token')
          
          # 检查令牌是否有效
          if [ "$ACCESS_TOKEN" = "null" ] || [ -z "$ACCESS_TOKEN" ]; then
            echo "❌ GitHub App Token 生成失败"
            echo "响应内容: $TOKEN_RESPONSE"
            echo ""
            echo "=== 调试信息 ==="
            echo "JWT 长度: ${#JWT}"
            echo "JWT 前50个字符: ${JWT:0:50}..."
            echo "请检查："
            echo "1. APP_ID 是否正确"
            echo "2. APP_PRIVATE_KEY 格式是否正确"
            echo "3. APP_INSTALLATION_ID 是否正确"
            exit 1
          fi
          
          echo "token=$ACCESS_TOKEN" >> $GITHUB_OUTPUT
          echo "✅ GitHub App Token 生成成功"
          
          # 显示令牌信息（不包含实际令牌）
          TOKEN_EXPIRES=$(echo "$TOKEN_RESPONSE" | jq -r '.expires_at')
          echo "令牌过期时间: $TOKEN_EXPIRES"
          
          # 清理临时文件
          rm -f /tmp/jwt_key.pem
      
      - name: 显示部署信息
        run: |
          echo "🚀 开始部署项目"
          echo "项目: ${{ github.event.inputs.project }}"
          echo "语言: ${{ github.event.inputs.lang }}"
          echo "调用方: ${{ github.event.inputs.caller_repo }}"
          echo "分支: ${{ github.event.inputs.caller_branch }}"
          echo "提交: ${{ github.event.inputs.caller_commit }}"
          echo "部署路径: ${{ github.event.inputs.deploy_path }}"
          echo "启动命令: ${{ github.event.inputs.start_cmd }}"
          echo "部署时间: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
      
      - name: 下载构建产物
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ github.event.inputs.project }}
          github-token: ${{ steps.generate-token.outputs.token }}
          run-id: ${{ github.event.inputs.artifact_id }}
      
      - name: 设置SSH环境
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SERVER_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # 配置SSH选项
          cat > ~/.ssh/config << EOF
          Host ${{ secrets.SERVER_HOST }}
            HostName ${{ secrets.SERVER_HOST }}
            Port ${{ secrets.SERVER_PORT }}
            User ${{ secrets.SERVER_USER }}
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null
          EOF
          chmod 600 ~/.ssh/config
      
      - name: 测试SSH连接
        run: |
          echo "🔍 测试SSH连接..."
          ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "echo '✅ SSH连接测试成功'"
      
      - name: 创建远程目录
        run: |
          echo "📁 创建远程目录: ${{ github.event.inputs.deploy_path }}"
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "mkdir -p ${{ github.event.inputs.deploy_path }}"
      
      - name: 传输文件
        run: |
          echo "📤 开始传输文件..."
          echo "源路径: ./"
          echo "目标路径: ${{ github.event.inputs.deploy_path }}"
          
          rsync -avz --delete \
            -e "ssh -o StrictHostKeyChecking=no -p ${{ secrets.SERVER_PORT }}" \
            "./" \
            "${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:${{ github.event.inputs.deploy_path }}/"
          
          echo "✅ 文件传输完成"
      
      - name: 执行启动命令
        run: |
          echo "⚙️ 执行启动命令..."
          echo "命令: ${{ github.event.inputs.start_cmd }}"
          
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          set -e
          ${{ github.event.inputs.start_cmd }}
          EOF
          
          echo "✅ 启动命令执行完成"
      
      - name: 验证部署
        run: |
          echo "🔍 验证部署结果..."
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "ls -la ${{ github.event.inputs.deploy_path }}"
      
      - name: 部署完成
        run: |
          echo "🎉 部署完成!"
          echo "项目: ${{ github.event.inputs.project }}"
          echo "语言: ${{ github.event.inputs.lang }}"
          echo "部署时间: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          echo "目标路径: ${{ github.event.inputs.deploy_path }}"
      
      - name: 清理SSH密钥
        if: always()
        run: |
          rm -f ~/.ssh/id_rsa
          rm -f ~/.ssh/known_hosts
          echo "🧹 SSH密钥已清理" 