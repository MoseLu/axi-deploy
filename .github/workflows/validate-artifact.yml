name: Validate Artifact

description: "验证构建产物可用性 - 检查源仓库的构建产物是否存在"

on:
  workflow_call:
    inputs:
      project:
        required: true
        type: string
        description: "项目名称"
      source_repo:
        required: true
        type: string
        description: "源仓库"
      deploy_secrets:
        required: true
        type: string
        description: "部署密钥"
    outputs:
      artifact_available:
        description: "构建产物是否可用"
        value: ${{ jobs.validate.outputs.artifact_available }}
      artifact_info:
        description: "构建产物信息"
        value: ${{ jobs.validate.outputs.artifact_info }}
      run_id:
        description: "构建运行ID"
        value: ${{ jobs.validate.outputs.run_id }}

jobs:
  validate:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
      packages: read
    outputs:
      artifact_available: ${{ steps.check-artifact.outputs.available }}
      artifact_info: ${{ steps.check-artifact.outputs.info }}
      run_id: ${{ steps.check-artifact.outputs.run_id }}
    
    steps:
      - name: 验证构建产物可用性
        id: check-artifact
        run: |
          echo "🔍 验证构建产物可用性..."
          echo "项目名称: ${{ inputs.project }}"
          echo "源仓库: ${{ inputs.source_repo }}"
          echo "期望的构建产物名称: dist-${{ inputs.project }}"
          echo ""
          
          # 从部署密钥中提取GitHub Token
          DEPLOY_SECRETS='${{ inputs.deploy_secrets }}'
          
          # 检查是否为base64编码
          if echo "$DEPLOY_SECRETS" | base64 -d &>/dev/null; then
            echo "📦 检测到base64编码的部署密钥，正在解码..."
            DEPLOY_SECRETS=$(echo "$DEPLOY_SECRETS" | base64 -d)
          fi
          
          # 提取GitHub Token
          if echo "$DEPLOY_SECRETS" | jq -e '.DEPLOY_CENTER_PAT' >/dev/null 2>&1; then
            GITHUB_TOKEN=$(echo "$DEPLOY_SECRETS" | jq -r '.DEPLOY_CENTER_PAT')
          else
            echo "🚨 无法解析DEPLOY_CENTER_PAT参数"
            echo "🔍 部署密钥内容预览:"
            echo "$DEPLOY_SECRETS" | head -c 100
            echo "available=false" >> $GITHUB_OUTPUT
            echo "info=无法解析GitHub Token" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          if [ "$GITHUB_TOKEN" = "null" ] || [ -z "$GITHUB_TOKEN" ]; then
            echo "🚨 缺少必需的DEPLOY_CENTER_PAT参数"
            echo "available=false" >> $GITHUB_OUTPUT
            echo "info=缺少GitHub Token" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "📋 获取最近一次成功的构建产物..."
          
          # 获取最近一次成功的workflow run
          RUNS_RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ inputs.source_repo }}/actions/runs?per_page=10" 2>/dev/null || echo "API调用失败")
          
          echo "🔍 API响应调试信息:"
          echo "响应长度: $(echo "$RUNS_RESPONSE" | wc -c)"
          echo "响应前200字符:"
          echo "$RUNS_RESPONSE" | head -c 200
          echo ""
          
          # 检查API响应是否包含错误
          if echo "$RUNS_RESPONSE" | grep -q '"message"'; then
            ERROR_MSG=$(echo "$RUNS_RESPONSE" | jq -r '.message // empty' 2>/dev/null)
            if [ -n "$ERROR_MSG" ]; then
              echo "❌ API调用失败:"
              echo "$ERROR_MSG"
              echo "available=false" >> $GITHUB_OUTPUT
              echo "info=API调用失败" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi
          
          echo "📊 最近的构建记录:"
          if echo "$RUNS_RESPONSE" | jq -e '.workflow_runs' >/dev/null 2>&1; then
            echo "$RUNS_RESPONSE" | jq -r '.workflow_runs[] | "ID: \(.id), 状态: \(.status), 结论: \(.conclusion), 时间: \(.created_at)"' 2>/dev/null || echo "无法解析构建记录"
          else
            echo "无法解析构建记录响应"
            echo "响应内容: $RUNS_RESPONSE"
          fi
          
          # 获取最近一次成功的run ID
          if echo "$RUNS_RESPONSE" | jq -e '.workflow_runs' >/dev/null 2>&1; then
            LATEST_RUN_ID=$(echo "$RUNS_RESPONSE" | jq -r '.workflow_runs[] | select(.conclusion == "success") | .id' 2>/dev/null | head -1)
          else
            LATEST_RUN_ID=""
          fi
          
          if [ "$LATEST_RUN_ID" = "null" ] || [ -z "$LATEST_RUN_ID" ]; then
            echo "❌ 未找到成功的构建记录"
            echo "🔍 调试信息:"
            echo "- Token长度: $(echo "$GITHUB_TOKEN" | wc -c)"
            echo "- Token前10字符: ${GITHUB_TOKEN:0:10}..."
            echo "- 源仓库: ${{ inputs.source_repo }}"
            echo "- API URL: https://api.github.com/repos/${{ inputs.source_repo }}/actions/runs?per_page=10"
            echo ""
            echo "🔧 可能的原因:"
            echo "1. GitHub Token权限不足"
            echo "2. 源仓库没有成功的构建记录"
            echo "3. API调用失败"
            echo "4. 网络连接问题"
            echo ""
            echo "🔍 建议检查:"
            echo "1. 访问 https://github.com/${{ inputs.source_repo }}/actions"
            echo "2. 确认有成功的构建记录"
            echo "3. 检查Token权限"
            echo "available=false" >> $GITHUB_OUTPUT
            echo "info=未找到成功的构建记录" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "✅ 找到最近的成功构建，运行ID: $LATEST_RUN_ID"
          echo "🔍 构建时间信息:"
          echo "$RUNS_RESPONSE" | jq -r '.workflow_runs[] | select(.id == '$LATEST_RUN_ID') | "创建时间: \(.created_at), 更新时间: \(.updated_at)"' 2>/dev/null || echo "无法获取时间信息"
          
          # 检查该run的构建产物
          ARTIFACTS_RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ inputs.source_repo }}/actions/runs/$LATEST_RUN_ID/artifacts" 2>/dev/null || echo "API调用失败")
          
          echo "📦 构建产物列表:"
          if echo "$ARTIFACTS_RESPONSE" | jq -e '.artifacts' >/dev/null 2>&1; then
            echo "$ARTIFACTS_RESPONSE" | jq -r '.artifacts[] | "名称: \(.name), 大小: \(.size_in_bytes) bytes"' 2>/dev/null || echo "无法解析构建产物"
          else
            echo "无法解析构建产物响应"
            echo "响应内容: $ARTIFACTS_RESPONSE"
          fi
          
          # 检查是否包含目标构建产物
          if echo "$ARTIFACTS_RESPONSE" | grep -q "dist-${{ inputs.project }}"; then
            echo "✅ 找到构建产物: dist-${{ inputs.project }}"
            echo "available=true" >> $GITHUB_OUTPUT
            echo "info=构建产物可用" >> $GITHUB_OUTPUT
            echo "run_id=$LATEST_RUN_ID" >> $GITHUB_OUTPUT
          else
            echo "❌ 未找到构建产物: dist-${{ inputs.project }}"
            echo "🔍 可用的构建产物:"
            if echo "$ARTIFACTS_RESPONSE" | jq -e '.artifacts' >/dev/null 2>&1; then
              echo "$ARTIFACTS_RESPONSE" | jq -r '.artifacts[].name' 2>/dev/null || echo "无法解析构建产物名称"
            else
              echo "$ARTIFACTS_RESPONSE" | grep -o '"name":"[^"]*"' | head -10 || echo "无法解析构建产物"
            fi
            echo "available=false" >> $GITHUB_OUTPUT
            echo "info=构建产物不可用" >> $GITHUB_OUTPUT
            echo ""
            echo "🚨 构建产物验证失败，终止部署"
            echo "🔧 解决方案:"
            echo "1. 重新触发源仓库的构建工作流"
            echo "2. 检查构建产物名称是否正确"
            echo "3. 确认构建是否成功完成"
            exit 1
          fi
