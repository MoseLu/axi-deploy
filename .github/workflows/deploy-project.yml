name: Deploy Project

on:
  workflow_call:
    inputs:
      project:
        required: true
        type: string
        description: "项目名称"
      source_repo:
        required: true
        type: string
        description: "源仓库 (owner/repo)"
      run_id:
        required: true
        type: string
        description: "构建运行ID"
      deploy_type:
        required: true
        type: string
        description: "部署类型 (backend/static)"
        default: "static"
      server_host:
        required: true
        type: string
        description: "服务器地址"
      server_user:
        required: true
        type: string
        description: "服务器用户"
      server_key:
        required: true
        type: string
        description: "服务器密钥"
      server_port:
        required: true
        type: string
        description: "服务器端口"
      deploy_center_pat:
        required: true
        type: string
        description: "GitHub Token用于下载构建产物"
      apps_root:
        required: false
        type: string
        description: "应用目录路径"
        default: "/srv/apps"
      static_root:
        required: false
        type: string
        description: "静态文件目录路径"
        default: "/srv/static"
      backup_root:
        required: false
        type: string
        description: "备份根目录"
        default: "/srv/backups"
      run_user:
        required: false
        type: string
        description: "运行用户"
        default: "deploy"
    outputs:
      deploy_success:
        description: "部署是否成功"
        value: ${{ jobs.deploy.outputs.deploy_success }}
      deploy_path:
        description: "部署路径"
        value: ${{ jobs.deploy.outputs.deploy_path }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    outputs:
      deploy_success: ${{ steps.set-outputs.outputs.deploy_success }}
      deploy_path: ${{ steps.set-outputs.outputs.deploy_path }}
    
    steps:
      - name: 验证输入参数
        run: |
          echo "🔍 验证输入参数..."
          echo "- 项目: ${{ inputs.project }}"
          echo "- 源仓库: ${{ inputs.source_repo }}"
          echo "- 运行ID: ${{ inputs.run_id }}"
          echo "- 部署类型: ${{ inputs.deploy_type }}"
          echo "- 服务器: ${{ inputs.server_host }}:${{ inputs.server_port }}"
          
          if [ "${{ inputs.deploy_type }}" != "backend" ] && [ "${{ inputs.deploy_type }}" != "static" ]; then
            echo "❌ 无效的部署类型: ${{ inputs.deploy_type }}"
            exit 1
          fi
          
          echo "✅ 输入参数验证通过"

      - name: 调试运行ID
        run: |
          echo "🔍 调试运行ID..."
          echo "接收到的运行ID: '${{ inputs.run_id }}'"
          echo "运行ID长度: $(echo '${{ inputs.run_id }}' | wc -c)"
          echo "运行ID是否为空: ${{ inputs.run_id == '' && '是' || '否' }}"
          
          if [ -z "${{ inputs.run_id }}" ]; then
            echo "🚨 运行ID为空，这可能是问题所在"
            exit 1
          fi
          
          echo "✅ 运行ID验证通过"

      - name: 调试下载参数
        run: |
          echo "🔍 调试下载参数..."
          echo "构建产物名称: dist-${{ inputs.project }}"
          echo "源仓库: ${{ inputs.source_repo }}"
          echo "运行ID: ${{ inputs.run_id }}"
          if [ -n "${{ inputs.deploy_center_pat }}" ]; then
            echo "GitHub Token: 已提供"
            TOKEN="${{ inputs.deploy_center_pat }}"
            echo "Token 前10个字符: ${TOKEN:0:10}..."
          else
            echo "GitHub Token: 未提供"
            echo "Token 前10个字符: 未提供"
          fi

      - name: 下载构建产物
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ inputs.project }}
          path: ./
          github-token: ${{ inputs.deploy_center_pat }}
          repository: ${{ inputs.source_repo }}
          run-id: ${{ inputs.run_id }}

      - name: 调试下载结果
        run: |
          echo "🔍 调试下载结果..."
          echo "下载步骤退出码: ${{ steps.download-artifact.outcome }}"
          echo "当前目录: $(pwd)"
          echo "当前目录内容:"
          ls -la ./
          echo ""
          echo "🔍 检查构建产物目录..."
          if [ -d "./dist-${{ inputs.project }}" ]; then
            echo "✅ 找到构建产物目录"
            echo "📁 构建产物内容:"
            ls -la "./dist-${{ inputs.project }}/"
          else
            echo "❌ 构建产物目录不存在"
          fi
          
          if [ -f "./dist-${{ inputs.project }}.zip" ]; then
            echo "✅ 找到构建产物压缩包"
            ls -lh "./dist-${{ inputs.project }}.zip"
          else
            echo "❌ 构建产物压缩包不存在"
          fi
          
          echo ""
          echo "🔍 所有文件和目录:"
          find . -type f -maxdepth 2
          find . -type d -maxdepth 2
          
          # 如果下载失败，提供详细的调试信息
          if [ "${{ steps.download-artifact.outcome }}" == "failure" ]; then
            echo ""
            echo "🚨 下载失败，详细调试信息:"
            echo "- 项目名称: ${{ inputs.project }}"
            echo "- 源仓库: ${{ inputs.source_repo }}"
            echo "- 运行ID: ${{ inputs.run_id }}"
            echo "- 期望的构建产物名称: dist-${{ inputs.project }}"
            echo "- GitHub Token: ${{ inputs.deploy_center_pat != '' && '已提供' || '未提供' }}"
            echo ""
            echo "🔧 可能的原因:"
            echo "1. 构建产物名称不匹配"
            echo "2. 构建产物已过期"
            echo "3. GitHub Token权限不足"
            echo "4. 源仓库或运行ID错误"
            echo "5. 跨仓库访问限制"
            echo ""
            echo "🔍 建议检查:"
            echo "1. 访问 https://github.com/${{ inputs.source_repo }}/actions/runs/${{ inputs.run_id }}"
            echo "2. 查看构建产物列表"
            echo "3. 确认构建产物名称"
            echo "4. 检查Token权限"
            exit 1
          fi

      - name: 部署到服务器
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ inputs.server_host }}
          username: ${{ inputs.server_user }}
          key: ${{ inputs.server_key }}
          port: ${{ inputs.server_port }}
          script: |
            echo "🚀 开始部署项目: ${{ inputs.project }}"
            
            # 标准化目录结构
            APPS_ROOT="${{ inputs.apps_root || '/srv/apps' }}"
            STATIC_ROOT="${{ inputs.static_root || '/srv/static' }}"
            PROJECT="${{ inputs.project }}"
            DEPLOY_PATH=""
            
            # 根据部署类型确定部署路径
            if [[ "${{ inputs.deploy_type }}" == "backend" ]]; then
              # 后端项目部署到应用目录
              DEPLOY_PATH="$APPS_ROOT/$PROJECT"
              echo "📁 后端项目部署到: $DEPLOY_PATH"
            else
              # 静态项目部署到静态文件目录
              DEPLOY_PATH="$STATIC_ROOT/$PROJECT"
              echo "📁 静态项目部署到: $DEPLOY_PATH"
            fi
            
            # 创建部署目录
            sudo mkdir -p $DEPLOY_PATH
            sudo chown ${{ inputs.run_user || 'deploy' }}:${{ inputs.run_user || 'deploy' }} $DEPLOY_PATH
            
            # 创建项目专用备份目录
            if [[ "${{ inputs.deploy_type }}" == "backend" ]]; then
              BACKUP_ROOT="${{ inputs.backup_root || '/srv/backups' }}/apps"
            else
              BACKUP_ROOT="${{ inputs.backup_root || '/srv/backups' }}/static"
            fi
            PROJECT_BACKUP_DIR="$BACKUP_ROOT/$PROJECT"
            echo "📁 创建项目备份目录: $PROJECT_BACKUP_DIR"
            sudo mkdir -p "$PROJECT_BACKUP_DIR"
            sudo chmod 755 "$PROJECT_BACKUP_DIR"
            
            # 备份旧部署（如果存在）
            if [ -d "$DEPLOY_PATH" ] && [ "$(ls -A $DEPLOY_PATH)" ]; then
              echo "📋 备份旧部署目录: $DEPLOY_PATH"
              BACKUP_NAME="$PROJECT_BACKUP_DIR/$PROJECT.backup.$(date +%Y%m%d_%H%M%S)"
              sudo cp -r $DEPLOY_PATH $BACKUP_NAME
              echo "✅ 旧部署目录已备份到: $BACKUP_NAME"
              
              # 清理旧的备份文件，只保留最近2个
              echo "🧹 清理旧的备份文件..."
              BACKUP_FILES=$(ls -t "$PROJECT_BACKUP_DIR"/$PROJECT.backup.* 2>/dev/null | tail -n +3)
              if [ -n "$BACKUP_FILES" ]; then
                echo "🗑️ 删除旧的备份文件:"
                echo "$BACKUP_FILES" | xargs -r sudo rm -rf
                echo "✅ 旧备份文件已清理，保留最近2个备份"
              else
                echo "📋 没有需要清理的旧备份文件"
              fi
            else
              echo "📋 没有旧部署需要备份"
            fi
            
            # 清理目标部署目录（避免残留文件）
            echo "🧹 清理目标部署目录..."
            sudo rm -rf $DEPLOY_PATH/*
            sudo mkdir -p $DEPLOY_PATH
            sudo chown deploy:deploy $DEPLOY_PATH
            echo "✅ 部署目录已清理并重新创建"

      - name: 检查构建产物是否存在
        run: |
          echo "🔍 检查构建产物是否存在..."
          
          if [ ! -d "./dist-${{ inputs.project }}" ]; then
            echo "🚨 构建产物目录不存在: ./dist-${{ inputs.project }}"
            echo "📁 当前目录内容:"
            ls -la ./
            echo ""
            echo "🔍 所有文件和目录:"
            find . -type f -maxdepth 2
            find . -type d -maxdepth 2
            echo ""
            echo "❌ 构建产物下载失败，无法继续部署"
            exit 1
          fi
          
          echo "✅ 构建产物目录存在"
          echo "📁 构建产物内容:"
          ls -la "./dist-${{ inputs.project }}/"
          echo "📊 文件数量: $(find "./dist-${{ inputs.project }}" -type f | wc -l)"

      - name: 上传构建产物到服务器
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ inputs.server_host }}
          username: ${{ inputs.server_user }}
          key: ${{ inputs.server_key }}
          port: ${{ inputs.server_port }}
          source: "./dist-${{ inputs.project }}/"
          target: "/tmp/"
          strip_components: 0

      - name: 移动构建产物到部署目录
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ inputs.server_host }}
          username: ${{ inputs.server_user }}
          key: ${{ inputs.server_key }}
          port: ${{ inputs.server_port }}
          script: |
            echo "📁 移动构建产物到部署目录..."
            
            PROJECT="${{ inputs.project }}"
            
            # 根据部署类型确定部署路径
            if [[ "${{ inputs.deploy_type }}" == "backend" ]]; then
              DEPLOY_PATH="${{ inputs.apps_root || '/srv/apps' }}/$PROJECT"
            else
              DEPLOY_PATH="${{ inputs.static_root || '/srv/static' }}/$PROJECT"
            fi
            
            # 检查临时目录中的构建产物
            TEMP_SOURCE="/tmp/dist-$PROJECT"
            echo "📁 检查临时构建产物: $TEMP_SOURCE"
            
            if [ ! -d "$TEMP_SOURCE" ]; then
              echo "🚨 临时构建产物目录不存在: $TEMP_SOURCE"
              echo "📁 /tmp 目录内容:"
              ls -la /tmp/
              exit 1
            fi
            
            echo "📁 临时构建产物内容:"
            ls -la "$TEMP_SOURCE/"
            
            # 统计文件数量
            FILE_COUNT=$(find "$TEMP_SOURCE" -type f | wc -l)
            echo "📊 构建产物文件数量: $FILE_COUNT"
            
            if [ "$FILE_COUNT" -eq 0 ]; then
              echo "🚨 构建产物为空"
              exit 1
            fi
            
            # 移动构建产物到部署目录
            echo "📁 移动构建产物到部署目录: $DEPLOY_PATH"
            sudo cp -r "$TEMP_SOURCE"/* "$DEPLOY_PATH/"
            sudo chown -R ${{ inputs.run_user || 'deploy' }}:${{ inputs.run_user || 'deploy' }} "$DEPLOY_PATH"
            
            echo "✅ 构建产物已成功部署到: $DEPLOY_PATH"
            echo "📁 部署目录内容:"
            ls -la "$DEPLOY_PATH/"
            echo "📊 部署文件数量: $(find "$DEPLOY_PATH" -type f | wc -l)"
            
            # 清理临时文件
            echo "🧹 清理临时文件..."
            sudo rm -rf "$TEMP_SOURCE"
            echo "✅ 临时文件已清理"
            
            # 最终验证
            echo "🔍 最终验证部署结果..."
            if [ -d "$DEPLOY_PATH" ] && [ "$(ls -A $DEPLOY_PATH)" ]; then
              echo "✅ 部署验证通过"
              echo "📁 部署目录内容:"
              ls -la $DEPLOY_PATH/
              echo "📊 最终文件数量: $(find "$DEPLOY_PATH" -type f | wc -l)"
            else
              echo "🚨 部署验证失败"
              exit 1
            fi
            
            # 清理临时目录
            echo "🧹 清理临时目录..."
            sudo rm -rf $TEMP_DIR
            echo "✅ 临时目录已清理: $TEMP_DIR"
            
            echo "✅ 项目部署完成: ${{ inputs.project }}"

      - name: 设置输出
        id: set-outputs
        run: |
          if [[ "${{ inputs.deploy_type }}" == "backend" ]]; then
            DEPLOY_PATH="/srv/apps/${{ inputs.project }}"
          else
            DEPLOY_PATH="/srv/static/${{ inputs.project }}"
          fi
          
          echo "deploy_success=true" >> $GITHUB_OUTPUT
          echo "deploy_path=$DEPLOY_PATH" >> $GITHUB_OUTPUT
          echo "✅ 输出已设置"
          echo "- deploy_success: true"
          echo "- deploy_path: $DEPLOY_PATH"
